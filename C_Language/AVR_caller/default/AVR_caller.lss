
AVR_caller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cd4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000cd4  00000d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004d  00800064  00800064  00000d8c  2**0
                  ALLOC
  3 .eeprom       0000002b  00810000  00810000  00000d8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000a50  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000026f  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00001a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000003a5  00000000  00000000  00001a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001283  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000002a7  00000000  00000000  000030bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000fcf  00000000  00000000  00003366  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000180  00000000  00000000  00004338  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000453  00000000  00000000  000044b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000646  00000000  00000000  0000490b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000038  00000000  00000000  00004f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00004f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	bd c0       	rjmp	.+378    	; 0x17c <__ctors_end>
   2:	9f c1       	rjmp	.+830    	; 0x342 <__vector_1>
   4:	be c1       	rjmp	.+892    	; 0x382 <__vector_2>
   6:	d5 c0       	rjmp	.+426    	; 0x1b2 <__bad_interrupt>
   8:	d4 c0       	rjmp	.+424    	; 0x1b2 <__bad_interrupt>
   a:	d3 c0       	rjmp	.+422    	; 0x1b2 <__bad_interrupt>
   c:	20 c1       	rjmp	.+576    	; 0x24e <__vector_6>
   e:	d1 c0       	rjmp	.+418    	; 0x1b2 <__bad_interrupt>
  10:	d0 c0       	rjmp	.+416    	; 0x1b2 <__bad_interrupt>
  12:	cf c0       	rjmp	.+414    	; 0x1b2 <__bad_interrupt>
  14:	ce c0       	rjmp	.+412    	; 0x1b2 <__bad_interrupt>
  16:	ce c0       	rjmp	.+412    	; 0x1b4 <__vector_11>
  18:	cc c0       	rjmp	.+408    	; 0x1b2 <__bad_interrupt>
  1a:	cb c0       	rjmp	.+406    	; 0x1b2 <__bad_interrupt>
  1c:	ca c0       	rjmp	.+404    	; 0x1b2 <__bad_interrupt>
  1e:	c9 c0       	rjmp	.+402    	; 0x1b2 <__bad_interrupt>
  20:	d0 c1       	rjmp	.+928    	; 0x3c2 <__vector_16>
  22:	c7 c0       	rjmp	.+398    	; 0x1b2 <__bad_interrupt>
  24:	c6 c0       	rjmp	.+396    	; 0x1b2 <__bad_interrupt>
  26:	3e c3       	rjmp	.+1660   	; 0x6a4 <SwitchSIMCOM_mode+0x3e>
  28:	54 c3       	rjmp	.+1704   	; 0x6d2 <SwitchSIMCOM_mode+0x6c>
  2a:	59 c3       	rjmp	.+1714   	; 0x6de <SwitchSIMCOM_mode+0x78>
  2c:	5e c3       	rjmp	.+1724   	; 0x6ea <SwitchSIMCOM_mode+0x84>
  2e:	60 c3       	rjmp	.+1728   	; 0x6f0 <SwitchSIMCOM_mode+0x8a>
  30:	62 c3       	rjmp	.+1732   	; 0x6f6 <SwitchSIMCOM_mode+0x90>
  32:	64 c3       	rjmp	.+1736   	; 0x6fc <SwitchSIMCOM_mode+0x96>
  34:	69 c3       	rjmp	.+1746   	; 0x708 <SwitchSIMCOM_mode+0xa2>
  36:	6e c3       	rjmp	.+1756   	; 0x714 <SwitchSIMCOM_mode+0xae>
  38:	73 c3       	rjmp	.+1766   	; 0x720 <SwitchSIMCOM_mode+0xba>
  3a:	7e c3       	rjmp	.+1788   	; 0x738 <SwitchSIMCOM_mode+0xd2>
  3c:	c1 c3       	rjmp	.+1922   	; 0x7c0 <CheckSIMCOM+0x6e>
  3e:	a5 c3       	rjmp	.+1866   	; 0x78a <CheckSIMCOM+0x38>
  40:	a6 c3       	rjmp	.+1868   	; 0x78e <CheckSIMCOM+0x3c>
  42:	a9 c3       	rjmp	.+1874   	; 0x796 <CheckSIMCOM+0x44>
  44:	aa c3       	rjmp	.+1876   	; 0x79a <CheckSIMCOM+0x48>
  46:	b8 c3       	rjmp	.+1904   	; 0x7b8 <CheckSIMCOM+0x66>
  48:	aa c3       	rjmp	.+1876   	; 0x79e <CheckSIMCOM+0x4c>
  4a:	ab c3       	rjmp	.+1878   	; 0x7a2 <CheckSIMCOM+0x50>
  4c:	ac c3       	rjmp	.+1880   	; 0x7a6 <CheckSIMCOM+0x54>
  4e:	af c3       	rjmp	.+1886   	; 0x7ae <CheckSIMCOM+0x5c>
  50:	b0 c3       	rjmp	.+1888   	; 0x7b2 <CheckSIMCOM+0x60>
  52:	b8 c4       	rjmp	.+2416   	; 0x9c4 <Ring+0x54>
  54:	be c4       	rjmp	.+2428   	; 0x9d2 <Ring+0x62>
  56:	cb c4       	rjmp	.+2454   	; 0x9ee <Ring+0x7e>
  58:	d0 c4       	rjmp	.+2464   	; 0x9fa <Ring+0x8a>
  5a:	d4 c4       	rjmp	.+2472   	; 0xa04 <Ring+0x94>
  5c:	d9 c4       	rjmp	.+2482   	; 0xa10 <Ring+0xa0>
  5e:	e7 c4       	rjmp	.+2510   	; 0xa2e <Ring+0xbe>
  60:	ec c4       	rjmp	.+2520   	; 0xa3a <Ring+0xca>
  62:	f0 c4       	rjmp	.+2528   	; 0xa44 <Ring+0xd4>
  64:	fe c4       	rjmp	.+2556   	; 0xa62 <Ring+0xf2>
  66:	0c c5       	rjmp	.+2584   	; 0xa80 <Ring+0x110>
  68:	10 c5       	rjmp	.+2592   	; 0xa8a <Ring+0x11a>
  6a:	19 c5       	rjmp	.+2610   	; 0xa9e <Ring+0x12e>
  6c:	21 c5       	rjmp	.+2626   	; 0xab0 <Ring+0x140>

0000006e <AT>:
  6e:	41 54 0d 00                                         AT..

00000072 <ATE0>:
  72:	41 54 45 30 0d 00                                   ATE0..

00000078 <AT_IPR>:
  78:	41 54 2b 49 50 52 3d 39 36 30 30 0d 00              AT+IPR=9600..

00000085 <AT_CLCC>:
  85:	41 54 2b 43 4c 43 43 3d 30 0d 00                    AT+CLCC=0..

00000090 <AT_CMGF>:
  90:	41 54 2b 43 4d 47 46 3d 31 0d 00                    AT+CMGF=1..

0000009b <AT_CLIP>:
  9b:	41 54 2b 43 4c 49 50 3d 31 0d 00                    AT+CLIP=1..

000000a6 <AT_CPAS>:
  a6:	41 54 2b 43 50 41 53 0d 00                          AT+CPAS..

000000af <AT_CREG>:
  af:	41 54 2b 43 52 45 47 3f 0d 00                       AT+CREG?..

000000b9 <AT_CCALR>:
  b9:	41 54 2b 43 43 41 4c 52 3f 0d 00                    AT+CCALR?..

000000c4 <ATD>:
  c4:	41 54 44 00                                         ATD.

000000c8 <RING_END>:
  c8:	3b 0d 00                                            ;..

000000cb <AT_CMGS>:
  cb:	41 54 2b 43 4d 47 53 3d 22 00                       AT+CMGS=".

000000d5 <AT_CMGS_2>:
  d5:	22 0d 00                                            "..

000000d8 <NO_220>:
  d8:	48 45 54 20 32 32 30 42 1a 00                       HET 220B..

000000e2 <ATH>:
  e2:	41 54 48 0d 00                                      ATH..

000000e7 <AT_GSMBUSY_1>:
  e7:	41 54 2b 47 53 4d 42 55 53 59 3d 31 0d 00           AT+GSMBUSY=1..

000000f5 <AT_GSMBUSY_0>:
  f5:	41 54 2b 47 53 4d 42 55 53 59 3d 30 0d 00           AT+GSMBUSY=0..

00000103 <AT_OK>:
 103:	41 54 0d 0d 0a 4f 4b 0d 0a 00                       AT...OK...

0000010d <ATE0_OK>:
 10d:	41 54 45 30 0d 0d 0a 4f 4b 0d 0a 00                 ATE0...OK...

00000119 <_OK>:
 119:	0d 0a 4f 4b 0d 0a 00                                ..OK...

00000120 <CPAS_OK>:
 120:	0d 0a 2b 43 50 41 53 3a 20 30 0d 0a 0d 0a 4f 4b     ..+CPAS: 0....OK
 130:	0d 0a 00                                            ...

00000133 <CREG_OK>:
 133:	0d 0a 2b 43 52 45 47 3a 20 30 2c 31 0d 0a 0d 0a     ..+CREG: 0,1....
 143:	4f 4b 0d 0a 00                                      OK...

00000148 <CCALR_OK>:
 148:	0d 0a 2b 43 43 41 4c 52 3a 20 31 0d 0a 0d 0a 4f     ..+CCALR: 1....O
 158:	4b 0d 0a 00                                         K...

0000015c <RING>:
 15c:	0d 0a 52 49 4e 47 0d 0a 0d 0a 2b 43 4c 49 50 3a     ..RING....+CLIP:
 16c:	20 22 00                                             ".

0000016f <POINTER>:
 16f:	3e 20 00                                            > .

00000172 <BUSY>:
 172:	0d 0a 42 55 53 59 0d 0a 00 00                       ..BUSY....

0000017c <__ctors_end>:
 17c:	11 24       	eor	r1, r1
 17e:	1f be       	out	0x3f, r1	; 63
 180:	cf e5       	ldi	r28, 0x5F	; 95
 182:	d4 e0       	ldi	r29, 0x04	; 4
 184:	de bf       	out	0x3e, r29	; 62
 186:	cd bf       	out	0x3d, r28	; 61

00000188 <__do_copy_data>:
 188:	10 e0       	ldi	r17, 0x00	; 0
 18a:	a0 e6       	ldi	r26, 0x60	; 96
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	e4 ed       	ldi	r30, 0xD4	; 212
 190:	fc e0       	ldi	r31, 0x0C	; 12
 192:	02 c0       	rjmp	.+4      	; 0x198 <__do_copy_data+0x10>
 194:	05 90       	lpm	r0, Z+
 196:	0d 92       	st	X+, r0
 198:	a4 36       	cpi	r26, 0x64	; 100
 19a:	b1 07       	cpc	r27, r17
 19c:	d9 f7       	brne	.-10     	; 0x194 <__do_copy_data+0xc>

0000019e <__do_clear_bss>:
 19e:	10 e0       	ldi	r17, 0x00	; 0
 1a0:	a4 e6       	ldi	r26, 0x64	; 100
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <.do_clear_bss_start>

000001a6 <.do_clear_bss_loop>:
 1a6:	1d 92       	st	X+, r1

000001a8 <.do_clear_bss_start>:
 1a8:	a1 3b       	cpi	r26, 0xB1	; 177
 1aa:	b1 07       	cpc	r27, r17
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <.do_clear_bss_loop>
 1ae:	b5 d4       	rcall	.+2410   	; 0xb1a <main>
 1b0:	8f c5       	rjmp	.+2846   	; 0xcd0 <_exit>

000001b2 <__bad_interrupt>:
 1b2:	26 cf       	rjmp	.-436    	; 0x0 <__vectors>

000001b4 <__vector_11>:
		}		
	}
}
//=====================================================================================================================================================
ISR (USART_RXC_vect)										// Прерывание по приходу байта в буффер UART
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	if (ppk_mode == PROG)									// Если прибор в режиме "ПРОГРАММИРОВАНИЕ" (записи телефонных номеров)
 1c6:	80 91 71 00 	lds	r24, 0x0071
 1ca:	80 34       	cpi	r24, 0x40	; 64
 1cc:	b9 f4       	brne	.+46     	; 0x1fc <__vector_11+0x48>
	{
		buffer[buffer_index] = UDR;							// Просто пишем данные (телефонный номер звонящего) в буффер		
 1ce:	e0 91 64 00 	lds	r30, 0x0064
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	8c b1       	in	r24, 0x0c	; 12
 1d6:	ed 55       	subi	r30, 0x5D	; 93
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	80 83       	st	Z, r24
		buffer_index++;										// Увеличиваем индекс
 1dc:	80 91 64 00 	lds	r24, 0x0064
 1e0:	8f 5f       	subi	r24, 0xFF	; 255
 1e2:	80 93 64 00 	sts	0x0064, r24
		if (buffer_index == buffer_max-1)					// Если достигли конца буффера 
 1e6:	80 91 64 00 	lds	r24, 0x0064
 1ea:	8d 30       	cpi	r24, 0x0D	; 13
 1ec:	39 f5       	brne	.+78     	; 0x23c <__vector_11+0x88>
		{
			buffer[buffer_index] = '\0';					// Запишем признак конца строки
 1ee:	e0 91 64 00 	lds	r30, 0x0064
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	ed 55       	subi	r30, 0x5D	; 93
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	10 82       	st	Z, r1
 1fa:	1b c0       	rjmp	.+54     	; 0x232 <__vector_11+0x7e>
		}			
	}

	else													// Если прибор парсит приходящие команды, парсим строку посимвольно
	{
		if (UDR == pgm_read_byte(parsing_pointer))			// Сравниваем принятый байт с символом из строки  
 1fc:	8c b1       	in	r24, 0x0c	; 12
 1fe:	e0 91 a1 00 	lds	r30, 0x00A1
 202:	f0 91 a2 00 	lds	r31, 0x00A2
 206:	e4 91       	lpm	r30, Z+
 208:	8e 17       	cp	r24, r30
 20a:	a9 f4       	brne	.+42     	; 0x236 <__vector_11+0x82>
		{													// Если идентичны		
			parsing_pointer++;								// Увеличиваем указатель, выбирая следующий символ строки
 20c:	80 91 a1 00 	lds	r24, 0x00A1
 210:	90 91 a2 00 	lds	r25, 0x00A2
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 a2 00 	sts	0x00A2, r25
 21a:	80 93 a1 00 	sts	0x00A1, r24
			if (pgm_read_byte(parsing_pointer) == '\0')		// Если следующий байт строки 0 (конец строки)
 21e:	e0 91 a1 00 	lds	r30, 0x00A1
 222:	f0 91 a2 00 	lds	r31, 0x00A2
 226:	e4 91       	lpm	r30, Z+
 228:	ee 23       	and	r30, r30
 22a:	41 f4       	brne	.+16     	; 0x23c <__vector_11+0x88>
			{			
				parsing_result = OK;						// Устанавливаем признак успешного окончания парсинга
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 60 00 	sts	0x0060, r24
				UCSRB &= ~(1<<RXCIE);						// Запрещаем прерывание по приходу байта - прием закончен			
 232:	57 98       	cbi	0x0a, 7	; 10
 234:	03 c0       	rjmp	.+6      	; 0x23c <__vector_11+0x88>
			}
		}

		else parsing_result = BAD;							// Если не идентичны - возвращаем признак ошибки парсинга. Не 0, чтобы сразу зафиксировать неудачный парсинг
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	80 93 60 00 	sts	0x0060, r24
	}
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_6>:
//=====================================================================================================================================================
ISR (TIMER1_COMPA_vect)										// Прерывание по совпадению Timer1
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
	if (parsing_delay != 65535)								// Если подсчет времени парсинга не запрещен (записью максимального значения в счетчик)
 25e:	80 91 67 00 	lds	r24, 0x0067
 262:	90 91 68 00 	lds	r25, 0x0068
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	8f 3f       	cpi	r24, 0xFF	; 255
 26a:	92 07       	cpc	r25, r18
 26c:	b9 f0       	breq	.+46     	; 0x29c <__vector_6+0x4e>
	{		
		if (parsing_delay != 0) parsing_delay--;
 26e:	80 91 67 00 	lds	r24, 0x0067
 272:	90 91 68 00 	lds	r25, 0x0068
 276:	00 97       	sbiw	r24, 0x00	; 0
 278:	41 f4       	brne	.+16     	; 0x28a <__vector_6+0x3c>
		else
		{
			if (parsing_result != OK)						// Время парсинга исчерпано, если не был установлен признак успешного парсинга
 27a:	80 91 60 00 	lds	r24, 0x0060
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	21 f0       	breq	.+8      	; 0x28a <__vector_6+0x3c>
			{
				parsing_result = BAD;						// Устанавливаем признак проваленого парсинга
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	80 93 60 00 	sts	0x0060, r24
				UCSRB &= ~(1<<RXCIE);						// Запрещаем прерывание по приходу байта - чтобы не отвлекаться на всякую дрянь
 288:	57 98       	cbi	0x0a, 7	; 10
			}
			parsing_delay--;								// Запрещаем подсчет времени парсинга (записью максимального значения в счетчик)
 28a:	80 91 67 00 	lds	r24, 0x0067
 28e:	90 91 68 00 	lds	r25, 0x0068
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	90 93 68 00 	sts	0x0068, r25
 298:	80 93 67 00 	sts	0x0067, r24
			else LED_PORT ^= 1<<LED_WORK;
			led_delay--;									// Запрещаем отсчет времени мигания светодиодов (записью максимального значения в счетчик)
		}
	}
*/	
	if (debounce_delay != 0) debounce_delay--;				// Отсчет времени запрета опроса кнопки постановки/снятия после предыдущего нажатия
 29c:	80 91 65 00 	lds	r24, 0x0065
 2a0:	90 91 66 00 	lds	r25, 0x0066
 2a4:	00 97       	sbiw	r24, 0x00	; 0
 2a6:	49 f0       	breq	.+18     	; 0x2ba <__vector_6+0x6c>
 2a8:	80 91 65 00 	lds	r24, 0x0065
 2ac:	90 91 66 00 	lds	r25, 0x0066
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	90 93 66 00 	sts	0x0066, r25
 2b6:	80 93 65 00 	sts	0x0065, r24
	if (exit_delay != 0) exit_delay--;						// Отсчет задержки вход/выход, если она есть
 2ba:	80 91 69 00 	lds	r24, 0x0069
 2be:	90 91 6a 00 	lds	r25, 0x006A
 2c2:	00 97       	sbiw	r24, 0x00	; 0
 2c4:	49 f0       	breq	.+18     	; 0x2d8 <__vector_6+0x8a>
 2c6:	80 91 69 00 	lds	r24, 0x0069
 2ca:	90 91 6a 00 	lds	r25, 0x006A
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	90 93 6a 00 	sts	0x006A, r25
 2d4:	80 93 69 00 	sts	0x0069, r24
	if (siren_delay != 0) siren_delay--;					// Отсчет времени звучания сирены
 2d8:	80 91 6d 00 	lds	r24, 0x006D
 2dc:	90 91 6e 00 	lds	r25, 0x006E
 2e0:	00 97       	sbiw	r24, 0x00	; 0
 2e2:	49 f0       	breq	.+18     	; 0x2f6 <__vector_6+0xa8>
 2e4:	80 91 6d 00 	lds	r24, 0x006D
 2e8:	90 91 6e 00 	lds	r25, 0x006E
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	90 93 6e 00 	sts	0x006E, r25
 2f2:	80 93 6d 00 	sts	0x006D, r24
	if (out_delay != 0) out_delay--;						// Отсчет времени активации выходов
 2f6:	80 91 6f 00 	lds	r24, 0x006F
 2fa:	90 91 70 00 	lds	r25, 0x0070
 2fe:	00 97       	sbiw	r24, 0x00	; 0
 300:	49 f0       	breq	.+18     	; 0x314 <__vector_6+0xc6>
 302:	80 91 6f 00 	lds	r24, 0x006F
 306:	90 91 70 00 	lds	r25, 0x0070
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	90 93 70 00 	sts	0x0070, r25
 310:	80 93 6f 00 	sts	0x006F, r24
	if (led_delay != 0) led_delay--;						// Отсчет времени мигания светодиодов
 314:	80 91 6b 00 	lds	r24, 0x006B
 318:	90 91 6c 00 	lds	r25, 0x006C
 31c:	00 97       	sbiw	r24, 0x00	; 0
 31e:	49 f0       	breq	.+18     	; 0x332 <__vector_6+0xe4>
 320:	80 91 6b 00 	lds	r24, 0x006B
 324:	90 91 6c 00 	lds	r25, 0x006C
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	90 93 6c 00 	sts	0x006C, r25
 32e:	80 93 6b 00 	sts	0x006B, r24
}
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <__vector_1>:
//=====================================================================================================================================================
ISR (INT0_vect)												// Прерывание по INT0
{
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
	if (ppk_mode == GUARD_ON)								// Если ППК в режиме "ПОД ОХРАНОЙ" (тривог до этого момента не было)
 350:	80 91 71 00 	lds	r24, 0x0071
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	51 f4       	brne	.+20     	; 0x36c <__vector_1+0x2a>
	{
		ppk_mode = DELAY_IN;								// Переводим ППК в состояние задержка на вход
 358:	80 e2       	ldi	r24, 0x20	; 32
 35a:	80 93 71 00 	sts	0x0071, r24
		exit_delay = IN_DELAY;
 35e:	80 e1       	ldi	r24, 0x10	; 16
 360:	97 e2       	ldi	r25, 0x27	; 39
 362:	90 93 6a 00 	sts	0x006A, r25
 366:	80 93 69 00 	sts	0x0069, r24
 36a:	03 c0       	rjmp	.+6      	; 0x372 <__vector_1+0x30>
	} 
	else ppk_mode = ALARM_ACTIVE;							// Иначе сразу формируем очередную тревогу	
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	80 93 71 00 	sts	0x0071, r24
	GICR = 0<<INT1|0<<INT0;									// Запретим прерывания INT1 и INT0
 372:	1b be       	out	0x3b, r1	; 59
}
 374:	9f 91       	pop	r25
 376:	8f 91       	pop	r24
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <__vector_2>:
//=====================================================================================================================================================
ISR (INT1_vect)												// Прерывание по INT1
{
 382:	1f 92       	push	r1
 384:	0f 92       	push	r0
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	0f 92       	push	r0
 38a:	11 24       	eor	r1, r1
 38c:	8f 93       	push	r24
 38e:	9f 93       	push	r25
	if (ppk_mode == GUARD_ON)								// Если ППК в режиме "ПОД ОХРАНОЙ" (тривог до этого момента не было)
 390:	80 91 71 00 	lds	r24, 0x0071
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	51 f4       	brne	.+20     	; 0x3ac <__vector_2+0x2a>
	{
		ppk_mode = DELAY_IN;								// Переводим ППК в состояние задержка на вход
 398:	80 e2       	ldi	r24, 0x20	; 32
 39a:	80 93 71 00 	sts	0x0071, r24
		exit_delay = IN_DELAY;
 39e:	80 e1       	ldi	r24, 0x10	; 16
 3a0:	97 e2       	ldi	r25, 0x27	; 39
 3a2:	90 93 6a 00 	sts	0x006A, r25
 3a6:	80 93 69 00 	sts	0x0069, r24
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <__vector_2+0x30>
	} 
	else ppk_mode = ALARM_ACTIVE;							// Иначе сразу формируем очередную тревогу
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	80 93 71 00 	sts	0x0071, r24
	GICR = 0<<INT1|0<<INT0;									// Запретим прерывания INT1 и INT0
 3b2:	1b be       	out	0x3b, r1	; 59
}
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <__vector_16>:
//=====================================================================================================================================================
ISR (ANA_COMP_vect)											// Прерывание компаратора, возникает при пропаже сети 220В
{
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	8f 93       	push	r24
	flags |= 1<<sms_flag;									// Установим флаг необходимости отправки SMS
 3ce:	80 91 72 00 	lds	r24, 0x0072
 3d2:	81 60       	ori	r24, 0x01	; 1
 3d4:	80 93 72 00 	sts	0x0072, r24
	ACSR &= ~(1<<ACIE);										// Запретим прерывания от компаратора для однократной отправки SMS
 3d8:	43 98       	cbi	0x08, 3	; 8
}
 3da:	8f 91       	pop	r24
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <CheckButton>:
	ActivateParsing(_OK,RING_WAIT_TIME);					// Активируем ожидание ответа
}
//=====================================================================================================================================================
// Функция проверки кнопки постановки/снятия
void CheckButton(unsigned int button_counter_delay)			// Опрашиваем кнопку постановки/снятия внутри функций, чтобы не нагружать таймер
{															// В качестве параметра передаеться количество пропусков циклов (внутри функции, из которой был запущен опрос кнопки) до фактического опроса кнопки
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	ec 01       	movw	r28, r24
	if (debounce_delay == 0)								// Если нет запрета на опрос кнопки постановки/снятия
 3ec:	80 91 65 00 	lds	r24, 0x0065
 3f0:	90 91 66 00 	lds	r25, 0x0066
 3f4:	00 97       	sbiw	r24, 0x00	; 0
 3f6:	09 f0       	breq	.+2      	; 0x3fa <CheckButton+0x14>
 3f8:	45 c0       	rjmp	.+138    	; 0x484 <__stack+0x25>
	{
		check_button_counter--;							
 3fa:	80 91 9f 00 	lds	r24, 0x009F
 3fe:	90 91 a0 00 	lds	r25, 0x00A0
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	90 93 a0 00 	sts	0x00A0, r25
 408:	80 93 9f 00 	sts	0x009F, r24
		if (check_button_counter == 0)
 40c:	00 97       	sbiw	r24, 0x00	; 0
 40e:	d1 f5       	brne	.+116    	; 0x484 <__stack+0x25>
		{
			pin_state = BUTTON_PINS;						// Читаем состояние всего порта
 410:	86 b3       	in	r24, 0x16	; 22
 412:	80 93 9e 00 	sts	0x009E, r24
			if (!(pin_state & (1<<BUTTON_PIN)))				// Если кнопка постановки/снятия нажата, активируем переход в другой режим
 416:	85 fd       	sbrc	r24, 5
 418:	31 c0       	rjmp	.+98     	; 0x47c <__stack+0x1d>
			{
				if (ppk_mode == GUARD_OFF)					// Если текущий режим "СНЯТО С ОХРАНЫ"						
 41a:	80 91 71 00 	lds	r24, 0x0071
 41e:	88 23       	and	r24, r24
 420:	89 f4       	brne	.+34     	; 0x444 <CheckButton+0x5e>
				{
					ppk_mode = DELAY_OUT;					// Активируем режим "ЗАДЕРЖКА НА ВЫХОД"
 422:	80 e1       	ldi	r24, 0x10	; 16
 424:	80 93 71 00 	sts	0x0071, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 428:	f8 94       	cli
					ATOMIC_BLOCK(ATOMIC_FORCEON)
					{
						eeprom_update_byte(&ppk_mode_save, DELAY_OUT);// В EEPROM пишем состояние "ПОД ОХРАНОЙ", чтобы при перезагрузке ППК во время задержки на выход получить охраняемый объект
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	60 e1       	ldi	r22, 0x10	; 16
 430:	3e d4       	rcall	.+2172   	; 0xcae <__eeupd_byte_m8>
						exit_delay = OUT_DELAY;			// Назначим задержку на выход, внутри запрета прерываний, для атомарности
 432:	80 e1       	ldi	r24, 0x10	; 16
 434:	97 e2       	ldi	r25, 0x27	; 39
 436:	90 93 6a 00 	sts	0x006A, r25
 43a:	80 93 69 00 	sts	0x0069, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 43e:	78 94       	sei
					}
				#if defined (DEBUG)
					LED_PORT &= ~(1<<LED_WORK);				// ТОЛЬКО ДЛЯ ОТЛАДКИ
 440:	c3 98       	cbi	0x18, 3	; 24
 442:	16 c0       	rjmp	.+44     	; 0x470 <__stack+0x11>
				#endif
				}

				else										// Иначе текущий режим "ПОД ОХРАНОЙ" либо "ТРЕВОГА"
				{			
					ppk_mode = GUARD_OFF;					// Активируем переход в режим "СНЯТО С ОХРАНЫ"						
 444:	10 92 71 00 	sts	0x0071, r1
					GICR = 0<<INT1|0<<INT0;					// Запретим прерывания INT1 и INT0
 448:	1b be       	out	0x3b, r1	; 59
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 44a:	f8 94       	cli
					ATOMIC_BLOCK(ATOMIC_FORCEON)
					{
						eeprom_update_byte(&ppk_mode_save, GUARD_OFF);// Обновим состояние ППК в EEPROM
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	2d d4       	rcall	.+2138   	; 0xcae <__eeupd_byte_m8>
						siren_delay = 0;					// Убираем время звучания сирены, сама сирена выключиться в главном цикле
 454:	10 92 6e 00 	sts	0x006E, r1
 458:	10 92 6d 00 	sts	0x006D, r1
						out_delay = 0;						// Убираем время активности выходов, сами выходы выключаться в главном цикле						
 45c:	10 92 70 00 	sts	0x0070, r1
 460:	10 92 6f 00 	sts	0x006F, r1
						led_delay = 0;						// Прекращаем мигать светодиодом LED_WORK (ОХРАНА), если он мигал. Это проще чем допольнительная проверка						
 464:	10 92 6c 00 	sts	0x006C, r1
 468:	10 92 6b 00 	sts	0x006B, r1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 46c:	78 94       	sei
					}					
					#if defined (DEBUG)
						LED_PORT |= 1<<LED_WORK;			// ТОЛЬКО ДЛЯ ОТЛАДКИ
 46e:	c3 9a       	sbi	0x18, 3	; 24
					#else					
						LED_PORT &= ~(1<<LED_WORK);			// Гасим светодиод ОХРАНА
					#endif
				}		

				debounce_delay = 1000;						// Запрещаем реакцию на нажатие кнопки постановки/снятия на 1 сек, для исключения влияния дребезга
 470:	88 ee       	ldi	r24, 0xE8	; 232
 472:	93 e0       	ldi	r25, 0x03	; 3
 474:	90 93 66 00 	sts	0x0066, r25
 478:	80 93 65 00 	sts	0x0065, r24
			}

			check_button_counter = button_counter_delay;	// Обновляем счетчик опроса кнопки постановки/снятия
 47c:	d0 93 a0 00 	sts	0x00A0, r29
 480:	c0 93 9f 00 	sts	0x009F, r28
		}
	}
}
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <ActivateParsing>:
// Активации парсинга строки. Сам парсинг происходит в обработчике USART_RXC_vect. Контроль времени парсинга в обработчике TIMER1_COMPA_vect
void ActivateParsing(const char *string, unsigned int _parsing_delay)// На входе указатель на 1 символ строки, и время парсинга строки в мс
{
	unsigned char temp;

	parsing_result = IN_PROCESS;							// Начинаем парсинг с обнуления признака успешного парсинга/ошибки парсинга	
 48a:	10 92 60 00 	sts	0x0060, r1
	parsing_pointer = string;								// Копируем указатель на 1 сивол строки, которую будем парсить в глобальную переменную 
 48e:	90 93 a2 00 	sts	0x00A2, r25
 492:	80 93 a1 00 	sts	0x00A1, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 496:	f8 94       	cli
	ATOMIC_BLOCK(ATOMIC_FORCEON){parsing_delay = _parsing_delay;}// Задаем максимальное время парсинга строки. Сам парсинг может закончиться и раньше
 498:	70 93 68 00 	sts	0x0068, r23
 49c:	60 93 67 00 	sts	0x0067, r22
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 4a0:	78 94       	sei
	temp = UDR;												// Читаем приемник, чтобы сбросить флаг прерывания от всякого мусора, который там был до этого	
 4a2:	8c b1       	in	r24, 0x0c	; 12
	UCSRB |= 1<<RXCIE;										// Разрешаем прерывание по приходу байта - парсинг начался							
 4a4:	57 9a       	sbi	0x0a, 7	; 10
		}
	}
	if (parsing_result == 1) return OK;
	else return BAD;
*/
}
 4a6:	08 95       	ret

000004a8 <Wait_RING>:
	}
}
//=====================================================================================================================================================
// Активация парсинга признака входящего звонка - "RING", либо переключение на прием номера звонящего абонета в случае входящего звонка
void Wait_RING(unsigned int _led_delay, unsigned char next_programming_mode)// В качестве параметров передаються: следующее состояние автомата программирования номеров дозвона и период мигания светодиода LED_PROG
{
 4a8:	1f 93       	push	r17
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	ec 01       	movw	r28, r24
 4b0:	16 2f       	mov	r17, r22
	if (parsing_result == BAD)								// Если входящего звонка нет
 4b2:	80 91 60 00 	lds	r24, 0x0060
 4b6:	82 30       	cpi	r24, 0x02	; 2
 4b8:	29 f4       	brne	.+10     	; 0x4c4 <Wait_RING+0x1c>
	{
		ActivateParsing(RING,WAIT_INCOMING_CALL_TIME);		// Активируем ожидание 1-го звонка в течении 65 сек
 4ba:	8c e5       	ldi	r24, 0x5C	; 92
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	6f ef       	ldi	r22, 0xFF	; 255
 4c0:	7f ef       	ldi	r23, 0xFF	; 255
 4c2:	e3 df       	rcall	.-58     	; 0x48a <ActivateParsing>
	}
	if (parsing_result == OK)								// Если распознан входящий звонок
 4c4:	80 91 60 00 	lds	r24, 0x0060
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	31 f4       	brne	.+12     	; 0x4d8 <Wait_RING+0x30>
	{							
		ppk_mode = PROG;									// Включаем режим записи тел.номера
 4cc:	80 e4       	ldi	r24, 0x40	; 64
 4ce:	80 93 71 00 	sts	0x0071, r24
		UCSRB |= 1<<RXCIE;									// Разрешаем прерывание по приходу байта - запись номера началась
 4d2:	57 9a       	sbi	0x0a, 7	; 10
		programming_mode = next_programming_mode;			// Переводим автомат в состояние ожидания окончания записи очередного номера абонента в приемный буффер					
 4d4:	10 93 61 00 	sts	0x0061, r17
	}
	if (led_delay == 0)
 4d8:	80 91 6b 00 	lds	r24, 0x006B
 4dc:	90 91 6c 00 	lds	r25, 0x006C
 4e0:	00 97       	sbiw	r24, 0x00	; 0
 4e2:	51 f4       	brne	.+20     	; 0x4f8 <Wait_RING+0x50>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4e4:	f8 94       	cli
	{
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			led_delay = _led_delay;							// Мигаем светодиодом LED_PROG с нужной частотой
 4e6:	d0 93 6c 00 	sts	0x006C, r29
 4ea:	c0 93 6b 00 	sts	0x006B, r28
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 4ee:	78 94       	sei
		}
		LED_PORT ^= 1<<LED_PROG;					
 4f0:	88 b3       	in	r24, 0x18	; 24
 4f2:	90 e1       	ldi	r25, 0x10	; 16
 4f4:	89 27       	eor	r24, r25
 4f6:	88 bb       	out	0x18, r24	; 24
	}
}
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	08 95       	ret

00000500 <ReadNumbers>:
}
//=====================================================================================================================================================
// Чтение записанных телефонных номеров из EEPROM в ОЗУ
void ReadNumbers(void)
{
	eeprom_read_block(number1,ee_number1,14);				// Прочесть строку Number_1 из EEPROM, в строку Number1
 500:	83 e7       	ldi	r24, 0x73	; 115
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	4e e0       	ldi	r20, 0x0E	; 14
 50a:	50 e0       	ldi	r21, 0x00	; 0
 50c:	a9 d3       	rcall	.+1874   	; 0xc60 <__eerd_block_m8>
	eeprom_read_block(number2,ee_number2,14);				// Прочесть строку Number_2 из EEPROM, в строку Number2
 50e:	81 e8       	ldi	r24, 0x81	; 129
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	6f e0       	ldi	r22, 0x0F	; 15
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	4e e0       	ldi	r20, 0x0E	; 14
 518:	50 e0       	ldi	r21, 0x00	; 0
 51a:	a2 d3       	rcall	.+1860   	; 0xc60 <__eerd_block_m8>
	eeprom_read_block(number3,ee_number3,14);				// Прочесть строку Number_3 из EEPROM, в строку Number3
 51c:	8f e8       	ldi	r24, 0x8F	; 143
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	6d e1       	ldi	r22, 0x1D	; 29
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	4e e0       	ldi	r20, 0x0E	; 14
 526:	50 e0       	ldi	r21, 0x00	; 0
 528:	9b d3       	rcall	.+1846   	; 0xc60 <__eerd_block_m8>
}
 52a:	08 95       	ret

0000052c <SendByte>:
}
//=====================================================================================================================================================
// Отправка одного символа строки в UART
void SendByte(char byte)									// На входе байт
{
	while(!(UCSRA & (1<<UDRE)));							// Ждем флага готовности UART
 52c:	5d 9b       	sbis	0x0b, 5	; 11
 52e:	fe cf       	rjmp	.-4      	; 0x52c <SendByte>
	UDR=byte;												// Засылаем байт в UART
 530:	8c b9       	out	0x0c, r24	; 12
}
 532:	08 95       	ret

00000534 <SendStr>:
	}
}
//=====================================================================================================================================================
// Отправка строки из ОЗУ в UART
void SendStr(char *string)									// На входе указатель на символ строки
{
 534:	ef 92       	push	r14
 536:	ff 92       	push	r15
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	e8 2e       	mov	r14, r24
 53e:	e7 01       	movw	r28, r14
 540:	7e 01       	movw	r14, r28
 542:	f9 2e       	mov	r15, r25
 544:	e7 01       	movw	r28, r14
	while (*string != '\0')									// Пока байт строки не 0 (конец строки)
 546:	01 c0       	rjmp	.+2      	; 0x54a <SendStr+0x16>
	{
		SendByte(*string++);								// Мы продолжаем слать строку, не забывая увеличивать указатель, выбирая следующий символ строки
 548:	f1 df       	rcall	.-30     	; 0x52c <SendByte>
}
//=====================================================================================================================================================
// Отправка строки из ОЗУ в UART
void SendStr(char *string)									// На входе указатель на символ строки
{
	while (*string != '\0')									// Пока байт строки не 0 (конец строки)
 54a:	89 91       	ld	r24, Y+
 54c:	88 23       	and	r24, r24
 54e:	e1 f7       	brne	.-8      	; 0x548 <SendStr+0x14>
	{
		SendByte(*string++);								// Мы продолжаем слать строку, не забывая увеличивать указатель, выбирая следующий символ строки
//		string ++;											// Не забывая увеличивать указатель, выбирая следующий символ строки
	}
}
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	ff 90       	pop	r15
 556:	ef 90       	pop	r14
 558:	08 95       	ret

0000055a <SendStr_P>:
	eeprom_read_block(number3,ee_number3,14);				// Прочесть строку Number_3 из EEPROM, в строку Number3
}
//=====================================================================================================================================================
// Отправка строки из флеша в UART
void SendStr_P(const char *string)							// На входе указатель на символ строки
{
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	ec 01       	movw	r28, r24
	while (pgm_read_byte(string) != '\0')					// Пока байт строки не 0 (конец строки)
 560:	04 c0       	rjmp	.+8      	; 0x56a <SendStr_P+0x10>
	{
		SendByte(pgm_read_byte(string++));					// Мы продолжаем слать строку, не забывая увеличивать указатель, выбирая следующий символ строки
 562:	21 96       	adiw	r28, 0x01	; 1
 564:	fc 01       	movw	r30, r24
 566:	84 91       	lpm	r24, Z+
 568:	e1 df       	rcall	.-62     	; 0x52c <SendByte>
 56a:	ce 01       	movw	r24, r28
}
//=====================================================================================================================================================
// Отправка строки из флеша в UART
void SendStr_P(const char *string)							// На входе указатель на символ строки
{
	while (pgm_read_byte(string) != '\0')					// Пока байт строки не 0 (конец строки)
 56c:	fe 01       	movw	r30, r28
 56e:	24 91       	lpm	r18, Z+
 570:	22 23       	and	r18, r18
 572:	b9 f7       	brne	.-18     	; 0x562 <SendStr_P+0x8>
	{
		SendByte(pgm_read_byte(string++));					// Мы продолжаем слать строку, не забывая увеличивать указатель, выбирая следующий символ строки
//		string ++;											// Не забывая увеличивать указатель, выбирая следующий символ строки
	}
}
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	08 95       	ret

0000057a <SaveNumber_2_RAM>:
	}
}
//=====================================================================================================================================================
// Сохранение номера звонящего абонента в ОЗУ
void SaveNumber_2_RAM(char *number, unsigned char next_programming_mode)// В качестве параметров передаються: указатель на 1 символ номера абонента и следующее состояние автомата программирования номеров дозвона
{
 57a:	df 93       	push	r29
 57c:	cf 93       	push	r28
 57e:	0f 92       	push	r0
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
	if (buffer_index == buffer_max-1)						// Если приемный буффер полный - приняли весь телефонный номер звонящего
 584:	20 91 64 00 	lds	r18, 0x0064
 588:	2d 30       	cpi	r18, 0x0D	; 13
 58a:	31 f5       	brne	.+76     	; 0x5d8 <SaveNumber_2_RAM+0x5e>
	{
		for	(buffer_index = 0; buffer_index != buffer_max-1; buffer_index ++)// Копирем номер звонящего из приемного буффера в строку numberX
 58c:	10 92 64 00 	sts	0x0064, r1
 590:	11 c0       	rjmp	.+34     	; 0x5b4 <SaveNumber_2_RAM+0x3a>
		{
			number[buffer_index] = buffer[buffer_index];
 592:	30 91 64 00 	lds	r19, 0x0064
 596:	e0 91 64 00 	lds	r30, 0x0064
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	ed 55       	subi	r30, 0x5D	; 93
 59e:	ff 4f       	sbci	r31, 0xFF	; 255
 5a0:	20 81       	ld	r18, Z
 5a2:	fc 01       	movw	r30, r24
 5a4:	e3 0f       	add	r30, r19
 5a6:	f1 1d       	adc	r31, r1
 5a8:	20 83       	st	Z, r18
// Сохранение номера звонящего абонента в ОЗУ
void SaveNumber_2_RAM(char *number, unsigned char next_programming_mode)// В качестве параметров передаються: указатель на 1 символ номера абонента и следующее состояние автомата программирования номеров дозвона
{
	if (buffer_index == buffer_max-1)						// Если приемный буффер полный - приняли весь телефонный номер звонящего
	{
		for	(buffer_index = 0; buffer_index != buffer_max-1; buffer_index ++)// Копирем номер звонящего из приемного буффера в строку numberX
 5aa:	20 91 64 00 	lds	r18, 0x0064
 5ae:	2f 5f       	subi	r18, 0xFF	; 255
 5b0:	20 93 64 00 	sts	0x0064, r18
 5b4:	20 91 64 00 	lds	r18, 0x0064
 5b8:	2d 30       	cpi	r18, 0x0D	; 13
 5ba:	59 f7       	brne	.-42     	; 0x592 <SaveNumber_2_RAM+0x18>
		{
			number[buffer_index] = buffer[buffer_index];
		}
		SendStr_P(ATH);										// Отклоняем входящий вызов
 5bc:	82 ee       	ldi	r24, 0xE2	; 226
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	69 83       	std	Y+1, r22	; 0x01
 5c2:	cb df       	rcall	.-106    	; 0x55a <SendStr_P>
		buffer_index = 0;									// Обнуляем указатель массива, чтобы писАть в буффер сначала
 5c4:	10 92 64 00 	sts	0x0064, r1
		ppk_mode = GUARD_OFF;								// Включаем режим парсинга команд
 5c8:	10 92 71 00 	sts	0x0071, r1
		parsing_result = BAD;								// Активируем ожидание следующего звонка в следующем шаге конечного автомата
 5cc:	82 e0       	ldi	r24, 0x02	; 2
 5ce:	80 93 60 00 	sts	0x0060, r24
		programming_mode = next_programming_mode;			// Переводим автомат в состоние ожидания следующего звонка 
 5d2:	69 81       	ldd	r22, Y+1	; 0x01
 5d4:	60 93 61 00 	sts	0x0061, r22
	}
}
 5d8:	0f 90       	pop	r0
 5da:	cf 91       	pop	r28
 5dc:	df 91       	pop	r29
 5de:	08 95       	ret

000005e0 <Switch_Programming_mode>:
	}														// Ждем возвращения Джампера программирования в положение "РАБ"		
}
//=====================================================================================================================================================
// Конечный автомат записи номеров дозвона. В зависимости от значения programming_mode, ожидает входящего звонка, либо записывает номер звонящего в ОЗУ
void Switch_Programming_mode(void)													
{
 5e0:	1f 93       	push	r17
	parsing_result = BAD;
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	80 93 60 00 	sts	0x0060, r24
			case 6:
			{			
				SaveNumber_2_RAM(number3, 7);				// Сохраняем номер 3-го абонента в ОЗУ, если он принят
				break;
			}
			default: programming_mode = 1; break;
 5e8:	11 e0       	ldi	r17, 0x01	; 1
// Конечный автомат записи номеров дозвона. В зависимости от значения programming_mode, ожидает входящего звонка, либо записывает номер звонящего в ОЗУ
void Switch_Programming_mode(void)													
{
	parsing_result = BAD;

	while (programming_mode != 7)							// Пока не запишем 3 звонящих номера
 5ea:	37 c0       	rjmp	.+110    	; 0x65a <Switch_Programming_mode+0x7a>
	{
		wdt_reset();		
 5ec:	a8 95       	wdr
		switch (programming_mode)							// Гоняем конечный автомат записи номеров дозвона
 5ee:	83 30       	cpi	r24, 0x03	; 3
 5f0:	b1 f0       	breq	.+44     	; 0x61e <Switch_Programming_mode+0x3e>
 5f2:	84 30       	cpi	r24, 0x04	; 4
 5f4:	28 f4       	brcc	.+10     	; 0x600 <Switch_Programming_mode+0x20>
 5f6:	81 30       	cpi	r24, 0x01	; 1
 5f8:	51 f0       	breq	.+20     	; 0x60e <Switch_Programming_mode+0x2e>
 5fa:	82 30       	cpi	r24, 0x02	; 2
 5fc:	61 f5       	brne	.+88     	; 0x656 <Switch_Programming_mode+0x76>
 5fe:	0b c0       	rjmp	.+22     	; 0x616 <Switch_Programming_mode+0x36>
 600:	85 30       	cpi	r24, 0x05	; 5
 602:	f9 f0       	breq	.+62     	; 0x642 <Switch_Programming_mode+0x62>
 604:	85 30       	cpi	r24, 0x05	; 5
 606:	78 f0       	brcs	.+30     	; 0x626 <Switch_Programming_mode+0x46>
 608:	86 30       	cpi	r24, 0x06	; 6
 60a:	29 f5       	brne	.+74     	; 0x656 <Switch_Programming_mode+0x76>
 60c:	1f c0       	rjmp	.+62     	; 0x64c <Switch_Programming_mode+0x6c>
		{
			case 1:
			{
				Wait_RING(1000, 2);							// Мигаем светодиодом LED_PROG с частотой 1 раз в 2 секунды
 60e:	88 ee       	ldi	r24, 0xE8	; 232
 610:	93 e0       	ldi	r25, 0x03	; 3
 612:	62 e0       	ldi	r22, 0x02	; 2
 614:	19 c0       	rjmp	.+50     	; 0x648 <Switch_Programming_mode+0x68>
				break;
			}
			case 2:
			{			
				SaveNumber_2_RAM(number1, 3);				// Сохраняем номер 1-го абонента в ОЗУ, если он принят
 616:	83 e7       	ldi	r24, 0x73	; 115
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	63 e0       	ldi	r22, 0x03	; 3
 61c:	07 c0       	rjmp	.+14     	; 0x62c <Switch_Programming_mode+0x4c>
				_delay_ms(1500);
				break;
			}
			case 3:
			{
				Wait_RING(500, 4);							// Мигаем светодиодом LED_PROG с частотой 1 раз в секунду
 61e:	84 ef       	ldi	r24, 0xF4	; 244
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	64 e0       	ldi	r22, 0x04	; 4
 624:	11 c0       	rjmp	.+34     	; 0x648 <Switch_Programming_mode+0x68>
				break;
			}
			case 4:
			{
				SaveNumber_2_RAM(number2, 5);				// Сохраняем номер 2-го абонента в ОЗУ, если он принят
 626:	81 e8       	ldi	r24, 0x81	; 129
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	65 e0       	ldi	r22, 0x05	; 5
 62c:	a6 df       	rcall	.-180    	; 0x57a <SaveNumber_2_RAM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	9e e9       	ldi	r25, 0x9E	; 158
 632:	a4 e2       	ldi	r26, 0x24	; 36
 634:	81 50       	subi	r24, 0x01	; 1
 636:	90 40       	sbci	r25, 0x00	; 0
 638:	a0 40       	sbci	r26, 0x00	; 0
 63a:	e1 f7       	brne	.-8      	; 0x634 <Switch_Programming_mode+0x54>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <Switch_Programming_mode+0x5e>
 63e:	00 00       	nop
 640:	0c c0       	rjmp	.+24     	; 0x65a <Switch_Programming_mode+0x7a>
				_delay_ms(1500);
				break;
			}
			case 5:
			{			
				Wait_RING(250, 6);							// Мигаем светодиодом LED_PROG с частотой 2 раза в секунду
 642:	8a ef       	ldi	r24, 0xFA	; 250
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	66 e0       	ldi	r22, 0x06	; 6
 648:	2f df       	rcall	.-418    	; 0x4a8 <Wait_RING>
				break;
 64a:	07 c0       	rjmp	.+14     	; 0x65a <Switch_Programming_mode+0x7a>
			}
			case 6:
			{			
				SaveNumber_2_RAM(number3, 7);				// Сохраняем номер 3-го абонента в ОЗУ, если он принят
 64c:	8f e8       	ldi	r24, 0x8F	; 143
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	67 e0       	ldi	r22, 0x07	; 7
 652:	93 df       	rcall	.-218    	; 0x57a <SaveNumber_2_RAM>
				break;
 654:	02 c0       	rjmp	.+4      	; 0x65a <Switch_Programming_mode+0x7a>
			}
			default: programming_mode = 1; break;
 656:	10 93 61 00 	sts	0x0061, r17
// Конечный автомат записи номеров дозвона. В зависимости от значения programming_mode, ожидает входящего звонка, либо записывает номер звонящего в ОЗУ
void Switch_Programming_mode(void)													
{
	parsing_result = BAD;

	while (programming_mode != 7)							// Пока не запишем 3 звонящих номера
 65a:	80 91 61 00 	lds	r24, 0x0061
 65e:	87 30       	cpi	r24, 0x07	; 7
 660:	29 f6       	brne	.-118    	; 0x5ec <Switch_Programming_mode+0xc>
				break;
			}
			default: programming_mode = 1; break;
		}
	}
}
 662:	1f 91       	pop	r17
 664:	08 95       	ret

00000666 <SwitchSIMCOM_mode>:
//=====================================================================================================================================================
// Конечный автомат выбора отправляемой АТ-команды. В зависимости от значения simcom_mode, посылает определенную AT-команду
void SwitchSIMCOM_mode(void)														
{
															// Если надо отправить SMS, изменяем выбраное ранее состояние автомата
	if ((flags & (1<<sms_flag))&&(simcom_init_mode == 1))	// Если установлен признак необходимости отправки SMS и модуль SIMCOM прошел полную инициализацию
 666:	80 91 72 00 	lds	r24, 0x0072
 66a:	80 ff       	sbrs	r24, 0
 66c:	0e c0       	rjmp	.+28     	; 0x68a <SwitchSIMCOM_mode+0x24>
 66e:	80 91 9d 00 	lds	r24, 0x009D
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	51 f4       	brne	.+20     	; 0x68a <SwitchSIMCOM_mode+0x24>
	{
		simcom_mode = 10;									// Переключим автомат отправки АТ-команд в режим отправки SMS
 676:	8a e0       	ldi	r24, 0x0A	; 10
 678:	80 93 62 00 	sts	0x0062, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 67c:	f8 94       	cli
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			flags &= ~(1<<sms_flag);						//  Сразу запретим повторное переключение автомата в режим отправки SMS
 67e:	80 91 72 00 	lds	r24, 0x0072
 682:	8e 7f       	andi	r24, 0xFE	; 254
 684:	80 93 72 00 	sts	0x0072, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 688:	78 94       	sei
		}
	}

	switch (simcom_mode)									// Состояние автомата определяеться ответами (верный/неверный) модуля SIMCOM
 68a:	80 91 62 00 	lds	r24, 0x0062
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	01 97       	sbiw	r24, 0x01	; 1
 692:	8b 30       	cpi	r24, 0x0B	; 11
 694:	91 05       	cpc	r25, r1
 696:	08 f0       	brcs	.+2      	; 0x69a <SwitchSIMCOM_mode+0x34>
 698:	58 c0       	rjmp	.+176    	; 0x74a <SwitchSIMCOM_mode+0xe4>
 69a:	8d 5e       	subi	r24, 0xED	; 237
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	8f 93       	push	r24
 6a0:	9f 93       	push	r25
 6a2:	08 95       	ret
	{
		case 1:
		{
			SIMCOM_RESET_PORT &= ~(1<<SIMCOM_RESET_PIN);	// Садим SIMCOM_RESET на землю
 6a4:	94 98       	cbi	0x12, 4	; 18
 6a6:	8f e7       	ldi	r24, 0x7F	; 127
 6a8:	9f ea       	ldi	r25, 0xAF	; 175
 6aa:	a2 e0       	ldi	r26, 0x02	; 2
 6ac:	81 50       	subi	r24, 0x01	; 1
 6ae:	90 40       	sbci	r25, 0x00	; 0
 6b0:	a0 40       	sbci	r26, 0x00	; 0
 6b2:	e1 f7       	brne	.-8      	; 0x6ac <SwitchSIMCOM_mode+0x46>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <SwitchSIMCOM_mode+0x50>
 6b6:	00 00       	nop
			_delay_ms(SIM800L_RESET_TIME);					// Задержка на Reset модуля SIMCOM
			SIMCOM_RESET_PORT |= 1<<SIMCOM_RESET_PIN;		// Отпускаем SIMCOM_RESET
 6b8:	94 9a       	sbi	0x12, 4	; 18
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 6ba:	f8 94       	cli
			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				parsing_delay = WAIT_SIMCOM_READY;			// Воспользуемся таймером парсинга, все равно до перезапуска модяля по UART не используеться
 6bc:	88 e2       	ldi	r24, 0x28	; 40
 6be:	93 e2       	ldi	r25, 0x23	; 35
 6c0:	90 93 68 00 	sts	0x0068, r25
 6c4:	80 93 67 00 	sts	0x0067, r24
				simcom_mode = 2;
 6c8:	82 e0       	ldi	r24, 0x02	; 2
 6ca:	80 93 62 00 	sts	0x0062, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 6ce:	78 94       	sei
			}			
			break;
 6d0:	08 95       	ret
		}
		case 2:
		{
			SendStr_P(AT);									// Шлем АТ
 6d2:	8e e6       	ldi	r24, 0x6E	; 110
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	41 df       	rcall	.-382    	; 0x55a <SendStr_P>
			ActivateParsing(AT_OK,AT_WAIT_TIME);			// Активируем парсинг ответа в обработчике USART_RX_vect
 6d8:	83 e0       	ldi	r24, 0x03	; 3
 6da:	91 e0       	ldi	r25, 0x01	; 1
 6dc:	32 c0       	rjmp	.+100    	; 0x742 <SwitchSIMCOM_mode+0xdc>
			break;
		}
		case 3:
		{			
			SendStr_P(ATE0);								// Отключаем эхо
 6de:	82 e7       	ldi	r24, 0x72	; 114
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	3b df       	rcall	.-394    	; 0x55a <SendStr_P>
			ActivateParsing(ATE0_OK,AT_WAIT_TIME);			// Активируем парсинг ответа в обработчике USART_RX_vect
 6e4:	8d e0       	ldi	r24, 0x0D	; 13
 6e6:	91 e0       	ldi	r25, 0x01	; 1
 6e8:	2c c0       	rjmp	.+88     	; 0x742 <SwitchSIMCOM_mode+0xdc>
			break;
		}
		case 4:
		{			
			SendStr_P(AT_IPR);								// Задаем скорость обмена с модулем
 6ea:	88 e7       	ldi	r24, 0x78	; 120
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	26 c0       	rjmp	.+76     	; 0x73c <SwitchSIMCOM_mode+0xd6>
			ActivateParsing(_OK,AT_WAIT_TIME);				// Активируем парсинг ответа в обработчике USART_RX_vect
			break;
		}
		case 5:
		{			
			SendStr_P(AT_GSMBUSY_1);						// Запрет всех входящих звонков
 6f0:	87 ee       	ldi	r24, 0xE7	; 231
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	23 c0       	rjmp	.+70     	; 0x73c <SwitchSIMCOM_mode+0xd6>
			ActivateParsing(_OK,AT_WAIT_TIME);				// Активируем парсинг ответа в обработчике USART_RX_vect
			break;
		}
		case 6:
		{			
			SendStr_P(AT_CMGF);								// Задаем текстовый формат SMS
 6f6:	80 e9       	ldi	r24, 0x90	; 144
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	20 c0       	rjmp	.+64     	; 0x73c <SwitchSIMCOM_mode+0xd6>
			ActivateParsing(_OK,AT_WAIT_TIME);				// Активируем парсинг ответа в обработчике USART_RX_vect
			break;
		}
		case 7:
		{			
			SendStr_P(AT_CPAS);								// Делаем запрос на состояние модуля SIMCOM
 6fc:	86 ea       	ldi	r24, 0xA6	; 166
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	2c df       	rcall	.-424    	; 0x55a <SendStr_P>
			ActivateParsing(CPAS_OK,AT_WAIT_TIME);			// Активируем парсинг ответа в обработчике USART_RX_vect
 702:	80 e2       	ldi	r24, 0x20	; 32
 704:	91 e0       	ldi	r25, 0x01	; 1
 706:	1d c0       	rjmp	.+58     	; 0x742 <SwitchSIMCOM_mode+0xdc>
			break;
		}
		case 8:
		{			
			SendStr_P(AT_CREG);								// Делаем запрос на состояние регистрации в сети
 708:	8f ea       	ldi	r24, 0xAF	; 175
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	26 df       	rcall	.-436    	; 0x55a <SendStr_P>
			ActivateParsing(CREG_OK,AT_WAIT_TIME);			// Активируем парсинг ответа в обработчике USART_RX_vect
 70e:	83 e3       	ldi	r24, 0x33	; 51
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	17 c0       	rjmp	.+46     	; 0x742 <SwitchSIMCOM_mode+0xdc>
			break;
		}
		case 9:
		{			
			SendStr_P(AT_CCALR);							// Делаем запрос на возможность совершать звонки
 714:	89 eb       	ldi	r24, 0xB9	; 185
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	20 df       	rcall	.-448    	; 0x55a <SendStr_P>
			ActivateParsing(CCALR_OK,AT_WAIT_TIME);			// Активируем парсинг ответа в обработчике USART_RX_vect
 71a:	88 e4       	ldi	r24, 0x48	; 72
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	11 c0       	rjmp	.+34     	; 0x742 <SwitchSIMCOM_mode+0xdc>
			break;	
		}
		case 10:
		{			
			SendStr_P(AT_CMGS);								// Делаем запрос на отправку SMS о пропаже сети 220В						
 720:	8b ec       	ldi	r24, 0xCB	; 203
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	1a df       	rcall	.-460    	; 0x55a <SendStr_P>
			SendStr(Abonent_SMS);
 726:	83 e7       	ldi	r24, 0x73	; 115
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	04 df       	rcall	.-504    	; 0x534 <SendStr>
			SendStr_P(AT_CMGS_2);
 72c:	85 ed       	ldi	r24, 0xD5	; 213
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	14 df       	rcall	.-472    	; 0x55a <SendStr_P>
			ActivateParsing(POINTER,AT_WAIT_TIME);			// Активируем парсинг курсора приглашения для отправки тела SMS
 732:	8f e6       	ldi	r24, 0x6F	; 111
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	05 c0       	rjmp	.+10     	; 0x742 <SwitchSIMCOM_mode+0xdc>
			break;
		}
		case 11:
		{			
			SendStr_P(NO_220);								// Отправляем тело SMS о пропаже сети 220В
 738:	88 ed       	ldi	r24, 0xD8	; 216
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e df       	rcall	.-484    	; 0x55a <SendStr_P>
			ActivateParsing(_OK,AT_WAIT_TIME);				// Активируем парсинг отчета о успешной отправке SMS в обработчике USART_RX_vect
 73e:	89 e1       	ldi	r24, 0x19	; 25
 740:	91 e0       	ldi	r25, 0x01	; 1
 742:	68 eb       	ldi	r22, 0xB8	; 184
 744:	7b e0       	ldi	r23, 0x0B	; 11
 746:	a1 de       	rcall	.-702    	; 0x48a <ActivateParsing>
			break;
 748:	08 95       	ret
		}
		default: simcom_mode = 1;
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	80 93 62 00 	sts	0x0062, r24
 750:	08 95       	ret

00000752 <CheckSIMCOM>:
}
//=====================================================================================================================================================
// Функция опроса SIMCOM. Содержит модуль анализа ответов. При неправильном ответе на 5 запросов подряд - перезапустит модуль SIMCOM и произведет его полную переинициализацию
void CheckSIMCOM(void)									
{
	wdt_reset();
 752:	a8 95       	wdr
								
	if ((parsing_result == OK)&&(parsing_delay == 65535))	// Если предыдущий парсинг закончился успешно, и истекло время парсинга (можно слать следующую АТ-команду)
 754:	20 91 60 00 	lds	r18, 0x0060
 758:	21 30       	cpi	r18, 0x01	; 1
 75a:	99 f5       	brne	.+102    	; 0x7c2 <CheckSIMCOM+0x70>
 75c:	80 91 67 00 	lds	r24, 0x0067
 760:	90 91 68 00 	lds	r25, 0x0068
 764:	3f ef       	ldi	r19, 0xFF	; 255
 766:	8f 3f       	cpi	r24, 0xFF	; 255
 768:	93 07       	cpc	r25, r19
 76a:	59 f5       	brne	.+86     	; 0x7c2 <CheckSIMCOM+0x70>
	{
		parsing_fault = NUM_OF_ATTEMPT;						// Обновим счетчик ошибок парсинга
 76c:	85 e0       	ldi	r24, 0x05	; 5
 76e:	80 93 63 00 	sts	0x0063, r24
		switch (simcom_mode)								// Переключим состояние автомата SwitchSIMCOM_mode для отправки следующей команды
 772:	80 91 62 00 	lds	r24, 0x0062
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	01 97       	sbiw	r24, 0x01	; 1
 77a:	8b 30       	cpi	r24, 0x0B	; 11
 77c:	91 05       	cpc	r25, r1
 77e:	f0 f4       	brcc	.+60     	; 0x7bc <CheckSIMCOM+0x6a>
 780:	82 5e       	subi	r24, 0xE2	; 226
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	8f 93       	push	r24
 786:	9f 93       	push	r25
 788:	08 95       	ret
		{
			case 1: break;
			case 2: simcom_mode = 3; break;					// Модуль SIMCOM перезапущен, начинаем отправку и парсинг Ат-команд
 78a:	83 e0       	ldi	r24, 0x03	; 3
 78c:	01 c0       	rjmp	.+2      	; 0x790 <CheckSIMCOM+0x3e>
			case 3: simcom_mode = 4; break;
 78e:	84 e0       	ldi	r24, 0x04	; 4
 790:	80 93 62 00 	sts	0x0062, r24
 794:	15 c0       	rjmp	.+42     	; 0x7c0 <CheckSIMCOM+0x6e>
			case 4: simcom_mode = 5; break;
 796:	85 e0       	ldi	r24, 0x05	; 5
 798:	fb cf       	rjmp	.-10     	; 0x790 <CheckSIMCOM+0x3e>
			case 5: simcom_mode = 6; break;
 79a:	86 e0       	ldi	r24, 0x06	; 6
 79c:	f9 cf       	rjmp	.-14     	; 0x790 <CheckSIMCOM+0x3e>
			case 6: simcom_mode = 7; break;
			case 7: simcom_mode = 8; break;
 79e:	88 e0       	ldi	r24, 0x08	; 8
 7a0:	f7 cf       	rjmp	.-18     	; 0x790 <CheckSIMCOM+0x3e>
			case 8: simcom_mode = 9; break;
 7a2:	89 e0       	ldi	r24, 0x09	; 9
 7a4:	f5 cf       	rjmp	.-22     	; 0x790 <CheckSIMCOM+0x3e>
			case 9:
			{
				simcom_init_mode = 1;						// Модуль SIMCOM прошел полную инициализацию и может совершать звонки и слать SMS
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	80 93 9d 00 	sts	0x009D, r24
 7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <CheckSIMCOM+0x66>
				simcom_mode = 7;							// Опять проверяем состояние модуля (и так по кругу гоняем состояния 7-8-9)
				break;
			}
			case 10: simcom_mode = 11; break;
 7ae:	8b e0       	ldi	r24, 0x0B	; 11
 7b0:	ef cf       	rjmp	.-34     	; 0x790 <CheckSIMCOM+0x3e>
			case 11:
			{
				ACSR |= 1<<ACI|1<<ACIE;						// Разрешим прерывания от компаратора для повторной отправки SMS о пропаже 220В	
 7b2:	88 b1       	in	r24, 0x08	; 8
 7b4:	88 61       	ori	r24, 0x18	; 24
 7b6:	88 b9       	out	0x08, r24	; 8
				simcom_mode = 7;							// Перелючаем автомат отправки АТ-команд на отправку 1-й команды циклического опроса модуля (AT+CPAS)
 7b8:	87 e0       	ldi	r24, 0x07	; 7
 7ba:	ea cf       	rjmp	.-44     	; 0x790 <CheckSIMCOM+0x3e>
				break;
			}
			default: simcom_mode = 1;
 7bc:	20 93 62 00 	sts	0x0062, r18
		}
		SwitchSIMCOM_mode();								// Отправляем АТ-команду, конечный автомат сам выберет нужную		
 7c0:	52 df       	rcall	.-348    	; 0x666 <SwitchSIMCOM_mode>
	}

	if ((parsing_result == BAD)&&(parsing_delay == 65535))	// Если парсинг закончился неуспешно, и истекло время парсинга
 7c2:	80 91 60 00 	lds	r24, 0x0060
 7c6:	82 30       	cpi	r24, 0x02	; 2
 7c8:	21 f5       	brne	.+72     	; 0x812 <CheckSIMCOM+0xc0>
 7ca:	80 91 67 00 	lds	r24, 0x0067
 7ce:	90 91 68 00 	lds	r25, 0x0068
 7d2:	2f ef       	ldi	r18, 0xFF	; 255
 7d4:	8f 3f       	cpi	r24, 0xFF	; 255
 7d6:	92 07       	cpc	r25, r18
 7d8:	e1 f4       	brne	.+56     	; 0x812 <CheckSIMCOM+0xc0>
	{
		if ((simcom_mode == 10)||(simcom_mode == 11))		// И мы не получили курсор приглашения ввода тела SMS, либо ОК после отправки тела SMS
 7da:	80 91 62 00 	lds	r24, 0x0062
 7de:	8a 50       	subi	r24, 0x0A	; 10
 7e0:	82 30       	cpi	r24, 0x02	; 2
 7e2:	38 f4       	brcc	.+14     	; 0x7f2 <CheckSIMCOM+0xa0>
		{
			ACSR |= 1<<ACI|1<<ACIE;							// Отправка SMS о пропаже 220В не удалась. Повтор делать не будем, но разрешаем прерывания компаратора, возможно будут еще пропажи сети 220В и их можно будет передать
 7e4:	88 b1       	in	r24, 0x08	; 8
 7e6:	88 61       	ori	r24, 0x18	; 24
 7e8:	88 b9       	out	0x08, r24	; 8
			simcom_mode = 7;								// Перелючаем автомат отправки АТ-команд на отправку 1-й команды циклического опроса модуля (AT+CPAS)
 7ea:	87 e0       	ldi	r24, 0x07	; 7
 7ec:	80 93 62 00 	sts	0x0062, r24
 7f0:	0f c0       	rjmp	.+30     	; 0x810 <CheckSIMCOM+0xbe>
		}

		else
		{			
			parsing_fault--;
 7f2:	80 91 63 00 	lds	r24, 0x0063
 7f6:	81 50       	subi	r24, 0x01	; 1
 7f8:	80 93 63 00 	sts	0x0063, r24
			if (parsing_fault == 0)							// Если исчерпали попытки парсинга
 7fc:	88 23       	and	r24, r24
 7fe:	41 f4       	brne	.+16     	; 0x810 <CheckSIMCOM+0xbe>
			{
				simcom_init_mode = 0;						// Сбрасываем состояние инициализации модуля SIMCOM
 800:	10 92 9d 00 	sts	0x009D, r1
				simcom_mode = 1;							// Переводим автомат в начальный режим - делаем переинициализацию модуля SIMCOM
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	80 93 62 00 	sts	0x0062, r24
				parsing_fault = NUM_OF_ATTEMPT;				// Обновим счетчик ошибок парсинга
 80a:	85 e0       	ldi	r24, 0x05	; 5
 80c:	80 93 63 00 	sts	0x0063, r24
			}
		}
		SwitchSIMCOM_mode();								// Повторно отправляем предыдущую АТ-команду без предварительного переключения состояния автомата
 810:	2a df       	rcall	.-428    	; 0x666 <SwitchSIMCOM_mode>
 812:	08 95       	ret

00000814 <Programming>:
//=====================================================================================================================================================
// Программирование прибора
void Programming(void)
{
#if defined (DEBUG)
	LED_PORT &= ~(1<<LED_PROG);								// ТОЛЬКО ДЛЯ ОТЛАДКИ
 814:	c4 98       	cbi	0x18, 4	; 24
#else
	LED_PORT |= 1<<LED_PROG;								// Включим светодиод программирования
#endif

	while (simcom_init_mode != 1)							// Пока модуль SIMCOM не пройдет полную инициализацию
 816:	01 c0       	rjmp	.+2      	; 0x81a <Programming+0x6>
	{
		CheckSIMCOM();										// Проверяем состояние модуля, регистрацию в сети, и прочее
 818:	9c df       	rcall	.-200    	; 0x752 <CheckSIMCOM>
	LED_PORT &= ~(1<<LED_PROG);								// ТОЛЬКО ДЛЯ ОТЛАДКИ
#else
	LED_PORT |= 1<<LED_PROG;								// Включим светодиод программирования
#endif

	while (simcom_init_mode != 1)							// Пока модуль SIMCOM не пройдет полную инициализацию
 81a:	80 91 9d 00 	lds	r24, 0x009D
 81e:	81 30       	cpi	r24, 0x01	; 1
 820:	d9 f7       	brne	.-10     	; 0x818 <Programming+0x4>
	{
		CheckSIMCOM();										// Проверяем состояние модуля, регистрацию в сети, и прочее
	}

	wdt_reset();
 822:	a8 95       	wdr
 824:	8f ef       	ldi	r24, 0xFF	; 255
 826:	9e e9       	ldi	r25, 0x9E	; 158
 828:	a4 e2       	ldi	r26, 0x24	; 36
 82a:	81 50       	subi	r24, 0x01	; 1
 82c:	90 40       	sbci	r25, 0x00	; 0
 82e:	a0 40       	sbci	r26, 0x00	; 0
 830:	e1 f7       	brne	.-8      	; 0x82a <Programming+0x16>
 832:	00 c0       	rjmp	.+0      	; 0x834 <Programming+0x20>
 834:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
 836:	a8 95       	wdr
	SendStr_P(AT_GSMBUSY_0);								// Разрешение всех входящих звонков
 838:	85 ef       	ldi	r24, 0xF5	; 245
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	8e de       	rcall	.-740    	; 0x55a <SendStr_P>
	wdt_reset();
 83e:	a8 95       	wdr
 840:	8f ef       	ldi	r24, 0xFF	; 255
 842:	9e e9       	ldi	r25, 0x9E	; 158
 844:	a4 e2       	ldi	r26, 0x24	; 36
 846:	81 50       	subi	r24, 0x01	; 1
 848:	90 40       	sbci	r25, 0x00	; 0
 84a:	a0 40       	sbci	r26, 0x00	; 0
 84c:	e1 f7       	brne	.-8      	; 0x846 <Programming+0x32>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <Programming+0x3c>
 850:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
 852:	a8 95       	wdr
	SendStr_P(AT_CLIP);										// Включаем АОН
 854:	8b e9       	ldi	r24, 0x9B	; 155
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	80 de       	rcall	.-768    	; 0x55a <SendStr_P>
	wdt_reset();
 85a:	a8 95       	wdr
 85c:	8f ef       	ldi	r24, 0xFF	; 255
 85e:	9e e9       	ldi	r25, 0x9E	; 158
 860:	a4 e2       	ldi	r26, 0x24	; 36
 862:	81 50       	subi	r24, 0x01	; 1
 864:	90 40       	sbci	r25, 0x00	; 0
 866:	a0 40       	sbci	r26, 0x00	; 0
 868:	e1 f7       	brne	.-8      	; 0x862 <Programming+0x4e>
 86a:	00 c0       	rjmp	.+0      	; 0x86c <Programming+0x58>
 86c:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
 86e:	a8 95       	wdr
	SendStr_P(AT_CLCC);										// Переключаем на сокращенный ответ при входящем звонке
 870:	85 e8       	ldi	r24, 0x85	; 133
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	72 de       	rcall	.-796    	; 0x55a <SendStr_P>
	wdt_reset();
 876:	a8 95       	wdr
 878:	8f ef       	ldi	r24, 0xFF	; 255
 87a:	9e e9       	ldi	r25, 0x9E	; 158
 87c:	a4 e2       	ldi	r26, 0x24	; 36
 87e:	81 50       	subi	r24, 0x01	; 1
 880:	90 40       	sbci	r25, 0x00	; 0
 882:	a0 40       	sbci	r26, 0x00	; 0
 884:	e1 f7       	brne	.-8      	; 0x87e <Programming+0x6a>
 886:	00 c0       	rjmp	.+0      	; 0x888 <Programming+0x74>
 888:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
 88a:	a8 95       	wdr
	
	Switch_Programming_mode();								// Вызываем конечный автомат режима программирования
 88c:	a9 de       	rcall	.-686    	; 0x5e0 <Switch_Programming_mode>
	
	wdt_reset();
 88e:	a8 95       	wdr
 890:	8f ef       	ldi	r24, 0xFF	; 255
 892:	9e e9       	ldi	r25, 0x9E	; 158
 894:	a4 e2       	ldi	r26, 0x24	; 36
 896:	81 50       	subi	r24, 0x01	; 1
 898:	90 40       	sbci	r25, 0x00	; 0
 89a:	a0 40       	sbci	r26, 0x00	; 0
 89c:	e1 f7       	brne	.-8      	; 0x896 <Programming+0x82>
 89e:	00 c0       	rjmp	.+0      	; 0x8a0 <Programming+0x8c>
 8a0:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
 8a2:	a8 95       	wdr
	SendStr_P(AT_GSMBUSY_1);								// Запрет всех входящих звонков
 8a4:	87 ee       	ldi	r24, 0xE7	; 231
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	58 de       	rcall	.-848    	; 0x55a <SendStr_P>
	wdt_reset();
 8aa:	a8 95       	wdr
 8ac:	8f ef       	ldi	r24, 0xFF	; 255
 8ae:	9e e9       	ldi	r25, 0x9E	; 158
 8b0:	a4 e2       	ldi	r26, 0x24	; 36
 8b2:	81 50       	subi	r24, 0x01	; 1
 8b4:	90 40       	sbci	r25, 0x00	; 0
 8b6:	a0 40       	sbci	r26, 0x00	; 0
 8b8:	e1 f7       	brne	.-8      	; 0x8b2 <Programming+0x9e>
 8ba:	00 c0       	rjmp	.+0      	; 0x8bc <Programming+0xa8>
 8bc:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
 8be:	a8 95       	wdr
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 8c0:	f8 94       	cli

	ATOMIC_BLOCK(ATOMIC_FORCEON)							// Если произошел выход из автомата, значит есть 3 номера в ОЗУ. Копируем их из ОЗУ в EEPROM
	{
		led_delay = 0;										// Прекратим мигание светодиода программирования (LED_PROG)		
 8c2:	10 92 6c 00 	sts	0x006C, r1
 8c6:	10 92 6b 00 	sts	0x006B, r1
	#if defined (DEBUG)
		LED_PORT &= ~(1<<LED_PROG);							// ТОЛЬКО ДЛЯ ОТЛАДКИ
 8ca:	c4 98       	cbi	0x18, 4	; 24
	#else
		LED_PORT |= 1<<LED_PROG;							// Зажигаем светодиод программирования			
	#endif
		eeprom_update_block(number1,ee_number1,14);			
 8cc:	83 e7       	ldi	r24, 0x73	; 115
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	61 e0       	ldi	r22, 0x01	; 1
 8d2:	70 e0       	ldi	r23, 0x00	; 0
 8d4:	4e e0       	ldi	r20, 0x0E	; 14
 8d6:	50 e0       	ldi	r21, 0x00	; 0
 8d8:	db d1       	rcall	.+950    	; 0xc90 <__eeupd_block_m8>
		eeprom_update_block(number2,ee_number2,14);
 8da:	81 e8       	ldi	r24, 0x81	; 129
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	6f e0       	ldi	r22, 0x0F	; 15
 8e0:	70 e0       	ldi	r23, 0x00	; 0
 8e2:	4e e0       	ldi	r20, 0x0E	; 14
 8e4:	50 e0       	ldi	r21, 0x00	; 0
 8e6:	d4 d1       	rcall	.+936    	; 0xc90 <__eeupd_block_m8>
		eeprom_update_block(number3,ee_number3,14);
 8e8:	8f e8       	ldi	r24, 0x8F	; 143
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	6d e1       	ldi	r22, 0x1D	; 29
 8ee:	70 e0       	ldi	r23, 0x00	; 0
 8f0:	4e e0       	ldi	r20, 0x0E	; 14
 8f2:	50 e0       	ldi	r21, 0x00	; 0
 8f4:	cd d1       	rcall	.+922    	; 0xc90 <__eeupd_block_m8>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 8f6:	78 94       	sei
	}
	#if defined (DEBUG)
		LED_PORT |= 1<<LED_PROG;							// ТОЛЬКО ДЛЯ ОТЛАДКИ
 8f8:	c4 9a       	sbi	0x18, 4	; 24
	#else
		LED_PORT &= ~(1<<LED_PROG);							// Гасим светодиод программирования
	#endif
	
	pin_state = JUMPER_PINS;								// Читаем состояние всего порта c Джампером программирования
 8fa:	80 b3       	in	r24, 0x10	; 16
 8fc:	80 93 9e 00 	sts	0x009E, r24
	while(!(pin_state & (1<<JUMPER_PIN)))
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	80 72       	andi	r24, 0x20	; 32
 904:	90 70       	andi	r25, 0x00	; 0
 906:	01 c0       	rjmp	.+2      	; 0x90a <Programming+0xf6>
	{
		wdt_reset();
 908:	a8 95       	wdr
	#else
		LED_PORT &= ~(1<<LED_PROG);							// Гасим светодиод программирования
	#endif
	
	pin_state = JUMPER_PINS;								// Читаем состояние всего порта c Джампером программирования
	while(!(pin_state & (1<<JUMPER_PIN)))
 90a:	00 97       	sbiw	r24, 0x00	; 0
 90c:	e9 f3       	breq	.-6      	; 0x908 <Programming+0xf4>
	{
		wdt_reset();
	}														// Ждем возвращения Джампера программирования в положение "РАБ"		
}
 90e:	08 95       	ret

00000910 <Ring_on_Number>:
	}
}
//=====================================================================================================================================================
// Дозвон конкретному абоненту
void Ring_on_Number(char *number)							// В качестве параметра передаеться указатель на 1 символ номера абонента
{
 910:	cf 93       	push	r28
 912:	df 93       	push	r29
 914:	ec 01       	movw	r28, r24
	SendStr_P(ATD);											// Звоним абоненту
 916:	84 ec       	ldi	r24, 0xC4	; 196
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	1f de       	rcall	.-962    	; 0x55a <SendStr_P>
	SendStr(number);
 91c:	ce 01       	movw	r24, r28
 91e:	0a de       	rcall	.-1004   	; 0x534 <SendStr>
	SendStr_P(RING_END);
 920:	88 ec       	ldi	r24, 0xC8	; 200
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	1a de       	rcall	.-972    	; 0x55a <SendStr_P>
	ActivateParsing(_OK,RING_WAIT_TIME);					// Активируем ожидание ответа
 926:	89 e1       	ldi	r24, 0x19	; 25
 928:	91 e0       	ldi	r25, 0x01	; 1
 92a:	60 e2       	ldi	r22, 0x20	; 32
 92c:	7e e4       	ldi	r23, 0x4E	; 78
 92e:	ad dd       	rcall	.-1190   	; 0x48a <ActivateParsing>
}
 930:	df 91       	pop	r29
 932:	cf 91       	pop	r28
 934:	08 95       	ret

00000936 <Blink_LED_WORK>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 936:	f8 94       	cli
// Мигание светодиодом LED_WORK
void Blink_LED_WORK(void)
{
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		led_delay = 500;
 938:	84 ef       	ldi	r24, 0xF4	; 244
 93a:	91 e0       	ldi	r25, 0x01	; 1
 93c:	90 93 6c 00 	sts	0x006C, r25
 940:	80 93 6b 00 	sts	0x006B, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 944:	78 94       	sei
	}
	LED_PORT ^= 1<<LED_WORK;
 946:	88 b3       	in	r24, 0x18	; 24
 948:	98 e0       	ldi	r25, 0x08	; 8
 94a:	89 27       	eor	r24, r25
 94c:	88 bb       	out	0x18, r24	; 24
}
 94e:	08 95       	ret

00000950 <Siren_Outs_OFF>:
//=====================================================================================================================================================
// Выключение сирены и выходов, если пришло время
void Siren_Outs_OFF(void) 
{
	if (siren_delay == 0)									// Если нет отсчета время звучания сирены
 950:	80 91 6d 00 	lds	r24, 0x006D
 954:	90 91 6e 00 	lds	r25, 0x006E
 958:	00 97       	sbiw	r24, 0x00	; 0
 95a:	09 f4       	brne	.+2      	; 0x95e <Siren_Outs_OFF+0xe>
	{
	#if defined (DEBUG)
		OUT_PORT |= 1<<SIREN;								// ТОЛЬКО ДЛЯ ОТЛАДКИ
 95c:	c0 9a       	sbi	0x18, 0	; 24
	#else
		OUT_PORT &= ~(1<<SIREN);							// Выключим сирену
	#endif
	}

	if (out_delay == 0)										// Если нет отсчета время активности выходов
 95e:	80 91 6f 00 	lds	r24, 0x006F
 962:	90 91 70 00 	lds	r25, 0x0070
 966:	00 97       	sbiw	r24, 0x00	; 0
 968:	11 f4       	brne	.+4      	; 0x96e <Siren_Outs_OFF+0x1e>
	{
	#if defined (DEBUG)
		OUT_PORT |= 1<<OUT_1;								// ТОЛЬКО ДЛЯ ОТЛАДКИ
 96a:	c1 9a       	sbi	0x18, 1	; 24
	#else			
		OUT_PORT &= ~(1<<OUT_1);							// Выключим выходы OUT_1,			
	#endif
		OUT_PORT |= 1<<OUT_2;								// и OUT_2 (инверсная логика работы)
 96c:	c2 9a       	sbi	0x18, 2	; 24
 96e:	08 95       	ret

00000970 <Ring>:
	ACSR &= ~(1<<ACIE);										// Запретим прерывания от компаратора для однократной отправки SMS
}
//=====================================================================================================================================================
// Конечный автомат дозвона. В зависимости от значения ring_mode, осуществляет исходящий вызов, либо ожидает реакции абонента
void Ring(void)
{
 970:	1f 93       	push	r17
	unsigned char ring_mode = 1;							// Состояние автомата изменяеться исключительно внутри него самого, поэтому переменная локальная

	while (parsing_result == IN_PROCESS){}					// Ждем окончания парсинга предыдущей команды
 972:	80 91 60 00 	lds	r24, 0x0060
 976:	88 23       	and	r24, r24
 978:	e1 f3       	breq	.-8      	; 0x972 <Ring+0x2>
 97a:	11 e0       	ldi	r17, 0x01	; 1

	while (ring_mode != 16)									// Пока автомат не перейдет в состояние "Попытки дозвона на все номера осуществлены"
	{
		wdt_reset();
 97c:	a8 95       	wdr
		Siren_Outs_OFF();									// Проверяем сирену и выходы, если пора - выключаем
 97e:	e8 df       	rcall	.-48     	; 0x950 <Siren_Outs_OFF>

		if (led_delay == 0) Blink_LED_WORK();				// Мигаем LED_WORK
 980:	80 91 6b 00 	lds	r24, 0x006B
 984:	90 91 6c 00 	lds	r25, 0x006C
 988:	00 97       	sbiw	r24, 0x00	; 0
 98a:	09 f4       	brne	.+2      	; 0x98e <Ring+0x1e>
 98c:	d4 df       	rcall	.-88     	; 0x936 <Blink_LED_WORK>

		CheckButton(10000);									// Проверяем кнопку постановки/снятия каждый 10000-й проход цикла дозвона по тревоге,
 98e:	80 e1       	ldi	r24, 0x10	; 16
 990:	97 e2       	ldi	r25, 0x27	; 39
 992:	29 dd       	rcall	.-1454   	; 0x3e6 <CheckButton>
															// обязательно после мигания LED_WORK по тревоге, иначе получим инвертированиое состояние выхода после снятия с охраны
		if ((ppk_mode == GUARD_OFF)&&(ring_mode != 15))		// Если ППК был переведен в состояние "СНЯТО С ОХРАНЫ" и еще продолжаеться дозвон
 994:	80 91 71 00 	lds	r24, 0x0071
 998:	88 23       	and	r24, r24
 99a:	21 f4       	brne	.+8      	; 0x9a4 <Ring+0x34>
 99c:	1f 30       	cpi	r17, 0x0F	; 15
 99e:	09 f0       	breq	.+2      	; 0x9a2 <Ring+0x32>
 9a0:	7e c0       	rjmp	.+252    	; 0xa9e <Ring+0x12e>
 9a2:	86 c0       	rjmp	.+268    	; 0xab0 <Ring+0x140>
		{
			ring_mode = 14;									// Прекращаем дозвон
		}
						
		switch (ring_mode)									// Осуществляем дозвон на все номера
 9a4:	81 2f       	mov	r24, r17
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	02 97       	sbiw	r24, 0x02	; 2
 9aa:	8e 30       	cpi	r24, 0x0E	; 14
 9ac:	91 05       	cpc	r25, r1
 9ae:	28 f4       	brcc	.+10     	; 0x9ba <Ring+0x4a>
 9b0:	87 5d       	subi	r24, 0xD7	; 215
 9b2:	9f 4f       	sbci	r25, 0xFF	; 255
 9b4:	8f 93       	push	r24
 9b6:	9f 93       	push	r25
 9b8:	08 95       	ret
		{
			case 1:
			{
				Ring_on_Number(number1);					// Звоним 1 абоненту				
 9ba:	83 e7       	ldi	r24, 0x73	; 115
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	a8 df       	rcall	.-176    	; 0x910 <Ring_on_Number>
				ring_mode = 2;								// Переводим автомат в состояние "Ожидание ответа модуля на дозвон 1 абоненту"
 9c0:	12 e0       	ldi	r17, 0x02	; 2
				break;
 9c2:	dc cf       	rjmp	.-72     	; 0x97c <Ring+0xc>
			}
			case 2:
			{
				if (parsing_result != IN_PROCESS)			// Если модуль начал не дозвон
 9c4:	80 91 60 00 	lds	r24, 0x0060
 9c8:	88 23       	and	r24, r24
 9ca:	09 f4       	brne	.+2      	; 0x9ce <Ring+0x5e>
 9cc:	3f c0       	rjmp	.+126    	; 0xa4c <Ring+0xdc>
				{
					ring_mode = 3;							// Просто положим трубку	
 9ce:	13 e0       	ldi	r17, 0x03	; 3
 9d0:	3d c0       	rjmp	.+122    	; 0xa4c <Ring+0xdc>
				}
				break;
			}
			case 3:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
 9d2:	80 91 60 00 	lds	r24, 0x0060
 9d6:	88 23       	and	r24, r24
 9d8:	89 f2       	breq	.-94     	; 0x97c <Ring+0xc>
				{
					SendStr_P(ATH);							// Ложим трубку					
 9da:	82 ee       	ldi	r24, 0xE2	; 226
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	bd dd       	rcall	.-1158   	; 0x55a <SendStr_P>
					ActivateParsing(_OK,AT_WAIT_TIME);
 9e0:	89 e1       	ldi	r24, 0x19	; 25
 9e2:	91 e0       	ldi	r25, 0x01	; 1
 9e4:	68 eb       	ldi	r22, 0xB8	; 184
 9e6:	7b e0       	ldi	r23, 0x0B	; 11
 9e8:	50 dd       	rcall	.-1376   	; 0x48a <ActivateParsing>
					ring_mode = 4;							// Переводим автомат в состояние "Ожидание отбоя вызова"
 9ea:	14 e0       	ldi	r17, 0x04	; 4
 9ec:	c7 cf       	rjmp	.-114    	; 0x97c <Ring+0xc>
				}
				break;
			}
			case 4:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
 9ee:	80 91 60 00 	lds	r24, 0x0060
 9f2:	88 23       	and	r24, r24
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <Ring+0x88>
 9f6:	62 c0       	rjmp	.+196    	; 0xabc <Ring+0x14c>
 9f8:	c1 cf       	rjmp	.-126    	; 0x97c <Ring+0xc>
				break;
			}
//----------------------------------------------------------------------------------------------------------------------------------------------------
			case 5:
			{
				Ring_on_Number(number2);					// Звоним 2 абоненту				
 9fa:	81 e8       	ldi	r24, 0x81	; 129
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	88 df       	rcall	.-240    	; 0x910 <Ring_on_Number>
				ring_mode = 6;								// Переводим автомат в состояние "Ожидание ответа модуля на дозвон 2 абоненту"
 a00:	16 e0       	ldi	r17, 0x06	; 6
				break;
 a02:	bc cf       	rjmp	.-136    	; 0x97c <Ring+0xc>
			}
			case 6:
			{
				if (parsing_result != IN_PROCESS)			// Если модуль начал не дозвон
 a04:	80 91 60 00 	lds	r24, 0x0060
 a08:	88 23       	and	r24, r24
 a0a:	01 f1       	breq	.+64     	; 0xa4c <Ring+0xdc>
				{
					ring_mode = 7;							// Просто положим трубку	
 a0c:	17 e0       	ldi	r17, 0x07	; 7
 a0e:	1e c0       	rjmp	.+60     	; 0xa4c <Ring+0xdc>
				}
				break;
			}
			case 7:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
 a10:	80 91 60 00 	lds	r24, 0x0060
 a14:	88 23       	and	r24, r24
 a16:	09 f4       	brne	.+2      	; 0xa1a <Ring+0xaa>
 a18:	b1 cf       	rjmp	.-158    	; 0x97c <Ring+0xc>
				{
					SendStr_P(ATH);							// Ложим трубку					
 a1a:	82 ee       	ldi	r24, 0xE2	; 226
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	9d dd       	rcall	.-1222   	; 0x55a <SendStr_P>
					ActivateParsing(_OK,AT_WAIT_TIME);
 a20:	89 e1       	ldi	r24, 0x19	; 25
 a22:	91 e0       	ldi	r25, 0x01	; 1
 a24:	68 eb       	ldi	r22, 0xB8	; 184
 a26:	7b e0       	ldi	r23, 0x0B	; 11
 a28:	30 dd       	rcall	.-1440   	; 0x48a <ActivateParsing>
					ring_mode = 8;							// Переводим автомат в состояние "Ожидание отбоя вызова"
 a2a:	18 e0       	ldi	r17, 0x08	; 8
 a2c:	a7 cf       	rjmp	.-178    	; 0x97c <Ring+0xc>
				}
				break;
			}
			case 8:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
 a2e:	80 91 60 00 	lds	r24, 0x0060
 a32:	88 23       	and	r24, r24
 a34:	09 f0       	breq	.+2      	; 0xa38 <Ring+0xc8>
 a36:	44 c0       	rjmp	.+136    	; 0xac0 <Ring+0x150>
 a38:	a1 cf       	rjmp	.-190    	; 0x97c <Ring+0xc>
				break;
			}		
//----------------------------------------------------------------------------------------------------------------------------------------------------
			case 9:
			{
				Ring_on_Number(number3);					// Звоним 3 абоненту				
 a3a:	8f e8       	ldi	r24, 0x8F	; 143
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	68 df       	rcall	.-304    	; 0x910 <Ring_on_Number>
				ring_mode = 10;								// Переводим автомат в состояние "Ожидание ответа модуля на дозвон 3 абоненту"
 a40:	1a e0       	ldi	r17, 0x0A	; 10
				break;
 a42:	9c cf       	rjmp	.-200    	; 0x97c <Ring+0xc>
			}
			case 10:
			{
				if (parsing_result != IN_PROCESS)			// Если модуль начал не дозвон
 a44:	80 91 60 00 	lds	r24, 0x0060
 a48:	81 11       	cpse	r24, r1
				{
					ring_mode = 11;							// Просто положим трубку	
 a4a:	1b e0       	ldi	r17, 0x0B	; 11
				}

				if (parsing_result == OK)					// А если начал дозвон (прислал OK)
 a4c:	80 91 60 00 	lds	r24, 0x0060
 a50:	81 30       	cpi	r24, 0x01	; 1
 a52:	09 f0       	breq	.+2      	; 0xa56 <Ring+0xe6>
 a54:	93 cf       	rjmp	.-218    	; 0x97c <Ring+0xc>
				{
					ActivateParsing(BUSY,RING_WAIT_TIME);	// Активируем парсинг ответа абонента
 a56:	82 e7       	ldi	r24, 0x72	; 114
 a58:	91 e0       	ldi	r25, 0x01	; 1
 a5a:	60 e2       	ldi	r22, 0x20	; 32
 a5c:	7e e4       	ldi	r23, 0x4E	; 78
 a5e:	15 dd       	rcall	.-1494   	; 0x48a <ActivateParsing>
 a60:	8d cf       	rjmp	.-230    	; 0x97c <Ring+0xc>
				}
				break;
			}
			case 11:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
 a62:	80 91 60 00 	lds	r24, 0x0060
 a66:	88 23       	and	r24, r24
 a68:	09 f4       	brne	.+2      	; 0xa6c <Ring+0xfc>
 a6a:	88 cf       	rjmp	.-240    	; 0x97c <Ring+0xc>
				{
					SendStr_P(ATH);							// Ложим трубку					
 a6c:	82 ee       	ldi	r24, 0xE2	; 226
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	74 dd       	rcall	.-1304   	; 0x55a <SendStr_P>
					ActivateParsing(_OK,AT_WAIT_TIME);
 a72:	89 e1       	ldi	r24, 0x19	; 25
 a74:	91 e0       	ldi	r25, 0x01	; 1
 a76:	68 eb       	ldi	r22, 0xB8	; 184
 a78:	7b e0       	ldi	r23, 0x0B	; 11
 a7a:	07 dd       	rcall	.-1522   	; 0x48a <ActivateParsing>
					ring_mode = 12;							// Переводим автомат в состояние "Ожидание отбоя вызова"
 a7c:	1c e0       	ldi	r17, 0x0C	; 12
 a7e:	7e cf       	rjmp	.-260    	; 0x97c <Ring+0xc>
				}
				break;
			}
			case 12:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
 a80:	80 91 60 00 	lds	r24, 0x0060
 a84:	88 23       	and	r24, r24
 a86:	f1 f4       	brne	.+60     	; 0xac4 <Ring+0x154>
 a88:	79 cf       	rjmp	.-270    	; 0x97c <Ring+0xc>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 a8a:	f8 94       	cli
//----------------------------------------------------------------------------------------------------------------------------------------------------
			case 13:
			{
				ATOMIC_BLOCK(ATOMIC_FORCEON)
				{
					ppk_mode = ALARM_RING_COMPL;			// Все звонки осуществлены. Активируем режим ППК "ТРЕВОГА, ЗВОНКИ СОВЕРШЕНЫ"
 a8c:	89 e0       	ldi	r24, 0x09	; 9
 a8e:	80 93 71 00 	sts	0x0071, r24
					eeprom_update_byte(&ppk_mode_save, ALARM_RING_COMPL);// И обновляем резервную копию состояния ППК в EEPROM
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	69 e0       	ldi	r22, 0x09	; 9
 a98:	0a d1       	rcall	.+532    	; 0xcae <__eeupd_byte_m8>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 a9a:	78 94       	sei
				}
				ring_mode = 16;								// Переводим автомат в состояние "Попытки дозвона на все номера осуществлены"
				break;
 a9c:	17 c0       	rjmp	.+46     	; 0xacc <Ring+0x15c>
			}
//----------------------------------------------------------------------------------------------------------------------------------------------------
			case 14:
			{
				SendStr_P(ATH);
 a9e:	82 ee       	ldi	r24, 0xE2	; 226
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	5b dd       	rcall	.-1354   	; 0x55a <SendStr_P>
				ActivateParsing(_OK,AT_WAIT_TIME);
 aa4:	89 e1       	ldi	r24, 0x19	; 25
 aa6:	91 e0       	ldi	r25, 0x01	; 1
 aa8:	68 eb       	ldi	r22, 0xB8	; 184
 aaa:	7b e0       	ldi	r23, 0x0B	; 11
 aac:	ee dc       	rcall	.-1572   	; 0x48a <ActivateParsing>
 aae:	0c c0       	rjmp	.+24     	; 0xac8 <Ring+0x158>
				ring_mode = 15;
				break;
			}
			case 15:
			{
				if (parsing_result != IN_PROCESS)
 ab0:	80 91 60 00 	lds	r24, 0x0060
 ab4:	88 23       	and	r24, r24
 ab6:	41 f0       	breq	.+16     	; 0xac8 <Ring+0x158>
				{
				#if defined (DEBUG)
					LED_PORT |= 1<<LED_WORK;				// ТОЛЬКО ДЛЯ ОТЛАДКИ
 ab8:	c3 9a       	sbi	0x18, 3	; 24
 aba:	08 c0       	rjmp	.+16     	; 0xacc <Ring+0x15c>
			}
			case 4:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
				{
					ring_mode = 5;							// Переводим автомат в состояние "Звонок 2 абоненту"
 abc:	15 e0       	ldi	r17, 0x05	; 5
 abe:	5e cf       	rjmp	.-324    	; 0x97c <Ring+0xc>
			}
			case 8:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
				{
					ring_mode = 9;							// Переводим автомат в состояние "Звонок 3 абоненту"
 ac0:	19 e0       	ldi	r17, 0x09	; 9
 ac2:	5c cf       	rjmp	.-328    	; 0x97c <Ring+0xc>
			}
			case 12:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
				{
					ring_mode =13;							// Переводим автомат в состояние "Все звонки осуществлены"
 ac4:	1d e0       	ldi	r17, 0x0D	; 13
 ac6:	5a cf       	rjmp	.-332    	; 0x97c <Ring+0xc>
				ring_mode = 15;
				break;
			}
			case 15:
			{
				if (parsing_result != IN_PROCESS)
 ac8:	1f e0       	ldi	r17, 0x0F	; 15
 aca:	58 cf       	rjmp	.-336    	; 0x97c <Ring+0xc>
			}
			case 16: break;
			default: ring_mode = 16; break;
		}
	}
}
 acc:	1f 91       	pop	r17
 ace:	08 95       	ret

00000ad0 <Init>:
//=====================================================================================================================================================
// Инициализация портов и периферии
void Init(void)
{
// Инициализация портов
	SIMCOM_RESET_DDR |= 1<<SIMCOM_RESET_PIN;				// SIMCOM_RESET на вывод
 ad0:	8c 9a       	sbi	0x11, 4	; 17
	DDRB |= 1<<LED_PROG|1<<LED_WORK|1<<OUT_2|1<<OUT_1|1<<SIREN;// Сирену, выходы, и светодиоды - на вывод
 ad2:	87 b3       	in	r24, 0x17	; 23
 ad4:	8f 61       	ori	r24, 0x1F	; 31
 ad6:	87 bb       	out	0x17, r24	; 23
	
#if defined (DEBUG)
	PORTD |= 1<<JUMPER_PIN|1<<DATCHIK_2|1<<DATCHIK_1;		// ТОЛЬКО ДЛЯ ОТЛАДКИ
 ad8:	82 b3       	in	r24, 0x12	; 18
 ada:	8c 62       	ori	r24, 0x2C	; 44
 adc:	82 bb       	out	0x12, r24	; 18
#else
	PORTD |= 1<<JUMPER_PIN|1<<DATCHIK_1;					// Включаем подтяжку для Джампера входа в режим программирования и DATCHIK_1 ( DATCHIK_2 не надо !!! )
#endif
	PORTB |= 1<<BUTTON_PIN|1<<OUT_2;						// Включаем подтяжку для Кнопки постановки/снятия, и активируем OUT_2 (выключиться при тревоге)
 ade:	88 b3       	in	r24, 0x18	; 24
 ae0:	84 62       	ori	r24, 0x24	; 36
 ae2:	88 bb       	out	0x18, r24	; 24

#if defined (DEBUG)
	LED_PORT |= 1<<LED_WORK|1<<LED_PROG;					// ТОЛЬКО ДЛЯ ОТЛАДКИ
 ae4:	88 b3       	in	r24, 0x18	; 24
 ae6:	88 61       	ori	r24, 0x18	; 24
 ae8:	88 bb       	out	0x18, r24	; 24
#else
	LED_PORT &= ~(1<<LED_WORK|1<<LED_PROG);					// Выключим светодиоды
#endif

// Инициализация UART
	UBRRL = LO(bauddivider);
 aea:	83 e3       	ldi	r24, 0x33	; 51
 aec:	89 b9       	out	0x09, r24	; 9
	UBRRH = HI(bauddivider);
 aee:	10 bc       	out	0x20, r1	; 32
	UCSRA = 0;
 af0:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0<<RXCIE|0<<TXCIE|0<<UDRIE|1<<RXEN|1<<TXEN;		// Прерывание UDRIE сразу никогда не разрешаем, иначе контроллер сразу входит в это прерывание
 af2:	88 e1       	ldi	r24, 0x18	; 24
 af4:	8a b9       	out	0x0a, r24	; 10

#if defined (__AVR_ATmega8__)
	UCSRC = 1<<URSEL|1<<UCSZ1|1<<UCSZ0;
 af6:	86 e8       	ldi	r24, 0x86	; 134
 af8:	80 bd       	out	0x20, r24	; 32

// Инициализация Таймеров
#if defined (__AVR_ATmega8__)
// Предделитель подбираеться экспериментально, для достижения периода прерывания Timer1 каждую мс
															// Везде вкл. режим прерывания Timer1 по совпадению (1<<WGM12)
	TCCR1B = 1<<WGM12|0<<CS12|0<<CS11|1<<CS10;				// Запуск таймера без предделителя
 afa:	89 e0       	ldi	r24, 0x09	; 9
 afc:	8e bd       	out	0x2e, r24	; 46
//	TCCR1B = 1<<WGM12|0<<CS12|1<<CS11|0<<CS10;				// Запуск таймера с предделителем 8
//	TCCR1B = 1<<WGM12|0<<CS12|1<<CS11|1<<CS10;				// Запуск таймера с предделителем 64
//	TCCR1B = 1<<WGM12|1<<CS12|0<<CS11|0<<CS10;				// Запуск таймера с предделителем 256
//	TCCR1B = 1<<WGM12|1<<CS12|0<<CS11|1<<CS10;				// Запуск таймера с предделителем 1024				
	OCR1A = 7999;											// Значение подбираеться экспериментально, для достижения периода прерывания Timer1 каждую мс
 afe:	8f e3       	ldi	r24, 0x3F	; 63
 b00:	9f e1       	ldi	r25, 0x1F	; 31
 b02:	9b bd       	out	0x2b, r25	; 43
 b04:	8a bd       	out	0x2a, r24	; 42
	TIMSK = 1<<OCIE1A;										// Разрешаем прерывание по совпадению значения OCR1A с заданым ранее
 b06:	80 e1       	ldi	r24, 0x10	; 16
 b08:	89 bf       	out	0x39, r24	; 57
	TIFR = 1<<OCF1A;										// Сбросим флаг, чтобы прерывание не выскочило сразу
 b0a:	88 bf       	out	0x38, r24	; 56
	TIMSK = 1<<OCIE0A;										// Разрешаем прерывание по совпадению значения OCR0A с заданым ранее
#endif

// Настроим внешние прерывания (DATCHIK_1, DATCHIK_2)
#if defined (DEBUG)
	MCUCR |= 1<<ISC11|1<<ISC01;								// ТОЛЬКО ДЛЯ ОТЛАДКИ
 b0c:	85 b7       	in	r24, 0x35	; 53
 b0e:	8a 60       	ori	r24, 0x0A	; 10
 b10:	85 bf       	out	0x35, r24	; 53
#else														
	MCUCR |= 1<<ISC11|1<<ISC10|1<<ISC01;					// INT1 - прерывание по переднему фронту (DATCHIK_2), INT0 - прерывание по спаду (DATCHIK_1)				
#endif

// Настроим Аналоговый компаратор
	ACSR |= 1<<ACBG|1<<ACIE|1<<ACIS1|1<<ACIS0;				// Подключаем внутренний ИОН, разрешаем прерывание от компаратора, условие возникновения прерывания - переход с 0 на 1. Реакция - вывод PD7 садиться на землю.
 b12:	88 b1       	in	r24, 0x08	; 8
 b14:	8b 64       	ori	r24, 0x4B	; 75
 b16:	88 b9       	out	0x08, r24	; 8
}
 b18:	08 95       	ret

00000b1a <main>:
void 	SaveNumber_2_RAM(char *number, unsigned char next_programming_mode);
void	Siren_Outs_OFF(void);
void	Blink_LED_WORK(void);
//=====================================================================================================================================================
int main(void)
{
 b1a:	ef 92       	push	r14
 b1c:	ff 92       	push	r15
 b1e:	0f 93       	push	r16
 b20:	1f 93       	push	r17
 b22:	cf 93       	push	r28
 b24:	df 93       	push	r29
	Init();													// Инициализация портов и периферии
 b26:	d4 df       	rcall	.-88     	; 0xad0 <Init>
	ppk_mode = eeprom_read_byte(&ppk_mode_save);			// Восстанавливаем состояние ППК из EEPROM до разрешения прерваний, для атомарности
 b28:	80 e0       	ldi	r24, 0x00	; 0
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	a9 d0       	rcall	.+338    	; 0xc80 <__eerd_byte_m8>
 b2e:	80 93 71 00 	sts	0x0071, r24
	sei();
 b32:	78 94       	sei
	wdt_enable(WDTO_2S);									// Включаем сторожевой таймер со сбросом через 2 секунды
 b34:	2f e0       	ldi	r18, 0x0F	; 15
 b36:	88 e1       	ldi	r24, 0x18	; 24
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	0f b6       	in	r0, 0x3f	; 63
 b3c:	f8 94       	cli
 b3e:	a8 95       	wdr
 b40:	81 bd       	out	0x21, r24	; 33
 b42:	0f be       	out	0x3f, r0	; 63
 b44:	21 bd       	out	0x21, r18	; 33

	if (ppk_mode == GUARD_OFF)								// Если ППК снят с охраны								
 b46:	80 91 71 00 	lds	r24, 0x0071
 b4a:	88 23       	and	r24, r24
 b4c:	29 f4       	brne	.+10     	; 0xb58 <main+0x3e>
	{
		pin_state = JUMPER_PINS;							// Читаем состояние всего порта c Джампером программирования
 b4e:	80 b3       	in	r24, 0x10	; 16
 b50:	80 93 9e 00 	sts	0x009E, r24
		if (!(pin_state & (1<<JUMPER_PIN))) Programming();	// Если Джампер программирования в положении ПРОГ (вывод JUMPER_PIN на земле), переходим в режим "ПРОГРАММИРОВАНИЕ"
 b54:	85 ff       	sbrs	r24, 5
 b56:	5e de       	rcall	.-836    	; 0x814 <Programming>
	}

	wdt_reset();
 b58:	a8 95       	wdr
	ReadNumbers();											// Читаем записанные телефонные номера из EEPROM в ОЗУ
 b5a:	d2 dc       	rcall	.-1628   	; 0x500 <ReadNumbers>

	if (ppk_mode != GUARD_OFF)								// Если НЕ в режиме "СНЯТО С ОХРАНЫ"
 b5c:	80 91 71 00 	lds	r24, 0x0071
 b60:	88 23       	and	r24, r24
 b62:	21 f0       	breq	.+8      	; 0xb6c <main+0x52>
	{
		GIFR = 1<<INTF1|1<<INTF0;							// Сбросим флаги возможно возникавших ранее внешних прерываний
 b64:	80 ec       	ldi	r24, 0xC0	; 192
 b66:	8a bf       	out	0x3a, r24	; 58
		GICR = 1<<INT1|1<<INT0;								// Разрешим прерывания INT1 и INT0
 b68:	8b bf       	out	0x3b, r24	; 59
	#if defined (DEBUG)
		LED_PORT &= ~(1<<LED_WORK);							// ТОЛЬКО ДЛЯ ОТЛАДКИ
 b6a:	c3 98       	cbi	0x18, 3	; 24
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if ((ppk_mode == DELAY_IN)&&(exit_delay == 0))	// Если ППК находиться в состоянии "ЗАДЕРЖКА НА ВХОД" и задержка истекла
		{
			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				ppk_mode = ALARM_ACTIVE;					// Активируем режим "ТРЕВОГА АКТИВНА"
 b6c:	93 e0       	ldi	r25, 0x03	; 3
 b6e:	e9 2e       	mov	r14, r25
			OUT_PORT &= ~(1<<OUT_2);						// и OUT_2 (инверсная логика работы)
		#endif

			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				siren_delay = SIREN_TIME;					// Задаем время звучания сирены
 b70:	c0 e1       	ldi	r28, 0x10	; 16
 b72:	d7 e2       	ldi	r29, 0x27	; 39
				out_delay = OUT_TIME;						// Задаем время активности выходов
				ppk_mode = ALARM_SIREN_COMPL;				// Сирена была включена на нужное время, меняем состояние ППК
 b74:	85 e0       	ldi	r24, 0x05	; 5
 b76:	f8 2e       	mov	r15, r24
				eeprom_update_byte(&ppk_mode_save, ALARM_SIREN_COMPL);// Обновляем состояние ППК в EEPROM
			}
			GIFR = 1<<INTF1|1<<INTF0;						// Сбросим флаги возникавших ранее прерываний
 b78:	10 ec       	ldi	r17, 0xC0	; 192
			Blink_LED_WORK();								// Мигаем LED_WORK
		}
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if ((ppk_mode == DELAY_OUT)&&(exit_delay == 0))	// Если ППК находиться в состоянии "ЗАДЕРЖКА НА ВЫХОД" и задержка истекла
		{
				ppk_mode = GUARD_ON;						// Активируем режим "ПОД ОХРАНОЙ"
 b7a:	01 e0       	ldi	r16, 0x01	; 1

//=====================================================================================================================================================
// Главный цикл
	while (1)
	{
		CheckButton(5000);									// Проверяем кнопку постановки/снятия каждый 5000-й проход главного цикла
 b7c:	88 e8       	ldi	r24, 0x88	; 136
 b7e:	93 e1       	ldi	r25, 0x13	; 19
 b80:	32 dc       	rcall	.-1948   	; 0x3e6 <CheckButton>
		CheckSIMCOM();										// Проверяем состояние модуля, регистрацию в сети, и прочее
 b82:	e7 dd       	rcall	.-1074   	; 0x752 <CheckSIMCOM>
		Siren_Outs_OFF();									// Проверяем сирену и выходы, если пора - выключаем
 b84:	e5 de       	rcall	.-566    	; 0x950 <Siren_Outs_OFF>
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if ((ppk_mode == DELAY_IN)&&(exit_delay == 0))	// Если ППК находиться в состоянии "ЗАДЕРЖКА НА ВХОД" и задержка истекла
 b86:	80 91 71 00 	lds	r24, 0x0071
 b8a:	80 32       	cpi	r24, 0x20	; 32
 b8c:	71 f4       	brne	.+28     	; 0xbaa <main+0x90>
 b8e:	80 91 69 00 	lds	r24, 0x0069
 b92:	90 91 6a 00 	lds	r25, 0x006A
 b96:	00 97       	sbiw	r24, 0x00	; 0
 b98:	41 f4       	brne	.+16     	; 0xbaa <main+0x90>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 b9a:	f8 94       	cli
		{
			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				ppk_mode = ALARM_ACTIVE;					// Активируем режим "ТРЕВОГА АКТИВНА"
 b9c:	e0 92 71 00 	sts	0x0071, r14
				eeprom_update_byte(&ppk_mode_save, ALARM_ACTIVE);// Обновляем состояние ППК в EEPROM
 ba0:	80 e0       	ldi	r24, 0x00	; 0
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	63 e0       	ldi	r22, 0x03	; 3
 ba6:	83 d0       	rcall	.+262    	; 0xcae <__eeupd_byte_m8>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 ba8:	78 94       	sei
			}
		}
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if (ppk_mode == ALARM_ACTIVE)						// Если возникла тревога
 baa:	80 91 71 00 	lds	r24, 0x0071
 bae:	83 30       	cpi	r24, 0x03	; 3
 bb0:	a9 f4       	brne	.+42     	; 0xbdc <main+0xc2>
		{
		#if defined (DEBUG)
			OUT_PORT &= ~(1<<SIREN|1<<OUT_2|1<<OUT_1);		// ТОЛЬКО ДЛЯ ОТЛАДКИ
 bb2:	88 b3       	in	r24, 0x18	; 24
 bb4:	88 7f       	andi	r24, 0xF8	; 248
 bb6:	88 bb       	out	0x18, r24	; 24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 bb8:	f8 94       	cli
			OUT_PORT &= ~(1<<OUT_2);						// и OUT_2 (инверсная логика работы)
		#endif

			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				siren_delay = SIREN_TIME;					// Задаем время звучания сирены
 bba:	d0 93 6e 00 	sts	0x006E, r29
 bbe:	c0 93 6d 00 	sts	0x006D, r28
				out_delay = OUT_TIME;						// Задаем время активности выходов
 bc2:	d0 93 70 00 	sts	0x0070, r29
 bc6:	c0 93 6f 00 	sts	0x006F, r28
				ppk_mode = ALARM_SIREN_COMPL;				// Сирена была включена на нужное время, меняем состояние ППК
 bca:	f0 92 71 00 	sts	0x0071, r15
				eeprom_update_byte(&ppk_mode_save, ALARM_SIREN_COMPL);// Обновляем состояние ППК в EEPROM
 bce:	80 e0       	ldi	r24, 0x00	; 0
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	65 e0       	ldi	r22, 0x05	; 5
 bd4:	6c d0       	rcall	.+216    	; 0xcae <__eeupd_byte_m8>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 bd6:	78 94       	sei
			}
			GIFR = 1<<INTF1|1<<INTF0;						// Сбросим флаги возникавших ранее прерываний
 bd8:	1a bf       	out	0x3a, r17	; 58
			GICR = 1<<INT1|1<<INT0;							// Разрешим прерывания INT1 и INT0				
 bda:	1b bf       	out	0x3b, r17	; 59
		}
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if ((ppk_mode == ALARM_SIREN_COMPL)&&(simcom_init_mode == 1))// Если была включена сирена, и модуль SIMCOM находиться в рабочем режиме, начинаем звонить
 bdc:	80 91 71 00 	lds	r24, 0x0071
 be0:	85 30       	cpi	r24, 0x05	; 5
 be2:	29 f4       	brne	.+10     	; 0xbee <main+0xd4>
 be4:	80 91 9d 00 	lds	r24, 0x009D
 be8:	81 30       	cpi	r24, 0x01	; 1
 bea:	09 f4       	brne	.+2      	; 0xbee <main+0xd4>
		{
			Ring();											// Звоним
 bec:	c1 de       	rcall	.-638    	; 0x970 <Ring>
		}
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if (((ppk_mode != GUARD_OFF)&&(ppk_mode != GUARD_ON))&&(led_delay == 0))// Если режим "ТРЕВОГА" или "ЗАДЕРЖКА"
 bee:	80 91 71 00 	lds	r24, 0x0071
 bf2:	88 23       	and	r24, r24
 bf4:	59 f0       	breq	.+22     	; 0xc0c <main+0xf2>
 bf6:	80 91 71 00 	lds	r24, 0x0071
 bfa:	81 30       	cpi	r24, 0x01	; 1
 bfc:	39 f0       	breq	.+14     	; 0xc0c <main+0xf2>
 bfe:	80 91 6b 00 	lds	r24, 0x006B
 c02:	90 91 6c 00 	lds	r25, 0x006C
 c06:	00 97       	sbiw	r24, 0x00	; 0
 c08:	09 f4       	brne	.+2      	; 0xc0c <main+0xf2>
		{
			Blink_LED_WORK();								// Мигаем LED_WORK
 c0a:	95 de       	rcall	.-726    	; 0x936 <Blink_LED_WORK>
		}
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if ((ppk_mode == DELAY_OUT)&&(exit_delay == 0))	// Если ППК находиться в состоянии "ЗАДЕРЖКА НА ВЫХОД" и задержка истекла
 c0c:	80 91 71 00 	lds	r24, 0x0071
 c10:	80 31       	cpi	r24, 0x10	; 16
 c12:	89 f4       	brne	.+34     	; 0xc36 <main+0x11c>
 c14:	80 91 69 00 	lds	r24, 0x0069
 c18:	90 91 6a 00 	lds	r25, 0x006A
 c1c:	00 97       	sbiw	r24, 0x00	; 0
 c1e:	59 f4       	brne	.+22     	; 0xc36 <main+0x11c>
		{
				ppk_mode = GUARD_ON;						// Активируем режим "ПОД ОХРАНОЙ"
 c20:	00 93 71 00 	sts	0x0071, r16
				GIFR = 1<<INTF1|1<<INTF0;					// Сбросим флаги возможно возникавших ранее прерываний
 c24:	1a bf       	out	0x3a, r17	; 58
				GICR = 1<<INT1|1<<INT0;						// Разрешим прерывания INT1 и INT0
 c26:	1b bf       	out	0x3b, r17	; 59
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 c28:	f8 94       	cli
				ATOMIC_BLOCK(ATOMIC_FORCEON)
				{
					led_delay = 0;							// Прекращаем мигать LED_WORK
 c2a:	10 92 6c 00 	sts	0x006C, r1
 c2e:	10 92 6b 00 	sts	0x006B, r1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 c32:	78 94       	sei
				}
			#if defined (DEBUG)
				LED_PORT &= ~(1<<LED_WORK);					// ТОЛЬКО ДЛЯ ОТЛАДКИ
 c34:	c3 98       	cbi	0x18, 3	; 24
			#else
				LED_PORT |= 1<<LED_WORK;					// Зажигаем светодиод ОХРАНА
			#endif
		}
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if ((ppk_mode == DELAY_IN)&&(exit_delay == IN_DELAY))// Если ППК находиться в состоянии "ЗАДЕРЖКА НА ВХОД" и она только началась
 c36:	80 91 71 00 	lds	r24, 0x0071
 c3a:	80 32       	cpi	r24, 0x20	; 32
 c3c:	09 f0       	breq	.+2      	; 0xc40 <main+0x126>
 c3e:	9e cf       	rjmp	.-196    	; 0xb7c <main+0x62>
 c40:	80 91 69 00 	lds	r24, 0x0069
 c44:	90 91 6a 00 	lds	r25, 0x006A
 c48:	27 e2       	ldi	r18, 0x27	; 39
 c4a:	80 31       	cpi	r24, 0x10	; 16
 c4c:	92 07       	cpc	r25, r18
 c4e:	09 f0       	breq	.+2      	; 0xc52 <main+0x138>
 c50:	95 cf       	rjmp	.-214    	; 0xb7c <main+0x62>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 c52:	f8 94       	cli
		{
			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				eeprom_update_byte(&ppk_mode_save, DELAY_IN);// Обновляем состояние ППК в EEPROM
 c54:	80 e0       	ldi	r24, 0x00	; 0
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	60 e2       	ldi	r22, 0x20	; 32
 c5a:	29 d0       	rcall	.+82     	; 0xcae <__eeupd_byte_m8>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 c5c:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 c5e:	8e cf       	rjmp	.-228    	; 0xb7c <main+0x62>

00000c60 <__eerd_block_m8>:
 c60:	dc 01       	movw	r26, r24
 c62:	cb 01       	movw	r24, r22

00000c64 <__eerd_blraw_m8>:
 c64:	fc 01       	movw	r30, r24
 c66:	e1 99       	sbic	0x1c, 1	; 28
 c68:	fe cf       	rjmp	.-4      	; 0xc66 <__eerd_blraw_m8+0x2>
 c6a:	06 c0       	rjmp	.+12     	; 0xc78 <__eerd_blraw_m8+0x14>
 c6c:	ff bb       	out	0x1f, r31	; 31
 c6e:	ee bb       	out	0x1e, r30	; 30
 c70:	e0 9a       	sbi	0x1c, 0	; 28
 c72:	31 96       	adiw	r30, 0x01	; 1
 c74:	0d b2       	in	r0, 0x1d	; 29
 c76:	0d 92       	st	X+, r0
 c78:	41 50       	subi	r20, 0x01	; 1
 c7a:	50 40       	sbci	r21, 0x00	; 0
 c7c:	b8 f7       	brcc	.-18     	; 0xc6c <__eerd_blraw_m8+0x8>
 c7e:	08 95       	ret

00000c80 <__eerd_byte_m8>:
 c80:	e1 99       	sbic	0x1c, 1	; 28
 c82:	fe cf       	rjmp	.-4      	; 0xc80 <__eerd_byte_m8>
 c84:	9f bb       	out	0x1f, r25	; 31
 c86:	8e bb       	out	0x1e, r24	; 30
 c88:	e0 9a       	sbi	0x1c, 0	; 28
 c8a:	99 27       	eor	r25, r25
 c8c:	8d b3       	in	r24, 0x1d	; 29
 c8e:	08 95       	ret

00000c90 <__eeupd_block_m8>:
 c90:	dc 01       	movw	r26, r24
 c92:	a4 0f       	add	r26, r20
 c94:	b5 1f       	adc	r27, r21
 c96:	41 50       	subi	r20, 0x01	; 1
 c98:	50 40       	sbci	r21, 0x00	; 0
 c9a:	40 f0       	brcs	.+16     	; 0xcac <__eeupd_block_m8+0x1c>
 c9c:	cb 01       	movw	r24, r22
 c9e:	84 0f       	add	r24, r20
 ca0:	95 1f       	adc	r25, r21
 ca2:	2e 91       	ld	r18, -X
 ca4:	05 d0       	rcall	.+10     	; 0xcb0 <__eeupd_r18_m8>
 ca6:	41 50       	subi	r20, 0x01	; 1
 ca8:	50 40       	sbci	r21, 0x00	; 0
 caa:	d8 f7       	brcc	.-10     	; 0xca2 <__eeupd_block_m8+0x12>
 cac:	08 95       	ret

00000cae <__eeupd_byte_m8>:
 cae:	26 2f       	mov	r18, r22

00000cb0 <__eeupd_r18_m8>:
 cb0:	e1 99       	sbic	0x1c, 1	; 28
 cb2:	fe cf       	rjmp	.-4      	; 0xcb0 <__eeupd_r18_m8>
 cb4:	9f bb       	out	0x1f, r25	; 31
 cb6:	8e bb       	out	0x1e, r24	; 30
 cb8:	e0 9a       	sbi	0x1c, 0	; 28
 cba:	01 97       	sbiw	r24, 0x01	; 1
 cbc:	0d b2       	in	r0, 0x1d	; 29
 cbe:	02 16       	cp	r0, r18
 cc0:	31 f0       	breq	.+12     	; 0xcce <__eeupd_r18_m8+0x1e>
 cc2:	2d bb       	out	0x1d, r18	; 29
 cc4:	0f b6       	in	r0, 0x3f	; 63
 cc6:	f8 94       	cli
 cc8:	e2 9a       	sbi	0x1c, 2	; 28
 cca:	e1 9a       	sbi	0x1c, 1	; 28
 ccc:	0f be       	out	0x3f, r0	; 63
 cce:	08 95       	ret

00000cd0 <_exit>:
 cd0:	f8 94       	cli

00000cd2 <__stop_program>:
 cd2:	ff cf       	rjmp	.-2      	; 0xcd2 <__stop_program>

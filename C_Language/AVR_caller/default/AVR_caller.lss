
AVR_caller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cb0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000cb0  00000d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  00800064  00800064  00000d68  2**0
                  ALLOC
  3 .eeprom       0000002b  00810000  00810000  00000d68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000a50  00000000  00000000  00000d94  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000026f  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00001a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000003b4  00000000  00000000  00001a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001127  00000000  00000000  00001e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000028c  00000000  00000000  00002f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000f5b  00000000  00000000  000031da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000180  00000000  00000000  00004138  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000045e  00000000  00000000  000042b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000633  00000000  00000000  00004716  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000038  00000000  00000000  00004d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00004d81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c9 c0       	rjmp	.+402    	; 0x194 <__ctors_end>
   2:	ab c1       	rjmp	.+854    	; 0x35a <__vector_1>
   4:	ca c1       	rjmp	.+916    	; 0x39a <__vector_2>
   6:	e1 c0       	rjmp	.+450    	; 0x1ca <__bad_interrupt>
   8:	e0 c0       	rjmp	.+448    	; 0x1ca <__bad_interrupt>
   a:	df c0       	rjmp	.+446    	; 0x1ca <__bad_interrupt>
   c:	2c c1       	rjmp	.+600    	; 0x266 <__vector_6>
   e:	dd c0       	rjmp	.+442    	; 0x1ca <__bad_interrupt>
  10:	dc c0       	rjmp	.+440    	; 0x1ca <__bad_interrupt>
  12:	db c0       	rjmp	.+438    	; 0x1ca <__bad_interrupt>
  14:	da c0       	rjmp	.+436    	; 0x1ca <__bad_interrupt>
  16:	da c0       	rjmp	.+436    	; 0x1cc <__vector_11>
  18:	d8 c0       	rjmp	.+432    	; 0x1ca <__bad_interrupt>
  1a:	d7 c0       	rjmp	.+430    	; 0x1ca <__bad_interrupt>
  1c:	d6 c0       	rjmp	.+428    	; 0x1ca <__bad_interrupt>
  1e:	d5 c0       	rjmp	.+426    	; 0x1ca <__bad_interrupt>
  20:	dc c1       	rjmp	.+952    	; 0x3da <__vector_16>
  22:	d3 c0       	rjmp	.+422    	; 0x1ca <__bad_interrupt>
  24:	d2 c0       	rjmp	.+420    	; 0x1ca <__bad_interrupt>
  26:	4f c3       	rjmp	.+1694   	; 0x6c6 <SwitchSIMCOM_mode+0x3e>
  28:	65 c3       	rjmp	.+1738   	; 0x6f4 <SwitchSIMCOM_mode+0x6c>
  2a:	6a c3       	rjmp	.+1748   	; 0x700 <SwitchSIMCOM_mode+0x78>
  2c:	6f c3       	rjmp	.+1758   	; 0x70c <SwitchSIMCOM_mode+0x84>
  2e:	71 c3       	rjmp	.+1762   	; 0x712 <SwitchSIMCOM_mode+0x8a>
  30:	73 c3       	rjmp	.+1766   	; 0x718 <SwitchSIMCOM_mode+0x90>
  32:	75 c3       	rjmp	.+1770   	; 0x71e <SwitchSIMCOM_mode+0x96>
  34:	7a c3       	rjmp	.+1780   	; 0x72a <SwitchSIMCOM_mode+0xa2>
  36:	7f c3       	rjmp	.+1790   	; 0x736 <SwitchSIMCOM_mode+0xae>
  38:	84 c3       	rjmp	.+1800   	; 0x742 <SwitchSIMCOM_mode+0xba>
  3a:	8f c3       	rjmp	.+1822   	; 0x75a <SwitchSIMCOM_mode+0xd2>
  3c:	96 c3       	rjmp	.+1836   	; 0x76a <SwitchSIMCOM_mode+0xe2>
  3e:	98 c3       	rjmp	.+1840   	; 0x770 <SwitchSIMCOM_mode+0xe8>
  40:	9a c3       	rjmp	.+1844   	; 0x776 <SwitchSIMCOM_mode+0xee>
  42:	a2 c3       	rjmp	.+1860   	; 0x788 <SwitchSIMCOM_mode+0x100>
  44:	ed c3       	rjmp	.+2010   	; 0x820 <CheckSIMCOM+0x8c>
  46:	c3 c3       	rjmp	.+1926   	; 0x7ce <CheckSIMCOM+0x3a>
  48:	c4 c3       	rjmp	.+1928   	; 0x7d2 <CheckSIMCOM+0x3e>
  4a:	c7 c3       	rjmp	.+1934   	; 0x7da <CheckSIMCOM+0x46>
  4c:	c8 c3       	rjmp	.+1936   	; 0x7de <CheckSIMCOM+0x4a>
  4e:	db c3       	rjmp	.+1974   	; 0x806 <CheckSIMCOM+0x72>
  50:	c8 c3       	rjmp	.+1936   	; 0x7e2 <CheckSIMCOM+0x4e>
  52:	c9 c3       	rjmp	.+1938   	; 0x7e6 <CheckSIMCOM+0x52>
  54:	ca c3       	rjmp	.+1940   	; 0x7ea <CheckSIMCOM+0x56>
  56:	d2 c3       	rjmp	.+1956   	; 0x7fc <CheckSIMCOM+0x68>
  58:	d3 c3       	rjmp	.+1958   	; 0x800 <CheckSIMCOM+0x6c>
  5a:	d7 c3       	rjmp	.+1966   	; 0x80a <CheckSIMCOM+0x76>
  5c:	d8 c3       	rjmp	.+1968   	; 0x80e <CheckSIMCOM+0x7a>
  5e:	d9 c3       	rjmp	.+1970   	; 0x812 <CheckSIMCOM+0x7e>
  60:	96 c4       	rjmp	.+2348   	; 0x98e <Ring+0x54>
  62:	9c c4       	rjmp	.+2360   	; 0x99c <Ring+0x62>
  64:	a9 c4       	rjmp	.+2386   	; 0x9b8 <Ring+0x7e>
  66:	ae c4       	rjmp	.+2396   	; 0x9c4 <Ring+0x8a>
  68:	b2 c4       	rjmp	.+2404   	; 0x9ce <Ring+0x94>
  6a:	b7 c4       	rjmp	.+2414   	; 0x9da <Ring+0xa0>
  6c:	c5 c4       	rjmp	.+2442   	; 0x9f8 <Ring+0xbe>
  6e:	ca c4       	rjmp	.+2452   	; 0xa04 <Ring+0xca>
  70:	ce c4       	rjmp	.+2460   	; 0xa0e <Ring+0xd4>
  72:	dc c4       	rjmp	.+2488   	; 0xa2c <Ring+0xf2>
  74:	ea c4       	rjmp	.+2516   	; 0xa4a <Ring+0x110>
  76:	ee c4       	rjmp	.+2524   	; 0xa54 <Ring+0x11a>
  78:	f7 c4       	rjmp	.+2542   	; 0xa68 <Ring+0x12e>
  7a:	ff c4       	rjmp	.+2558   	; 0xa7a <Ring+0x140>

0000007c <AT>:
  7c:	41 54 0d 00                                         AT..

00000080 <ATE0>:
  80:	41 54 45 30 0d 00                                   ATE0..

00000086 <AT_IPR>:
  86:	41 54 2b 49 50 52 3d 39 36 30 30 0d 00              AT+IPR=9600..

00000093 <AT_CLCC>:
  93:	41 54 2b 43 4c 43 43 3d 30 0d 00                    AT+CLCC=0..

0000009e <AT_CMGF>:
  9e:	41 54 2b 43 4d 47 46 3d 31 0d 00                    AT+CMGF=1..

000000a9 <AT_CLIP>:
  a9:	41 54 2b 43 4c 49 50 3d 31 0d 00                    AT+CLIP=1..

000000b4 <AT_CPAS>:
  b4:	41 54 2b 43 50 41 53 0d 00                          AT+CPAS..

000000bd <AT_CREG>:
  bd:	41 54 2b 43 52 45 47 3f 0d 00                       AT+CREG?..

000000c7 <AT_CCALR>:
  c7:	41 54 2b 43 43 41 4c 52 3f 0d 00                    AT+CCALR?..

000000d2 <ATD>:
  d2:	41 54 44 00                                         ATD.

000000d6 <RING_END>:
  d6:	3b 0d 00                                            ;..

000000d9 <AT_CMGS>:
  d9:	41 54 2b 43 4d 47 53 3d 22 00                       AT+CMGS=".

000000e3 <AT_CMGS_2>:
  e3:	22 0d 00                                            "..

000000e6 <NO_220>:
  e6:	48 45 54 20 32 32 30 42 1a 00                       HET 220B..

000000f0 <RETURN_220>:
  f0:	45 43 54 62 20 32 32 30 42 1a 00                    ECTb 220B..

000000fb <ATH>:
  fb:	41 54 48 0d 00                                      ATH..

00000100 <AT_GSMBUSY_1>:
 100:	41 54 2b 47 53 4d 42 55 53 59 3d 31 0d 00           AT+GSMBUSY=1..

0000010e <AT_GSMBUSY_0>:
 10e:	41 54 2b 47 53 4d 42 55 53 59 3d 30 0d 00           AT+GSMBUSY=0..

0000011c <AT_OK>:
 11c:	41 54 0d 0d 0a 4f 4b 0d 0a 00                       AT...OK...

00000126 <ATE0_OK>:
 126:	41 54 45 30 0d 0d 0a 4f 4b 0d 0a 00                 ATE0...OK...

00000132 <_OK>:
 132:	0d 0a 4f 4b 0d 0a 00                                ..OK...

00000139 <CPAS_OK>:
 139:	0d 0a 2b 43 50 41 53 3a 20 30 0d 0a 0d 0a 4f 4b     ..+CPAS: 0....OK
 149:	0d 0a 00                                            ...

0000014c <CREG_OK>:
 14c:	0d 0a 2b 43 52 45 47 3a 20 30 2c 31 0d 0a 0d 0a     ..+CREG: 0,1....
 15c:	4f 4b 0d 0a 00                                      OK...

00000161 <CCALR_OK>:
 161:	0d 0a 2b 43 43 41 4c 52 3a 20 31 0d 0a 0d 0a 4f     ..+CCALR: 1....O
 171:	4b 0d 0a 00                                         K...

00000175 <RING>:
 175:	0d 0a 52 49 4e 47 0d 0a 0d 0a 2b 43 4c 49 50 3a     ..RING....+CLIP:
 185:	20 22 00                                             ".

00000188 <POINTER>:
 188:	3e 20 00                                            > .

0000018b <BUSY>:
 18b:	0d 0a 42 55 53 59 0d 0a 00                          ..BUSY...

00000194 <__ctors_end>:
 194:	11 24       	eor	r1, r1
 196:	1f be       	out	0x3f, r1	; 63
 198:	cf e5       	ldi	r28, 0x5F	; 95
 19a:	d4 e0       	ldi	r29, 0x04	; 4
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	cd bf       	out	0x3d, r28	; 61

000001a0 <__do_copy_data>:
 1a0:	10 e0       	ldi	r17, 0x00	; 0
 1a2:	a0 e6       	ldi	r26, 0x60	; 96
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	e0 eb       	ldi	r30, 0xB0	; 176
 1a8:	fc e0       	ldi	r31, 0x0C	; 12
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <__do_copy_data+0x10>
 1ac:	05 90       	lpm	r0, Z+
 1ae:	0d 92       	st	X+, r0
 1b0:	a4 36       	cpi	r26, 0x64	; 100
 1b2:	b1 07       	cpc	r27, r17
 1b4:	d9 f7       	brne	.-10     	; 0x1ac <__do_copy_data+0xc>

000001b6 <__do_clear_bss>:
 1b6:	10 e0       	ldi	r17, 0x00	; 0
 1b8:	a4 e6       	ldi	r26, 0x64	; 100
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
 1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
 1c0:	a2 3b       	cpi	r26, 0xB2	; 178
 1c2:	b1 07       	cpc	r27, r17
 1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>
 1c6:	95 d4       	rcall	.+2346   	; 0xaf2 <main>
 1c8:	71 c5       	rjmp	.+2786   	; 0xcac <_exit>

000001ca <__bad_interrupt>:
 1ca:	1a cf       	rjmp	.-460    	; 0x0 <__vectors>

000001cc <__vector_11>:
		}		
	}
}
//=====================================================================================================================================================
ISR (USART_RXC_vect)										// Прерывание по приходу байта в буффер UART
{
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	if (ppk_mode == PROG)									// Если прибор в режиме "ПРОГРАММИРОВАНИЕ" (записи телефонных номеров)
 1de:	80 91 71 00 	lds	r24, 0x0071
 1e2:	80 34       	cpi	r24, 0x40	; 64
 1e4:	b9 f4       	brne	.+46     	; 0x214 <__vector_11+0x48>
	{
		buffer[buffer_index] = UDR;							// Просто пишем данные (телефонный номер звонящего) в буффер		
 1e6:	e0 91 64 00 	lds	r30, 0x0064
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	8c b1       	in	r24, 0x0c	; 12
 1ee:	ec 55       	subi	r30, 0x5C	; 92
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	80 83       	st	Z, r24
		buffer_index++;										// Увеличиваем индекс
 1f4:	80 91 64 00 	lds	r24, 0x0064
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	80 93 64 00 	sts	0x0064, r24
		if (buffer_index == buffer_max-1)					// Если достигли конца буффера 
 1fe:	80 91 64 00 	lds	r24, 0x0064
 202:	8d 30       	cpi	r24, 0x0D	; 13
 204:	39 f5       	brne	.+78     	; 0x254 <__vector_11+0x88>
		{
			buffer[buffer_index] = '\0';					// Запишем признак конца строки
 206:	e0 91 64 00 	lds	r30, 0x0064
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	ec 55       	subi	r30, 0x5C	; 92
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	10 82       	st	Z, r1
 212:	1b c0       	rjmp	.+54     	; 0x24a <__vector_11+0x7e>
		}			
	}

	else													// Если прибор парсит приходящие команды, парсим строку посимвольно
	{
		if (UDR == pgm_read_byte(parsing_pointer))			// Сравниваем принятый байт с символом из строки  
 214:	8c b1       	in	r24, 0x0c	; 12
 216:	e0 91 a2 00 	lds	r30, 0x00A2
 21a:	f0 91 a3 00 	lds	r31, 0x00A3
 21e:	e4 91       	lpm	r30, Z+
 220:	8e 17       	cp	r24, r30
 222:	a9 f4       	brne	.+42     	; 0x24e <__vector_11+0x82>
		{													// Если идентичны		
			parsing_pointer++;								// Увеличиваем указатель, выбирая следующий символ строки
 224:	80 91 a2 00 	lds	r24, 0x00A2
 228:	90 91 a3 00 	lds	r25, 0x00A3
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	90 93 a3 00 	sts	0x00A3, r25
 232:	80 93 a2 00 	sts	0x00A2, r24
			if (pgm_read_byte(parsing_pointer) == '\0')		// Если следующий байт строки 0 (конец строки)
 236:	e0 91 a2 00 	lds	r30, 0x00A2
 23a:	f0 91 a3 00 	lds	r31, 0x00A3
 23e:	e4 91       	lpm	r30, Z+
 240:	ee 23       	and	r30, r30
 242:	41 f4       	brne	.+16     	; 0x254 <__vector_11+0x88>
			{			
				parsing_result = OK;						// Устанавливаем признак успешного окончания парсинга
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 60 00 	sts	0x0060, r24
				UCSRB &= ~(1<<RXCIE);						// Запрещаем прерывание по приходу байта - прием закончен			
 24a:	57 98       	cbi	0x0a, 7	; 10
 24c:	03 c0       	rjmp	.+6      	; 0x254 <__vector_11+0x88>
			}
		}

		else parsing_result = BAD;							// Если не идентичны - возвращаем признак ошибки парсинга. Не 0, чтобы сразу зафиксировать неудачный парсинг
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	80 93 60 00 	sts	0x0060, r24
	}
}
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <__vector_6>:
//=====================================================================================================================================================
ISR (TIMER1_COMPA_vect)										// Прерывание по совпадению Timer1
{
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	2f 93       	push	r18
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
	if (parsing_delay != 65535)								// Если подсчет времени парсинга не запрещен (записью максимального значения в счетчик)
 276:	80 91 67 00 	lds	r24, 0x0067
 27a:	90 91 68 00 	lds	r25, 0x0068
 27e:	2f ef       	ldi	r18, 0xFF	; 255
 280:	8f 3f       	cpi	r24, 0xFF	; 255
 282:	92 07       	cpc	r25, r18
 284:	b9 f0       	breq	.+46     	; 0x2b4 <__vector_6+0x4e>
	{		
		if (parsing_delay != 0) parsing_delay--;
 286:	80 91 67 00 	lds	r24, 0x0067
 28a:	90 91 68 00 	lds	r25, 0x0068
 28e:	00 97       	sbiw	r24, 0x00	; 0
 290:	41 f4       	brne	.+16     	; 0x2a2 <__vector_6+0x3c>
		else
		{
			if (parsing_result != OK)						// Время парсинга исчерпано, если не был установлен признак успешного парсинга
 292:	80 91 60 00 	lds	r24, 0x0060
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	21 f0       	breq	.+8      	; 0x2a2 <__vector_6+0x3c>
			{
				parsing_result = BAD;						// Устанавливаем признак проваленого парсинга
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	80 93 60 00 	sts	0x0060, r24
				UCSRB &= ~(1<<RXCIE);						// Запрещаем прерывание по приходу байта - чтобы не отвлекаться на всякую дрянь
 2a0:	57 98       	cbi	0x0a, 7	; 10
			}
			parsing_delay--;								// Запрещаем подсчет времени парсинга (записью максимального значения в счетчик)
 2a2:	80 91 67 00 	lds	r24, 0x0067
 2a6:	90 91 68 00 	lds	r25, 0x0068
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	90 93 68 00 	sts	0x0068, r25
 2b0:	80 93 67 00 	sts	0x0067, r24
			else LED_PORT ^= 1<<LED_WORK;
			led_delay--;									// Запрещаем отсчет времени мигания светодиодов (записью максимального значения в счетчик)
		}
	}
*/	
	if (debounce_delay != 0) debounce_delay--;				// Отсчет времени запрета опроса кнопки постановки/снятия после предыдущего нажатия
 2b4:	80 91 65 00 	lds	r24, 0x0065
 2b8:	90 91 66 00 	lds	r25, 0x0066
 2bc:	00 97       	sbiw	r24, 0x00	; 0
 2be:	49 f0       	breq	.+18     	; 0x2d2 <__vector_6+0x6c>
 2c0:	80 91 65 00 	lds	r24, 0x0065
 2c4:	90 91 66 00 	lds	r25, 0x0066
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	90 93 66 00 	sts	0x0066, r25
 2ce:	80 93 65 00 	sts	0x0065, r24
	if (exit_delay != 0) exit_delay--;						// Отсчет задержки вход/выход, если она есть
 2d2:	80 91 69 00 	lds	r24, 0x0069
 2d6:	90 91 6a 00 	lds	r25, 0x006A
 2da:	00 97       	sbiw	r24, 0x00	; 0
 2dc:	49 f0       	breq	.+18     	; 0x2f0 <__vector_6+0x8a>
 2de:	80 91 69 00 	lds	r24, 0x0069
 2e2:	90 91 6a 00 	lds	r25, 0x006A
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	90 93 6a 00 	sts	0x006A, r25
 2ec:	80 93 69 00 	sts	0x0069, r24
	if (siren_delay != 0) siren_delay--;					// Отсчет времени звучания сирены
 2f0:	80 91 6d 00 	lds	r24, 0x006D
 2f4:	90 91 6e 00 	lds	r25, 0x006E
 2f8:	00 97       	sbiw	r24, 0x00	; 0
 2fa:	49 f0       	breq	.+18     	; 0x30e <__vector_6+0xa8>
 2fc:	80 91 6d 00 	lds	r24, 0x006D
 300:	90 91 6e 00 	lds	r25, 0x006E
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	90 93 6e 00 	sts	0x006E, r25
 30a:	80 93 6d 00 	sts	0x006D, r24
	if (out_delay != 0) out_delay--;						// Отсчет времени активации выходов
 30e:	80 91 6f 00 	lds	r24, 0x006F
 312:	90 91 70 00 	lds	r25, 0x0070
 316:	00 97       	sbiw	r24, 0x00	; 0
 318:	49 f0       	breq	.+18     	; 0x32c <__vector_6+0xc6>
 31a:	80 91 6f 00 	lds	r24, 0x006F
 31e:	90 91 70 00 	lds	r25, 0x0070
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	90 93 70 00 	sts	0x0070, r25
 328:	80 93 6f 00 	sts	0x006F, r24
	if (led_delay != 0) led_delay--;						// Отсчет времени мигания светодиодов
 32c:	80 91 6b 00 	lds	r24, 0x006B
 330:	90 91 6c 00 	lds	r25, 0x006C
 334:	00 97       	sbiw	r24, 0x00	; 0
 336:	49 f0       	breq	.+18     	; 0x34a <__vector_6+0xe4>
 338:	80 91 6b 00 	lds	r24, 0x006B
 33c:	90 91 6c 00 	lds	r25, 0x006C
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	90 93 6c 00 	sts	0x006C, r25
 346:	80 93 6b 00 	sts	0x006B, r24
}
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <__vector_1>:
//=====================================================================================================================================================
ISR (INT0_vect)												// Прерывание по INT0
{
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
	if (ppk_mode == GUARD_ON)								// Если ППК в режиме "ПОД ОХРАНОЙ" (тривог до этого момента не было)
 368:	80 91 71 00 	lds	r24, 0x0071
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	51 f4       	brne	.+20     	; 0x384 <__vector_1+0x2a>
	{
		ppk_mode = DELAY_IN;								// Переводим ППК в состояние задержка на вход
 370:	80 e2       	ldi	r24, 0x20	; 32
 372:	80 93 71 00 	sts	0x0071, r24
		exit_delay = IN_DELAY;
 376:	80 e1       	ldi	r24, 0x10	; 16
 378:	97 e2       	ldi	r25, 0x27	; 39
 37a:	90 93 6a 00 	sts	0x006A, r25
 37e:	80 93 69 00 	sts	0x0069, r24
 382:	03 c0       	rjmp	.+6      	; 0x38a <__vector_1+0x30>
	} 
	else ppk_mode = ALARM_ACTIVE;							// Иначе сразу формируем очередную тревогу	
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	80 93 71 00 	sts	0x0071, r24
	GICR = 0<<INT1|0<<INT0;									// Запретим прерывания INT1 и INT0
 38a:	1b be       	out	0x3b, r1	; 59
}
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <__vector_2>:
//=====================================================================================================================================================
ISR (INT1_vect)												// Прерывание по INT1
{
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	8f 93       	push	r24
 3a6:	9f 93       	push	r25
	if (ppk_mode == GUARD_ON)								// Если ППК в режиме "ПОД ОХРАНОЙ" (тривог до этого момента не было)
 3a8:	80 91 71 00 	lds	r24, 0x0071
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	51 f4       	brne	.+20     	; 0x3c4 <__vector_2+0x2a>
	{
		ppk_mode = DELAY_IN;								// Переводим ППК в состояние задержка на вход
 3b0:	80 e2       	ldi	r24, 0x20	; 32
 3b2:	80 93 71 00 	sts	0x0071, r24
		exit_delay = IN_DELAY;
 3b6:	80 e1       	ldi	r24, 0x10	; 16
 3b8:	97 e2       	ldi	r25, 0x27	; 39
 3ba:	90 93 6a 00 	sts	0x006A, r25
 3be:	80 93 69 00 	sts	0x0069, r24
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <__vector_2+0x30>
	} 
	else ppk_mode = ALARM_ACTIVE;							// Иначе сразу формируем очередную тревогу
 3c4:	83 e0       	ldi	r24, 0x03	; 3
 3c6:	80 93 71 00 	sts	0x0071, r24
	GICR = 0<<INT1|0<<INT0;									// Запретим прерывания INT1 и INT0
 3ca:	1b be       	out	0x3b, r1	; 59
}
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <__vector_16>:
//=====================================================================================================================================================
ISR (ANA_COMP_vect)											// Прерывание компаратора, возникает при пропаже сети 220В
{
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	8f 93       	push	r24
 3e6:	9f 93       	push	r25
	flags |= 1<<sms_flag;									// Установим флаг необходимости отправки SMS
 3e8:	80 91 72 00 	lds	r24, 0x0072
 3ec:	81 60       	ori	r24, 0x01	; 1
 3ee:	80 93 72 00 	sts	0x0072, r24
	ACSR &= ~(1<<ACIE);										// Запретим прерывания от компаратора для однократной отправки SMS
 3f2:	43 98       	cbi	0x08, 3	; 8
	ACSR ^= 1<<ACIS0;										// Меняем условие возникновения прерывания - если был переход с 0 на 1, делаем переход с 1 на 0 и наоборот
 3f4:	88 b1       	in	r24, 0x08	; 8
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	89 27       	eor	r24, r25
 3fa:	88 b9       	out	0x08, r24	; 8
}
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

0000040a <CheckButton>:
	ActivateParsing(_OK,RING_WAIT_TIME);					// Активируем ожидание ответа
}
//=====================================================================================================================================================
// Функция проверки кнопки постановки/снятия
void CheckButton(unsigned int button_counter_delay)			// Опрашиваем кнопку постановки/снятия внутри функций, чтобы не нагружать таймер
{															// В качестве параметра передаеться количество пропусков циклов (внутри функции, из которой был запущен опрос кнопки) до фактического опроса кнопки
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	ec 01       	movw	r28, r24
	if (debounce_delay == 0)								// Если нет запрета на опрос кнопки постановки/снятия
 410:	80 91 65 00 	lds	r24, 0x0065
 414:	90 91 66 00 	lds	r25, 0x0066
 418:	00 97       	sbiw	r24, 0x00	; 0
 41a:	09 f0       	breq	.+2      	; 0x41e <CheckButton+0x14>
 41c:	45 c0       	rjmp	.+138    	; 0x4a8 <__stack+0x49>
	{
		check_button_counter--;							
 41e:	80 91 a0 00 	lds	r24, 0x00A0
 422:	90 91 a1 00 	lds	r25, 0x00A1
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	90 93 a1 00 	sts	0x00A1, r25
 42c:	80 93 a0 00 	sts	0x00A0, r24
		if (check_button_counter == 0)
 430:	00 97       	sbiw	r24, 0x00	; 0
 432:	d1 f5       	brne	.+116    	; 0x4a8 <__stack+0x49>
		{
			pin_state = BUTTON_PINS;						// Читаем состояние всего порта
 434:	86 b3       	in	r24, 0x16	; 22
 436:	80 93 73 00 	sts	0x0073, r24
			if (!(pin_state & (1<<BUTTON_PIN)))				// Если кнопка постановки/снятия нажата, активируем переход в другой режим
 43a:	85 fd       	sbrc	r24, 5
 43c:	31 c0       	rjmp	.+98     	; 0x4a0 <__stack+0x41>
			{
				if (ppk_mode == GUARD_OFF)					// Если текущий режим "СНЯТО С ОХРАНЫ"						
 43e:	80 91 71 00 	lds	r24, 0x0071
 442:	88 23       	and	r24, r24
 444:	89 f4       	brne	.+34     	; 0x468 <__stack+0x9>
				{
					ppk_mode = DELAY_OUT;					// Активируем режим "ЗАДЕРЖКА НА ВЫХОД"
 446:	80 e1       	ldi	r24, 0x10	; 16
 448:	80 93 71 00 	sts	0x0071, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 44c:	f8 94       	cli
					ATOMIC_BLOCK(ATOMIC_FORCEON)
					{
						eeprom_update_byte(&ppk_mode_save, DELAY_OUT);// В EEPROM пишем состояние "ПОД ОХРАНОЙ", чтобы при перезагрузке ППК во время задержки на выход получить охраняемый объект
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	60 e1       	ldi	r22, 0x10	; 16
 454:	1a d4       	rcall	.+2100   	; 0xc8a <__eeupd_byte_m8>
						exit_delay = OUT_DELAY;			// Назначим задержку на выход, внутри запрета прерываний, для атомарности
 456:	80 e1       	ldi	r24, 0x10	; 16
 458:	97 e2       	ldi	r25, 0x27	; 39
 45a:	90 93 6a 00 	sts	0x006A, r25
 45e:	80 93 69 00 	sts	0x0069, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 462:	78 94       	sei
					}
				#if defined (DEBUG)
					LED_PORT &= ~(1<<LED_WORK);				// ТОЛЬКО ДЛЯ ОТЛАДКИ
 464:	c3 98       	cbi	0x18, 3	; 24
 466:	16 c0       	rjmp	.+44     	; 0x494 <__stack+0x35>
				#endif
				}

				else										// Иначе текущий режим "ПОД ОХРАНОЙ" либо "ТРЕВОГА"
				{			
					ppk_mode = GUARD_OFF;					// Активируем переход в режим "СНЯТО С ОХРАНЫ"						
 468:	10 92 71 00 	sts	0x0071, r1
					GICR = 0<<INT1|0<<INT0;					// Запретим прерывания INT1 и INT0
 46c:	1b be       	out	0x3b, r1	; 59
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 46e:	f8 94       	cli
					ATOMIC_BLOCK(ATOMIC_FORCEON)
					{
						eeprom_update_byte(&ppk_mode_save, GUARD_OFF);// Обновим состояние ППК в EEPROM
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	09 d4       	rcall	.+2066   	; 0xc8a <__eeupd_byte_m8>
						siren_delay = 0;					// Убираем время звучания сирены, сама сирена выключиться в главном цикле
 478:	10 92 6e 00 	sts	0x006E, r1
 47c:	10 92 6d 00 	sts	0x006D, r1
						out_delay = 0;						// Убираем время активности выходов, сами выходы выключаться в главном цикле						
 480:	10 92 70 00 	sts	0x0070, r1
 484:	10 92 6f 00 	sts	0x006F, r1
						led_delay = 0;						// Прекращаем мигать светодиодом LED_WORK (ОХРАНА), если он мигал. Это проще чем допольнительная проверка						
 488:	10 92 6c 00 	sts	0x006C, r1
 48c:	10 92 6b 00 	sts	0x006B, r1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 490:	78 94       	sei
					}					
					#if defined (DEBUG)
						LED_PORT |= 1<<LED_WORK;			// ТОЛЬКО ДЛЯ ОТЛАДКИ
 492:	c3 9a       	sbi	0x18, 3	; 24
					#else					
						LED_PORT &= ~(1<<LED_WORK);			// Гасим светодиод ОХРАНА
					#endif
				}		

				debounce_delay = 1000;						// Запрещаем реакцию на нажатие кнопки постановки/снятия на 1 сек, для исключения влияния дребезга
 494:	88 ee       	ldi	r24, 0xE8	; 232
 496:	93 e0       	ldi	r25, 0x03	; 3
 498:	90 93 66 00 	sts	0x0066, r25
 49c:	80 93 65 00 	sts	0x0065, r24
			}

			check_button_counter = button_counter_delay;	// Обновляем счетчик опроса кнопки постановки/снятия
 4a0:	d0 93 a1 00 	sts	0x00A1, r29
 4a4:	c0 93 a0 00 	sts	0x00A0, r28
		}
	}
}
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <ActivateParsing>:
// Активации парсинга строки. Сам парсинг происходит в обработчике USART_RXC_vect. Контроль времени парсинга в обработчике TIMER1_COMPA_vect
void ActivateParsing(const char *string, unsigned int _parsing_delay)// На входе указатель на 1 символ строки, и время парсинга строки в мс
{
	unsigned char temp;

	parsing_result = IN_PROCESS;							// Начинаем парсинг с обнуления признака успешного парсинга/ошибки парсинга	
 4ae:	10 92 60 00 	sts	0x0060, r1
	parsing_pointer = string;								// Копируем указатель на 1 сивол строки, которую будем парсить в глобальную переменную 
 4b2:	90 93 a3 00 	sts	0x00A3, r25
 4b6:	80 93 a2 00 	sts	0x00A2, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4ba:	f8 94       	cli
	ATOMIC_BLOCK(ATOMIC_FORCEON){parsing_delay = _parsing_delay;}// Задаем максимальное время парсинга строки. Сам парсинг может закончиться и раньше
 4bc:	70 93 68 00 	sts	0x0068, r23
 4c0:	60 93 67 00 	sts	0x0067, r22
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 4c4:	78 94       	sei
	temp = UDR;												// Читаем приемник, чтобы сбросить флаг прерывания от всякого мусора, который там был до этого	
 4c6:	8c b1       	in	r24, 0x0c	; 12
	UCSRB |= 1<<RXCIE;										// Разрешаем прерывание по приходу байта - парсинг начался							
 4c8:	57 9a       	sbi	0x0a, 7	; 10
		}
	}
	if (parsing_result == 1) return OK;
	else return BAD;
*/
}
 4ca:	08 95       	ret

000004cc <Wait_RING>:
	}
}
//=====================================================================================================================================================
// Активация парсинга признака входящего звонка - "RING", либо переключение на прием номера звонящего абонета в случае входящего звонка
void Wait_RING(unsigned int _led_delay, unsigned char next_programming_mode)// В качестве параметров передаються: следующее состояние автомата программирования номеров дозвона и период мигания светодиода LED_PROG
{
 4cc:	1f 93       	push	r17
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	ec 01       	movw	r28, r24
 4d4:	16 2f       	mov	r17, r22
	if (parsing_result == BAD)								// Если входящего звонка нет
 4d6:	80 91 60 00 	lds	r24, 0x0060
 4da:	82 30       	cpi	r24, 0x02	; 2
 4dc:	29 f4       	brne	.+10     	; 0x4e8 <Wait_RING+0x1c>
	{
		ActivateParsing(RING,WAIT_INCOMING_CALL_TIME);		// Активируем ожидание входящего звонка в течении Х секунд, потом перезупеск
 4de:	85 e7       	ldi	r24, 0x75	; 117
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	6f ef       	ldi	r22, 0xFF	; 255
 4e4:	7f ef       	ldi	r23, 0xFF	; 255
 4e6:	e3 df       	rcall	.-58     	; 0x4ae <ActivateParsing>
	}
	if (parsing_result == OK)								// Если распознан входящий звонок
 4e8:	80 91 60 00 	lds	r24, 0x0060
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	31 f4       	brne	.+12     	; 0x4fc <Wait_RING+0x30>
	{							
		ppk_mode = PROG;									// Включаем режим записи тел.номера
 4f0:	80 e4       	ldi	r24, 0x40	; 64
 4f2:	80 93 71 00 	sts	0x0071, r24
		UCSRB |= 1<<RXCIE;									// Разрешаем прерывание по приходу байта - запись номера началась
 4f6:	57 9a       	sbi	0x0a, 7	; 10
		programming_mode = next_programming_mode;			// Переводим автомат в состояние ожидания окончания записи очередного номера абонента в приемный буффер					
 4f8:	10 93 9e 00 	sts	0x009E, r17
	}
	if (led_delay == 0)
 4fc:	80 91 6b 00 	lds	r24, 0x006B
 500:	90 91 6c 00 	lds	r25, 0x006C
 504:	00 97       	sbiw	r24, 0x00	; 0
 506:	51 f4       	brne	.+20     	; 0x51c <Wait_RING+0x50>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 508:	f8 94       	cli
	{
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			led_delay = _led_delay;							// Мигаем светодиодом LED_PROG с нужной частотой
 50a:	d0 93 6c 00 	sts	0x006C, r29
 50e:	c0 93 6b 00 	sts	0x006B, r28
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 512:	78 94       	sei
		}
		LED_PORT ^= 1<<LED_PROG;					
 514:	88 b3       	in	r24, 0x18	; 24
 516:	90 e1       	ldi	r25, 0x10	; 16
 518:	89 27       	eor	r24, r25
 51a:	88 bb       	out	0x18, r24	; 24
	}
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	08 95       	ret

00000524 <ReadNumbers>:
}
//=====================================================================================================================================================
// Чтение записанных телефонных номеров из EEPROM в ОЗУ
void ReadNumbers(void)
{
	eeprom_read_block(number1,ee_number1,14);				// Прочесть строку Number_1 из EEPROM, в строку Number1
 524:	84 e7       	ldi	r24, 0x74	; 116
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	4e e0       	ldi	r20, 0x0E	; 14
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	85 d3       	rcall	.+1802   	; 0xc3c <__eerd_block_m8>
	eeprom_read_block(number2,ee_number2,14);				// Прочесть строку Number_2 из EEPROM, в строку Number2
 532:	82 e8       	ldi	r24, 0x82	; 130
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	6f e0       	ldi	r22, 0x0F	; 15
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	4e e0       	ldi	r20, 0x0E	; 14
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	7e d3       	rcall	.+1788   	; 0xc3c <__eerd_block_m8>
	eeprom_read_block(number3,ee_number3,14);				// Прочесть строку Number_3 из EEPROM, в строку Number3
 540:	80 e9       	ldi	r24, 0x90	; 144
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	6d e1       	ldi	r22, 0x1D	; 29
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	4e e0       	ldi	r20, 0x0E	; 14
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	77 d3       	rcall	.+1774   	; 0xc3c <__eerd_block_m8>
}
 54e:	08 95       	ret

00000550 <SendByte>:
}
//=====================================================================================================================================================
// Отправка одного символа строки в UART
void SendByte(char byte)									// На входе байт
{
	while(!(UCSRA & (1<<UDRE)));							// Ждем флага готовности UART
 550:	5d 9b       	sbis	0x0b, 5	; 11
 552:	fe cf       	rjmp	.-4      	; 0x550 <SendByte>
	UDR=byte;												// Засылаем байт в UART
 554:	8c b9       	out	0x0c, r24	; 12
}
 556:	08 95       	ret

00000558 <SendStr>:
	}
}
//=====================================================================================================================================================
// Отправка строки из ОЗУ в UART
void SendStr(char *string)									// На входе указатель на символ строки
{
 558:	ef 92       	push	r14
 55a:	ff 92       	push	r15
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	e8 2e       	mov	r14, r24
 562:	e7 01       	movw	r28, r14
 564:	7e 01       	movw	r14, r28
 566:	f9 2e       	mov	r15, r25
 568:	e7 01       	movw	r28, r14
	while (*string != '\0')									// Пока байт строки не 0 (конец строки)
 56a:	01 c0       	rjmp	.+2      	; 0x56e <SendStr+0x16>
	{
		SendByte(*string++);								// Мы продолжаем слать строку, не забывая увеличивать указатель, выбирая следующий символ строки
 56c:	f1 df       	rcall	.-30     	; 0x550 <SendByte>
}
//=====================================================================================================================================================
// Отправка строки из ОЗУ в UART
void SendStr(char *string)									// На входе указатель на символ строки
{
	while (*string != '\0')									// Пока байт строки не 0 (конец строки)
 56e:	89 91       	ld	r24, Y+
 570:	88 23       	and	r24, r24
 572:	e1 f7       	brne	.-8      	; 0x56c <SendStr+0x14>
	{
		SendByte(*string++);								// Мы продолжаем слать строку, не забывая увеличивать указатель, выбирая следующий символ строки
	}
}
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	ff 90       	pop	r15
 57a:	ef 90       	pop	r14
 57c:	08 95       	ret

0000057e <SendStr_P>:
	eeprom_read_block(number3,ee_number3,14);				// Прочесть строку Number_3 из EEPROM, в строку Number3
}
//=====================================================================================================================================================
// Отправка строки из флеша в UART
void SendStr_P(const char *string)							// На входе указатель на символ строки
{
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	ec 01       	movw	r28, r24
	while (pgm_read_byte(string) != '\0')					// Пока байт строки не 0 (конец строки)
 584:	04 c0       	rjmp	.+8      	; 0x58e <SendStr_P+0x10>
	{
		SendByte(pgm_read_byte(string++));					// Мы продолжаем слать строку, не забывая увеличивать указатель, выбирая следующий символ строки
 586:	21 96       	adiw	r28, 0x01	; 1
 588:	fc 01       	movw	r30, r24
 58a:	84 91       	lpm	r24, Z+
 58c:	e1 df       	rcall	.-62     	; 0x550 <SendByte>
 58e:	ce 01       	movw	r24, r28
}
//=====================================================================================================================================================
// Отправка строки из флеша в UART
void SendStr_P(const char *string)							// На входе указатель на символ строки
{
	while (pgm_read_byte(string) != '\0')					// Пока байт строки не 0 (конец строки)
 590:	fe 01       	movw	r30, r28
 592:	24 91       	lpm	r18, Z+
 594:	22 23       	and	r18, r18
 596:	b9 f7       	brne	.-18     	; 0x586 <SendStr_P+0x8>
	{
		SendByte(pgm_read_byte(string++));					// Мы продолжаем слать строку, не забывая увеличивать указатель, выбирая следующий символ строки
	}
}
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <SaveNumber_2_RAM>:
	}
}
//=====================================================================================================================================================
// Сохранение номера звонящего абонента в ОЗУ
void SaveNumber_2_RAM(char *number, unsigned char next_programming_mode)// В качестве параметров передаються: указатель на 1 символ номера абонента и следующее состояние автомата программирования номеров дозвона
{
 59e:	df 93       	push	r29
 5a0:	cf 93       	push	r28
 5a2:	0f 92       	push	r0
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
	if (buffer_index == buffer_max-1)						// Если приемный буффер полный - приняли весь телефонный номер звонящего
 5a8:	20 91 64 00 	lds	r18, 0x0064
 5ac:	2d 30       	cpi	r18, 0x0D	; 13
 5ae:	31 f5       	brne	.+76     	; 0x5fc <SaveNumber_2_RAM+0x5e>
	{
		for	(buffer_index = 0; buffer_index != buffer_max-1; buffer_index ++)// Копирем номер звонящего из приемного буффера в строку numberX
 5b0:	10 92 64 00 	sts	0x0064, r1
 5b4:	11 c0       	rjmp	.+34     	; 0x5d8 <SaveNumber_2_RAM+0x3a>
		{
			number[buffer_index] = buffer[buffer_index];
 5b6:	30 91 64 00 	lds	r19, 0x0064
 5ba:	e0 91 64 00 	lds	r30, 0x0064
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	ec 55       	subi	r30, 0x5C	; 92
 5c2:	ff 4f       	sbci	r31, 0xFF	; 255
 5c4:	20 81       	ld	r18, Z
 5c6:	fc 01       	movw	r30, r24
 5c8:	e3 0f       	add	r30, r19
 5ca:	f1 1d       	adc	r31, r1
 5cc:	20 83       	st	Z, r18
// Сохранение номера звонящего абонента в ОЗУ
void SaveNumber_2_RAM(char *number, unsigned char next_programming_mode)// В качестве параметров передаються: указатель на 1 символ номера абонента и следующее состояние автомата программирования номеров дозвона
{
	if (buffer_index == buffer_max-1)						// Если приемный буффер полный - приняли весь телефонный номер звонящего
	{
		for	(buffer_index = 0; buffer_index != buffer_max-1; buffer_index ++)// Копирем номер звонящего из приемного буффера в строку numberX
 5ce:	20 91 64 00 	lds	r18, 0x0064
 5d2:	2f 5f       	subi	r18, 0xFF	; 255
 5d4:	20 93 64 00 	sts	0x0064, r18
 5d8:	20 91 64 00 	lds	r18, 0x0064
 5dc:	2d 30       	cpi	r18, 0x0D	; 13
 5de:	59 f7       	brne	.-42     	; 0x5b6 <SaveNumber_2_RAM+0x18>
		{
			number[buffer_index] = buffer[buffer_index];
		}
		SendStr_P(ATH);										// Отклоняем входящий вызов
 5e0:	8b ef       	ldi	r24, 0xFB	; 251
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	69 83       	std	Y+1, r22	; 0x01
 5e6:	cb df       	rcall	.-106    	; 0x57e <SendStr_P>
		buffer_index = 0;									// Обнуляем указатель массива, чтобы писАть в буффер сначала
 5e8:	10 92 64 00 	sts	0x0064, r1
		ppk_mode = GUARD_OFF;								// Включаем режим парсинга команд
 5ec:	10 92 71 00 	sts	0x0071, r1
		parsing_result = BAD;								// Активируем ожидание следующего звонка в следующем шаге конечного автомата
 5f0:	82 e0       	ldi	r24, 0x02	; 2
 5f2:	80 93 60 00 	sts	0x0060, r24
		programming_mode = next_programming_mode;			// Переводим автомат в состоние ожидания следующего звонка 
 5f6:	69 81       	ldd	r22, Y+1	; 0x01
 5f8:	60 93 9e 00 	sts	0x009E, r22
	}
}
 5fc:	0f 90       	pop	r0
 5fe:	cf 91       	pop	r28
 600:	df 91       	pop	r29
 602:	08 95       	ret

00000604 <Switch_Programming_mode>:
	}														// Ждем возвращения Джампера программирования в положение "РАБ"		
}
//=====================================================================================================================================================
// Конечный автомат записи номеров дозвона. В зависимости от значения programming_mode, ожидает входящего звонка, либо записывает номер звонящего в ОЗУ
void Switch_Programming_mode(void)													
{
 604:	1f 93       	push	r17
	parsing_result = BAD;
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	80 93 60 00 	sts	0x0060, r24
			{			
				SaveNumber_2_RAM(number3, 7);				// Сохраняем номер 3-го абонента в ОЗУ, если он принят
				_delay_ms(500);
				break;
			}
			default: programming_mode = 1; break;
 60c:	11 e0       	ldi	r17, 0x01	; 1
// Конечный автомат записи номеров дозвона. В зависимости от значения programming_mode, ожидает входящего звонка, либо записывает номер звонящего в ОЗУ
void Switch_Programming_mode(void)													
{
	parsing_result = BAD;

	while (programming_mode != 7)							// Пока не запишем 3 звонящих номера
 60e:	36 c0       	rjmp	.+108    	; 0x67c <Switch_Programming_mode+0x78>
	{
		wdt_reset();		
 610:	a8 95       	wdr
		switch (programming_mode)							// Гоняем конечный автомат записи номеров дозвона
 612:	83 30       	cpi	r24, 0x03	; 3
 614:	b1 f0       	breq	.+44     	; 0x642 <Switch_Programming_mode+0x3e>
 616:	84 30       	cpi	r24, 0x04	; 4
 618:	28 f4       	brcc	.+10     	; 0x624 <Switch_Programming_mode+0x20>
 61a:	81 30       	cpi	r24, 0x01	; 1
 61c:	51 f0       	breq	.+20     	; 0x632 <Switch_Programming_mode+0x2e>
 61e:	82 30       	cpi	r24, 0x02	; 2
 620:	59 f5       	brne	.+86     	; 0x678 <Switch_Programming_mode+0x74>
 622:	0b c0       	rjmp	.+22     	; 0x63a <Switch_Programming_mode+0x36>
 624:	85 30       	cpi	r24, 0x05	; 5
 626:	a9 f0       	breq	.+42     	; 0x652 <Switch_Programming_mode+0x4e>
 628:	85 30       	cpi	r24, 0x05	; 5
 62a:	78 f0       	brcs	.+30     	; 0x64a <Switch_Programming_mode+0x46>
 62c:	86 30       	cpi	r24, 0x06	; 6
 62e:	21 f5       	brne	.+72     	; 0x678 <Switch_Programming_mode+0x74>
 630:	15 c0       	rjmp	.+42     	; 0x65c <Switch_Programming_mode+0x58>
		{
			case 1:
			{
				Wait_RING(1000, 2);							// Мигаем светодиодом LED_PROG с частотой 1 раз в 2 секунды
 632:	88 ee       	ldi	r24, 0xE8	; 232
 634:	93 e0       	ldi	r25, 0x03	; 3
 636:	62 e0       	ldi	r22, 0x02	; 2
 638:	0f c0       	rjmp	.+30     	; 0x658 <Switch_Programming_mode+0x54>
				break;
			}
			case 2:
			{			
				SaveNumber_2_RAM(number1, 3);				// Сохраняем номер 1-го абонента в ОЗУ, если он принят
 63a:	84 e7       	ldi	r24, 0x74	; 116
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	63 e0       	ldi	r22, 0x03	; 3
 640:	10 c0       	rjmp	.+32     	; 0x662 <Switch_Programming_mode+0x5e>
				_delay_ms(500);
				break;
			}
			case 3:
			{
				Wait_RING(500, 4);							// Мигаем светодиодом LED_PROG с частотой 1 раз в секунду
 642:	84 ef       	ldi	r24, 0xF4	; 244
 644:	91 e0       	ldi	r25, 0x01	; 1
 646:	64 e0       	ldi	r22, 0x04	; 4
 648:	07 c0       	rjmp	.+14     	; 0x658 <Switch_Programming_mode+0x54>
				break;
			}
			case 4:
			{
				SaveNumber_2_RAM(number2, 5);				// Сохраняем номер 2-го абонента в ОЗУ, если он принят
 64a:	82 e8       	ldi	r24, 0x82	; 130
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	65 e0       	ldi	r22, 0x05	; 5
 650:	08 c0       	rjmp	.+16     	; 0x662 <Switch_Programming_mode+0x5e>
				_delay_ms(500);
				break;
			}
			case 5:
			{			
				Wait_RING(250, 6);							// Мигаем светодиодом LED_PROG с частотой 2 раза в секунду
 652:	8a ef       	ldi	r24, 0xFA	; 250
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	66 e0       	ldi	r22, 0x06	; 6
 658:	39 df       	rcall	.-398    	; 0x4cc <Wait_RING>
				break;
 65a:	10 c0       	rjmp	.+32     	; 0x67c <Switch_Programming_mode+0x78>
			}
			case 6:
			{			
				SaveNumber_2_RAM(number3, 7);				// Сохраняем номер 3-го абонента в ОЗУ, если он принят
 65c:	80 e9       	ldi	r24, 0x90	; 144
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	67 e0       	ldi	r22, 0x07	; 7
 662:	9d df       	rcall	.-198    	; 0x59e <SaveNumber_2_RAM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 664:	8f ef       	ldi	r24, 0xFF	; 255
 666:	94 e3       	ldi	r25, 0x34	; 52
 668:	ac e0       	ldi	r26, 0x0C	; 12
 66a:	81 50       	subi	r24, 0x01	; 1
 66c:	90 40       	sbci	r25, 0x00	; 0
 66e:	a0 40       	sbci	r26, 0x00	; 0
 670:	e1 f7       	brne	.-8      	; 0x66a <Switch_Programming_mode+0x66>
 672:	00 c0       	rjmp	.+0      	; 0x674 <Switch_Programming_mode+0x70>
 674:	00 00       	nop
 676:	02 c0       	rjmp	.+4      	; 0x67c <Switch_Programming_mode+0x78>
				_delay_ms(500);
				break;
			}
			default: programming_mode = 1; break;
 678:	10 93 9e 00 	sts	0x009E, r17
// Конечный автомат записи номеров дозвона. В зависимости от значения programming_mode, ожидает входящего звонка, либо записывает номер звонящего в ОЗУ
void Switch_Programming_mode(void)													
{
	parsing_result = BAD;

	while (programming_mode != 7)							// Пока не запишем 3 звонящих номера
 67c:	80 91 9e 00 	lds	r24, 0x009E
 680:	87 30       	cpi	r24, 0x07	; 7
 682:	31 f6       	brne	.-116    	; 0x610 <Switch_Programming_mode+0xc>
				break;
			}
			default: programming_mode = 1; break;
		}
	}
}
 684:	1f 91       	pop	r17
 686:	08 95       	ret

00000688 <SwitchSIMCOM_mode>:
}
//=====================================================================================================================================================
// Конечный автомат выбора отправляемой АТ-команды. В зависимости от значения simcom_mode, посылает определенную AT-команду
void SwitchSIMCOM_mode(void)														
{															// Если надо отправить SMS, изменяем выбраное ранее состояние автомата
	if ((flags & (1<<sms_flag))&&(simcom_init_mode == 1))	// Если установлен признак необходимости отправки SMS и модуль SIMCOM прошел полную инициализацию
 688:	80 91 72 00 	lds	r24, 0x0072
 68c:	80 ff       	sbrs	r24, 0
 68e:	0e c0       	rjmp	.+28     	; 0x6ac <SwitchSIMCOM_mode+0x24>
 690:	80 91 9f 00 	lds	r24, 0x009F
 694:	81 30       	cpi	r24, 0x01	; 1
 696:	51 f4       	brne	.+20     	; 0x6ac <SwitchSIMCOM_mode+0x24>
	{
		simcom_mode = 10;									// Переключим автомат отправки АТ-команд в режим отправки SMS
 698:	8a e0       	ldi	r24, 0x0A	; 10
 69a:	80 93 61 00 	sts	0x0061, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 69e:	f8 94       	cli
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			flags &= ~(1<<sms_flag);						//  Сразу запретим повторное переключение автомата в режим отправки SMS
 6a0:	80 91 72 00 	lds	r24, 0x0072
 6a4:	8e 7f       	andi	r24, 0xFE	; 254
 6a6:	80 93 72 00 	sts	0x0072, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 6aa:	78 94       	sei
		}
	}

	switch (simcom_mode)									// Состояние автомата определяеться ответами (верный/неверный) модуля SIMCOM
 6ac:	80 91 61 00 	lds	r24, 0x0061
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	8f 30       	cpi	r24, 0x0F	; 15
 6b6:	91 05       	cpc	r25, r1
 6b8:	08 f0       	brcs	.+2      	; 0x6bc <SwitchSIMCOM_mode+0x34>
 6ba:	68 c0       	rjmp	.+208    	; 0x78c <SwitchSIMCOM_mode+0x104>
 6bc:	8d 5e       	subi	r24, 0xED	; 237
 6be:	9f 4f       	sbci	r25, 0xFF	; 255
 6c0:	8f 93       	push	r24
 6c2:	9f 93       	push	r25
 6c4:	08 95       	ret
	{
		case 1:
		{
			SIMCOM_RESET_PORT &= ~(1<<SIMCOM_RESET_PIN);	// Садим SIMCOM_RESET на землю
 6c6:	94 98       	cbi	0x12, 4	; 18
 6c8:	8f e7       	ldi	r24, 0x7F	; 127
 6ca:	9f ea       	ldi	r25, 0xAF	; 175
 6cc:	a2 e0       	ldi	r26, 0x02	; 2
 6ce:	81 50       	subi	r24, 0x01	; 1
 6d0:	90 40       	sbci	r25, 0x00	; 0
 6d2:	a0 40       	sbci	r26, 0x00	; 0
 6d4:	e1 f7       	brne	.-8      	; 0x6ce <SwitchSIMCOM_mode+0x46>
 6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <SwitchSIMCOM_mode+0x50>
 6d8:	00 00       	nop
			_delay_ms(SIM800L_RESET_TIME);					// Задержка на Reset модуля SIMCOM
			SIMCOM_RESET_PORT |= 1<<SIMCOM_RESET_PIN;		// Отпускаем SIMCOM_RESET
 6da:	94 9a       	sbi	0x12, 4	; 18
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 6dc:	f8 94       	cli
			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				parsing_delay = WAIT_SIMCOM_READY;			// Воспользуемся таймером парсинга, все равно до перезапуска модяля по UART не используеться
 6de:	88 e2       	ldi	r24, 0x28	; 40
 6e0:	93 e2       	ldi	r25, 0x23	; 35
 6e2:	90 93 68 00 	sts	0x0068, r25
 6e6:	80 93 67 00 	sts	0x0067, r24
				simcom_mode = 2;
 6ea:	82 e0       	ldi	r24, 0x02	; 2
 6ec:	80 93 61 00 	sts	0x0061, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 6f0:	78 94       	sei
			}			
			break;
 6f2:	08 95       	ret
		}
		case 2:
		{
			SendStr_P(AT);									// Шлем АТ
 6f4:	8c e7       	ldi	r24, 0x7C	; 124
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	42 df       	rcall	.-380    	; 0x57e <SendStr_P>
			ActivateParsing(AT_OK,AT_WAIT_TIME);			// Активируем парсинг ответа в обработчике USART_RX_vect
 6fa:	8c e1       	ldi	r24, 0x1C	; 28
 6fc:	91 e0       	ldi	r25, 0x01	; 1
 6fe:	40 c0       	rjmp	.+128    	; 0x780 <SwitchSIMCOM_mode+0xf8>
			break;
		}
		case 3:
		{			
			SendStr_P(ATE0);								// Отключаем эхо
 700:	80 e8       	ldi	r24, 0x80	; 128
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	3c df       	rcall	.-392    	; 0x57e <SendStr_P>
			ActivateParsing(ATE0_OK,AT_WAIT_TIME);			// Активируем парсинг ответа в обработчике USART_RX_vect
 706:	86 e2       	ldi	r24, 0x26	; 38
 708:	91 e0       	ldi	r25, 0x01	; 1
 70a:	3a c0       	rjmp	.+116    	; 0x780 <SwitchSIMCOM_mode+0xf8>
			break;
		}
		case 4:
		{			
			SendStr_P(AT_IPR);								// Задаем скорость обмена с модулем
 70c:	86 e8       	ldi	r24, 0x86	; 134
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	34 c0       	rjmp	.+104    	; 0x77a <SwitchSIMCOM_mode+0xf2>
			ActivateParsing(_OK,AT_WAIT_TIME);				// Активируем парсинг ответа в обработчике USART_RX_vect
			break;
		}
		case 5:
		{
			SendStr_P(AT_CMGF);								// Задаем текстовый формат SMS
 712:	8e e9       	ldi	r24, 0x9E	; 158
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	31 c0       	rjmp	.+98     	; 0x77a <SwitchSIMCOM_mode+0xf2>
			ActivateParsing(_OK,AT_WAIT_TIME);				// Активируем парсинг ответа в обработчике USART_RX_vect			
			break;
		}
		case 6:
		{			
			SendStr_P(AT_GSMBUSY_1);						// Запрет всех входящих звонков
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	91 e0       	ldi	r25, 0x01	; 1
 71c:	2e c0       	rjmp	.+92     	; 0x77a <SwitchSIMCOM_mode+0xf2>
			ActivateParsing(_OK,AT_WAIT_TIME);				// Активируем парсинг ответа в обработчике USART_RX_vect
			break;
		}
		case 7:
		{			
			SendStr_P(AT_CPAS);								// Делаем запрос на состояние модуля SIMCOM
 71e:	84 eb       	ldi	r24, 0xB4	; 180
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	2d df       	rcall	.-422    	; 0x57e <SendStr_P>
			ActivateParsing(CPAS_OK,AT_WAIT_TIME);			// Активируем парсинг ответа в обработчике USART_RX_vect
 724:	89 e3       	ldi	r24, 0x39	; 57
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	2b c0       	rjmp	.+86     	; 0x780 <SwitchSIMCOM_mode+0xf8>
			break;
		}
		case 8:
		{			
			SendStr_P(AT_CREG);								// Делаем запрос на состояние регистрации в сети
 72a:	8d eb       	ldi	r24, 0xBD	; 189
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	27 df       	rcall	.-434    	; 0x57e <SendStr_P>
			ActivateParsing(CREG_OK,AT_WAIT_TIME);			// Активируем парсинг ответа в обработчике USART_RX_vect
 730:	8c e4       	ldi	r24, 0x4C	; 76
 732:	91 e0       	ldi	r25, 0x01	; 1
 734:	25 c0       	rjmp	.+74     	; 0x780 <SwitchSIMCOM_mode+0xf8>
			break;
		}
		case 9:
		{			
			SendStr_P(AT_CCALR);							// Делаем запрос на возможность совершать звонки
 736:	87 ec       	ldi	r24, 0xC7	; 199
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	21 df       	rcall	.-446    	; 0x57e <SendStr_P>
			ActivateParsing(CCALR_OK,AT_WAIT_TIME);			// Активируем парсинг ответа в обработчике USART_RX_vect
 73c:	81 e6       	ldi	r24, 0x61	; 97
 73e:	91 e0       	ldi	r25, 0x01	; 1
 740:	1f c0       	rjmp	.+62     	; 0x780 <SwitchSIMCOM_mode+0xf8>
			break;	
		}
		case 10:
		{			
			SendStr_P(AT_CMGS);								// Делаем запрос на отправку SMS о пропаже сети 220В						
 742:	89 ed       	ldi	r24, 0xD9	; 217
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	1b df       	rcall	.-458    	; 0x57e <SendStr_P>
			SendStr(Abonent_SMS);
 748:	84 e7       	ldi	r24, 0x74	; 116
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	05 df       	rcall	.-502    	; 0x558 <SendStr>
			SendStr_P(AT_CMGS_2);
 74e:	83 ee       	ldi	r24, 0xE3	; 227
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	15 df       	rcall	.-470    	; 0x57e <SendStr_P>
			ActivateParsing(POINTER,AT_WAIT_TIME);			// Активируем парсинг курсора приглашения для отправки тела SMS
 754:	88 e8       	ldi	r24, 0x88	; 136
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	13 c0       	rjmp	.+38     	; 0x780 <SwitchSIMCOM_mode+0xf8>
			break;
		}
		case 11:
		{
			if (!(ACSR & (1<<ACIS0)))						// Если следующие прерывание от компаратора ожидается по переходу выхода компаратора с 1 на 0 
 75a:	40 99       	sbic	0x08, 0	; 8
 75c:	03 c0       	rjmp	.+6      	; 0x764 <SwitchSIMCOM_mode+0xdc>
				SendStr_P(NO_220);							// Отправляем тело SMS о пропаже сети 220В
 75e:	86 ee       	ldi	r24, 0xE6	; 230
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0b c0       	rjmp	.+22     	; 0x77a <SwitchSIMCOM_mode+0xf2>
			else SendStr_P(RETURN_220);						// Иначе отправляем тело SMS о восстановлении сети 220В			
 764:	80 ef       	ldi	r24, 0xF0	; 240
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	08 c0       	rjmp	.+16     	; 0x77a <SwitchSIMCOM_mode+0xf2>
			ActivateParsing(_OK,AT_WAIT_TIME);				// Активируем парсинг отчета о успешной отправке SMS в обработчике USART_RX_vect
			break;
		}
		case 12:
		{
			SendStr_P(AT_CLCC);								// Переключаем на сокращенный ответ при входящем звонке
 76a:	83 e9       	ldi	r24, 0x93	; 147
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	05 c0       	rjmp	.+10     	; 0x77a <SwitchSIMCOM_mode+0xf2>
			ActivateParsing(_OK,AT_WAIT_TIME);				// Активируем парсинг ответа в обработчике USART_RX_vect
			break;
		}
		case 13:
		{
			SendStr_P(AT_CLIP);								// Включаем АОН
 770:	89 ea       	ldi	r24, 0xA9	; 169
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	02 c0       	rjmp	.+4      	; 0x77a <SwitchSIMCOM_mode+0xf2>
			ActivateParsing(_OK,AT_WAIT_TIME);				// Активируем парсинг ответа в обработчике USART_RX_vect
			break;
		}
		case 14:
		{
			SendStr_P(AT_GSMBUSY_0);						// Разрешение всех входящих звонков
 776:	8e e0       	ldi	r24, 0x0E	; 14
 778:	91 e0       	ldi	r25, 0x01	; 1
 77a:	01 df       	rcall	.-510    	; 0x57e <SendStr_P>
			ActivateParsing(_OK,AT_WAIT_TIME);				// Активируем парсинг ответа в обработчике USART_RX_vect
 77c:	82 e3       	ldi	r24, 0x32	; 50
 77e:	91 e0       	ldi	r25, 0x01	; 1
 780:	68 eb       	ldi	r22, 0xB8	; 184
 782:	7b e0       	ldi	r23, 0x0B	; 11
 784:	94 de       	rcall	.-728    	; 0x4ae <ActivateParsing>
			break;
 786:	08 95       	ret
		}
		case 15:
		{
			simcom_mode = 6;								// Выставляем автомат в состояние запрета всех входящих звонков, чтобы после процедуры программирования сразу запретить входящие звонки
 788:	86 e0       	ldi	r24, 0x06	; 6
 78a:	01 c0       	rjmp	.+2      	; 0x78e <SwitchSIMCOM_mode+0x106>
			break;
		}		
		default: simcom_mode = 1;
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	80 93 61 00 	sts	0x0061, r24
 792:	08 95       	ret

00000794 <CheckSIMCOM>:
}
//=====================================================================================================================================================
// Функция опроса SIMCOM. Содержит модуль анализа ответов. При неправильном ответе на 5 запросов подряд - перезапустит модуль SIMCOM и произведет его полную переинициализацию
void CheckSIMCOM(void)									
{
	wdt_reset();
 794:	a8 95       	wdr
								
	if ((parsing_result == OK)&&(parsing_delay == 65535))	// Если предыдущий парсинг закончился успешно, и истекло время парсинга (можно слать следующую АТ-команду)
 796:	20 91 60 00 	lds	r18, 0x0060
 79a:	21 30       	cpi	r18, 0x01	; 1
 79c:	09 f0       	breq	.+2      	; 0x7a0 <CheckSIMCOM+0xc>
 79e:	41 c0       	rjmp	.+130    	; 0x822 <CheckSIMCOM+0x8e>
 7a0:	80 91 67 00 	lds	r24, 0x0067
 7a4:	90 91 68 00 	lds	r25, 0x0068
 7a8:	3f ef       	ldi	r19, 0xFF	; 255
 7aa:	8f 3f       	cpi	r24, 0xFF	; 255
 7ac:	93 07       	cpc	r25, r19
 7ae:	c9 f5       	brne	.+114    	; 0x822 <CheckSIMCOM+0x8e>
	{
		parsing_fault = NUM_OF_ATTEMPT;						// Обновим счетчик ошибок парсинга
 7b0:	85 e0       	ldi	r24, 0x05	; 5
 7b2:	80 93 62 00 	sts	0x0062, r24
		switch (simcom_mode)								// Переключим состояние автомата SwitchSIMCOM_mode для отправки следующей команды
 7b6:	80 91 61 00 	lds	r24, 0x0061
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	01 97       	sbiw	r24, 0x01	; 1
 7be:	8e 30       	cpi	r24, 0x0E	; 14
 7c0:	91 05       	cpc	r25, r1
 7c2:	60 f5       	brcc	.+88     	; 0x81c <CheckSIMCOM+0x88>
 7c4:	8e 5d       	subi	r24, 0xDE	; 222
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	8f 93       	push	r24
 7ca:	9f 93       	push	r25
 7cc:	08 95       	ret
		{
			case 1: break;									// Если только зашли в автомат, перезапускаем модуль
			case 2: simcom_mode = 3; break;					// Если получили ответ на АТ, шлем ATE0
 7ce:	83 e0       	ldi	r24, 0x03	; 3
 7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <CheckSIMCOM+0x40>
			case 3: simcom_mode = 4; break;					// Если получили ответ на АТЕ0, шлем AT+IPR
 7d2:	84 e0       	ldi	r24, 0x04	; 4
 7d4:	80 93 61 00 	sts	0x0061, r24
 7d8:	23 c0       	rjmp	.+70     	; 0x820 <CheckSIMCOM+0x8c>
			case 4: simcom_mode = 5; break;					// Если получили ответ на AT+IPR, шлем AT+CMGF
 7da:	85 e0       	ldi	r24, 0x05	; 5
 7dc:	fb cf       	rjmp	.-10     	; 0x7d4 <CheckSIMCOM+0x40>
			case 5: simcom_mode = 6; break;					// Если получили ответ на AT+CMGF, шлем AT+GSMBUSY=1
 7de:	86 e0       	ldi	r24, 0x06	; 6
 7e0:	f9 cf       	rjmp	.-14     	; 0x7d4 <CheckSIMCOM+0x40>
			case 6: simcom_mode = 7; break;					// Если получили ответ на AT+GSMBUSY=1, шлем AT+CPAS
			case 7: simcom_mode = 8; break;					// Если получили ответ на AT+CPAS, шлем AT+CREG
 7e2:	88 e0       	ldi	r24, 0x08	; 8
 7e4:	f7 cf       	rjmp	.-18     	; 0x7d4 <CheckSIMCOM+0x40>
			case 8: simcom_mode = 9; break;					// Если получили ответ на AT+CREG, шлем AT+CCALR
 7e6:	89 e0       	ldi	r24, 0x09	; 9
 7e8:	f5 cf       	rjmp	.-22     	; 0x7d4 <CheckSIMCOM+0x40>
			case 9:											// Если получили ответ на AT+CCALR
			{
				simcom_init_mode = 1;						// Модуль SIMCOM прошел полную инициализацию и может совершать звонки и слать SMS
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	80 93 9f 00 	sts	0x009F, r24
				if (programming_mode == 1)					// Если ППК в режиме программирования, продолжаем спец. инициализацию
 7f0:	80 91 9e 00 	lds	r24, 0x009E
 7f4:	81 30       	cpi	r24, 0x01	; 1
 7f6:	39 f4       	brne	.+14     	; 0x806 <CheckSIMCOM+0x72>
					 simcom_mode = 12;						// Шлем AT+CLCC=0
 7f8:	8c e0       	ldi	r24, 0x0C	; 12
 7fa:	ec cf       	rjmp	.-40     	; 0x7d4 <CheckSIMCOM+0x40>
				else simcom_mode = 7;						// Иначе опять шлем AT+CPAS (и так по кругу гоняем состояния 7-8-9)
				break;
			}
			case 10: simcom_mode = 11; break;				// Если получили курсор приема тела SMS, отправляем тело SMS
 7fc:	8b e0       	ldi	r24, 0x0B	; 11
 7fe:	ea cf       	rjmp	.-44     	; 0x7d4 <CheckSIMCOM+0x40>
			case 11:										// Если успешно отправили SMS
			{
				ACSR |= 1<<ACI|1<<ACIE;						// Разрешим прерывания от компаратора для повторной отправки SMS о пропаже 220В	
 800:	88 b1       	in	r24, 0x08	; 8
 802:	88 61       	ori	r24, 0x18	; 24
 804:	88 b9       	out	0x08, r24	; 8
				simcom_mode = 7;							// Перелючаем автомат отправки АТ-команд на отправку 1-й команды циклического опроса модуля (AT+CPAS)
 806:	87 e0       	ldi	r24, 0x07	; 7
 808:	e5 cf       	rjmp	.-54     	; 0x7d4 <CheckSIMCOM+0x40>
				break;
			}
			case 12: simcom_mode = 13; break;				// Если получили ответ на AT+CLCC=0, шлем AT+CLIP
 80a:	8d e0       	ldi	r24, 0x0D	; 13
 80c:	e3 cf       	rjmp	.-58     	; 0x7d4 <CheckSIMCOM+0x40>
			case 13: simcom_mode = 14; break;				// Если получили ответ на AT+CLIP, шлем AT+GSMBUSY=0
 80e:	8e e0       	ldi	r24, 0x0E	; 14
 810:	e1 cf       	rjmp	.-62     	; 0x7d4 <CheckSIMCOM+0x40>
			case 14:										// Если получили ответ на AT+GSMBUSY=0
			{
				simcom_init_mode = 2;						// Модуль SIMCOM готов принимать и обрабатывать входящие звонки 
 812:	82 e0       	ldi	r24, 0x02	; 2
 814:	80 93 9f 00 	sts	0x009F, r24
				simcom_mode = 15;							// Ничего не шлем
 818:	8f e0       	ldi	r24, 0x0F	; 15
 81a:	dc cf       	rjmp	.-72     	; 0x7d4 <CheckSIMCOM+0x40>
				break;
			}
			default: simcom_mode = 1;
 81c:	20 93 61 00 	sts	0x0061, r18
		}
		SwitchSIMCOM_mode();								// Отправляем АТ-команду, конечный автомат сам выберет нужную		
 820:	33 df       	rcall	.-410    	; 0x688 <SwitchSIMCOM_mode>
	}

	if ((parsing_result == BAD)&&(parsing_delay == 65535))	// Если парсинг закончился неуспешно, и истекло время парсинга
 822:	80 91 60 00 	lds	r24, 0x0060
 826:	82 30       	cpi	r24, 0x02	; 2
 828:	21 f5       	brne	.+72     	; 0x872 <CheckSIMCOM+0xde>
 82a:	80 91 67 00 	lds	r24, 0x0067
 82e:	90 91 68 00 	lds	r25, 0x0068
 832:	2f ef       	ldi	r18, 0xFF	; 255
 834:	8f 3f       	cpi	r24, 0xFF	; 255
 836:	92 07       	cpc	r25, r18
 838:	e1 f4       	brne	.+56     	; 0x872 <CheckSIMCOM+0xde>
	{
		if ((simcom_mode == 10)||(simcom_mode == 11))		// И мы не получили курсор приглашения ввода тела SMS, либо ОК после отправки тела SMS
 83a:	80 91 61 00 	lds	r24, 0x0061
 83e:	8a 50       	subi	r24, 0x0A	; 10
 840:	82 30       	cpi	r24, 0x02	; 2
 842:	38 f4       	brcc	.+14     	; 0x852 <CheckSIMCOM+0xbe>
		{
			ACSR |= 1<<ACI|1<<ACIE;							// Отправка SMS о пропаже 220В не удалась. Повтор делать не будем, но разрешаем прерывания компаратора, возможно будут еще пропажи сети 220В и их можно будет передать
 844:	88 b1       	in	r24, 0x08	; 8
 846:	88 61       	ori	r24, 0x18	; 24
 848:	88 b9       	out	0x08, r24	; 8
			simcom_mode = 7;								// Перелючаем автомат отправки АТ-команд на отправку 1-й команды циклического опроса модуля (AT+CPAS)
 84a:	87 e0       	ldi	r24, 0x07	; 7
 84c:	80 93 61 00 	sts	0x0061, r24
 850:	0f c0       	rjmp	.+30     	; 0x870 <CheckSIMCOM+0xdc>
		}

		else
		{			
			parsing_fault--;
 852:	80 91 62 00 	lds	r24, 0x0062
 856:	81 50       	subi	r24, 0x01	; 1
 858:	80 93 62 00 	sts	0x0062, r24
			if (parsing_fault == 0)							// Если исчерпали попытки парсинга
 85c:	88 23       	and	r24, r24
 85e:	41 f4       	brne	.+16     	; 0x870 <CheckSIMCOM+0xdc>
			{
				simcom_init_mode = 0;						// Сбрасываем состояние инициализации модуля SIMCOM
 860:	10 92 9f 00 	sts	0x009F, r1
				simcom_mode = 1;							// Переводим автомат в начальный режим - делаем переинициализацию модуля SIMCOM
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	80 93 61 00 	sts	0x0061, r24
				parsing_fault = NUM_OF_ATTEMPT;				// Обновим счетчик ошибок парсинга
 86a:	85 e0       	ldi	r24, 0x05	; 5
 86c:	80 93 62 00 	sts	0x0062, r24
			}
		}
		SwitchSIMCOM_mode();								// Повторно отправляем предыдущую АТ-команду без предварительного переключения состояния автомата
 870:	0b df       	rcall	.-490    	; 0x688 <SwitchSIMCOM_mode>
 872:	08 95       	ret

00000874 <Programming>:
//=====================================================================================================================================================
// Программирование прибора
void Programming(void)
{
#if defined (DEBUG)
	LED_PORT &= ~(1<<LED_PROG);								// ТОЛЬКО ДЛЯ ОТЛАДКИ
 874:	c4 98       	cbi	0x18, 4	; 24
	SendStr_P(AT_GSMBUSY_1);								// Запрет всех входящих звонков
	wdt_reset();
	_delay_ms(1500);
	wdt_reset();
*/
	programming_mode = 1;
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	80 93 9e 00 	sts	0x009E, r24

	while (simcom_init_mode != 2)							// Пока модуль SIMCOM не настроится на прием входящих звонков
 87c:	01 c0       	rjmp	.+2      	; 0x880 <Programming+0xc>
	{
		CheckSIMCOM();										// Выполняем команды автомата
 87e:	8a df       	rcall	.-236    	; 0x794 <CheckSIMCOM>
	_delay_ms(1500);
	wdt_reset();
*/
	programming_mode = 1;

	while (simcom_init_mode != 2)							// Пока модуль SIMCOM не настроится на прием входящих звонков
 880:	80 91 9f 00 	lds	r24, 0x009F
 884:	82 30       	cpi	r24, 0x02	; 2
 886:	d9 f7       	brne	.-10     	; 0x87e <Programming+0xa>
	{
		CheckSIMCOM();										// Выполняем команды автомата
	}

	Switch_Programming_mode();								// Вызываем конечный автомат режима программирования
 888:	bd de       	rcall	.-646    	; 0x604 <Switch_Programming_mode>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 88a:	f8 94       	cli

	ATOMIC_BLOCK(ATOMIC_FORCEON)							// Если произошел выход из автомата, значит есть 3 номера в ОЗУ. Копируем их из ОЗУ в EEPROM
	{
		led_delay = 0;										// Прекратим мигание светодиода программирования (LED_PROG)		
 88c:	10 92 6c 00 	sts	0x006C, r1
 890:	10 92 6b 00 	sts	0x006B, r1
	#if defined (DEBUG)
		LED_PORT &= ~(1<<LED_PROG);							// ТОЛЬКО ДЛЯ ОТЛАДКИ
 894:	c4 98       	cbi	0x18, 4	; 24
	#else
		LED_PORT |= 1<<LED_PROG;							// Зажигаем светодиод программирования			
	#endif
		eeprom_update_block(number1,ee_number1,14);			
 896:	84 e7       	ldi	r24, 0x74	; 116
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	61 e0       	ldi	r22, 0x01	; 1
 89c:	70 e0       	ldi	r23, 0x00	; 0
 89e:	4e e0       	ldi	r20, 0x0E	; 14
 8a0:	50 e0       	ldi	r21, 0x00	; 0
 8a2:	e4 d1       	rcall	.+968    	; 0xc6c <__eeupd_block_m8>
		eeprom_update_block(number2,ee_number2,14);
 8a4:	82 e8       	ldi	r24, 0x82	; 130
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	6f e0       	ldi	r22, 0x0F	; 15
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	4e e0       	ldi	r20, 0x0E	; 14
 8ae:	50 e0       	ldi	r21, 0x00	; 0
 8b0:	dd d1       	rcall	.+954    	; 0xc6c <__eeupd_block_m8>
		eeprom_update_block(number3,ee_number3,14);
 8b2:	80 e9       	ldi	r24, 0x90	; 144
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	6d e1       	ldi	r22, 0x1D	; 29
 8b8:	70 e0       	ldi	r23, 0x00	; 0
 8ba:	4e e0       	ldi	r20, 0x0E	; 14
 8bc:	50 e0       	ldi	r21, 0x00	; 0
 8be:	d6 d1       	rcall	.+940    	; 0xc6c <__eeupd_block_m8>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 8c0:	78 94       	sei
	}
	#if defined (DEBUG)
		LED_PORT |= 1<<LED_PROG;							// ТОЛЬКО ДЛЯ ОТЛАДКИ
 8c2:	c4 9a       	sbi	0x18, 4	; 24
	#else
		LED_PORT &= ~(1<<LED_PROG);							// Гасим светодиод программирования
	#endif
	
	pin_state = JUMPER_PINS;								// Читаем состояние всего порта c Джампером программирования
 8c4:	80 b3       	in	r24, 0x10	; 16
 8c6:	80 93 73 00 	sts	0x0073, r24
	while(!(pin_state & (1<<JUMPER_PIN)))
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	80 72       	andi	r24, 0x20	; 32
 8ce:	90 70       	andi	r25, 0x00	; 0
 8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <Programming+0x60>
	{
		wdt_reset();
 8d2:	a8 95       	wdr
	#else
		LED_PORT &= ~(1<<LED_PROG);							// Гасим светодиод программирования
	#endif
	
	pin_state = JUMPER_PINS;								// Читаем состояние всего порта c Джампером программирования
	while(!(pin_state & (1<<JUMPER_PIN)))
 8d4:	00 97       	sbiw	r24, 0x00	; 0
 8d6:	e9 f3       	breq	.-6      	; 0x8d2 <Programming+0x5e>
	{
		wdt_reset();
	}														// Ждем возвращения Джампера программирования в положение "РАБ"		
}
 8d8:	08 95       	ret

000008da <Ring_on_Number>:
	}
}
//=====================================================================================================================================================
// Дозвон конкретному абоненту
void Ring_on_Number(char *number)							// В качестве параметра передаеться указатель на 1 символ номера абонента
{
 8da:	cf 93       	push	r28
 8dc:	df 93       	push	r29
 8de:	ec 01       	movw	r28, r24
	SendStr_P(ATD);											// Звоним абоненту
 8e0:	82 ed       	ldi	r24, 0xD2	; 210
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	4c de       	rcall	.-872    	; 0x57e <SendStr_P>
	SendStr(number);
 8e6:	ce 01       	movw	r24, r28
 8e8:	37 de       	rcall	.-914    	; 0x558 <SendStr>
	SendStr_P(RING_END);
 8ea:	86 ed       	ldi	r24, 0xD6	; 214
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	47 de       	rcall	.-882    	; 0x57e <SendStr_P>
	ActivateParsing(_OK,RING_WAIT_TIME);					// Активируем ожидание ответа
 8f0:	82 e3       	ldi	r24, 0x32	; 50
 8f2:	91 e0       	ldi	r25, 0x01	; 1
 8f4:	60 e2       	ldi	r22, 0x20	; 32
 8f6:	7e e4       	ldi	r23, 0x4E	; 78
 8f8:	da dd       	rcall	.-1100   	; 0x4ae <ActivateParsing>
}
 8fa:	df 91       	pop	r29
 8fc:	cf 91       	pop	r28
 8fe:	08 95       	ret

00000900 <Blink_LED_WORK>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 900:	f8 94       	cli
// Мигание светодиодом LED_WORK
void Blink_LED_WORK(void)
{
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		led_delay = 500;
 902:	84 ef       	ldi	r24, 0xF4	; 244
 904:	91 e0       	ldi	r25, 0x01	; 1
 906:	90 93 6c 00 	sts	0x006C, r25
 90a:	80 93 6b 00 	sts	0x006B, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 90e:	78 94       	sei
	}
	LED_PORT ^= 1<<LED_WORK;
 910:	88 b3       	in	r24, 0x18	; 24
 912:	98 e0       	ldi	r25, 0x08	; 8
 914:	89 27       	eor	r24, r25
 916:	88 bb       	out	0x18, r24	; 24
}
 918:	08 95       	ret

0000091a <Siren_Outs_OFF>:
//=====================================================================================================================================================
// Выключение сирены и выходов, если пришло время
void Siren_Outs_OFF(void) 
{
	if (siren_delay == 0)									// Если нет отсчета время звучания сирены
 91a:	80 91 6d 00 	lds	r24, 0x006D
 91e:	90 91 6e 00 	lds	r25, 0x006E
 922:	00 97       	sbiw	r24, 0x00	; 0
 924:	09 f4       	brne	.+2      	; 0x928 <Siren_Outs_OFF+0xe>
	{
	#if defined (DEBUG)
		OUT_PORT |= 1<<SIREN;								// ТОЛЬКО ДЛЯ ОТЛАДКИ
 926:	c0 9a       	sbi	0x18, 0	; 24
	#else
		OUT_PORT &= ~(1<<SIREN);							// Выключим сирену
	#endif
	}

	if (out_delay == 0)										// Если нет отсчета время активности выходов
 928:	80 91 6f 00 	lds	r24, 0x006F
 92c:	90 91 70 00 	lds	r25, 0x0070
 930:	00 97       	sbiw	r24, 0x00	; 0
 932:	11 f4       	brne	.+4      	; 0x938 <Siren_Outs_OFF+0x1e>
	{
	#if defined (DEBUG)
		OUT_PORT |= 1<<OUT_1;								// ТОЛЬКО ДЛЯ ОТЛАДКИ
 934:	c1 9a       	sbi	0x18, 1	; 24
	#else			
		OUT_PORT &= ~(1<<OUT_1);							// Выключим выходы OUT_1,			
	#endif
		OUT_PORT |= 1<<OUT_2;								// и OUT_2 (инверсная логика работы)
 936:	c2 9a       	sbi	0x18, 2	; 24
 938:	08 95       	ret

0000093a <Ring>:
	ACSR ^= 1<<ACIS0;										// Меняем условие возникновения прерывания - если был переход с 0 на 1, делаем переход с 1 на 0 и наоборот
}
//=====================================================================================================================================================
// Конечный автомат дозвона. В зависимости от значения ring_mode, осуществляет исходящий вызов, либо ожидает реакции абонента
void Ring(void)
{
 93a:	1f 93       	push	r17
	unsigned char ring_mode = 1;							// Состояние автомата изменяеться исключительно внутри него самого, поэтому переменная локальная

	while (parsing_result == IN_PROCESS){}					// Ждем окончания парсинга предыдущей команды
 93c:	80 91 60 00 	lds	r24, 0x0060
 940:	88 23       	and	r24, r24
 942:	e1 f3       	breq	.-8      	; 0x93c <Ring+0x2>
 944:	11 e0       	ldi	r17, 0x01	; 1

	while (ring_mode != 16)									// Пока автомат не перейдет в состояние "Попытки дозвона на все номера осуществлены"
	{
		wdt_reset();
 946:	a8 95       	wdr
		Siren_Outs_OFF();									// Проверяем сирену и выходы, если пора - выключаем
 948:	e8 df       	rcall	.-48     	; 0x91a <Siren_Outs_OFF>

		if (led_delay == 0) Blink_LED_WORK();				// Мигаем LED_WORK
 94a:	80 91 6b 00 	lds	r24, 0x006B
 94e:	90 91 6c 00 	lds	r25, 0x006C
 952:	00 97       	sbiw	r24, 0x00	; 0
 954:	09 f4       	brne	.+2      	; 0x958 <Ring+0x1e>
 956:	d4 df       	rcall	.-88     	; 0x900 <Blink_LED_WORK>

		CheckButton(10000);									// Проверяем кнопку постановки/снятия каждый 10000-й проход цикла дозвона по тревоге,
 958:	80 e1       	ldi	r24, 0x10	; 16
 95a:	97 e2       	ldi	r25, 0x27	; 39
 95c:	56 dd       	rcall	.-1364   	; 0x40a <CheckButton>
															// обязательно после мигания LED_WORK по тревоге, иначе получим инвертированиое состояние выхода после снятия с охраны
		if ((ppk_mode == GUARD_OFF)&&(ring_mode != 15))		// Если ППК был переведен в состояние "СНЯТО С ОХРАНЫ" и еще продолжаеться дозвон
 95e:	80 91 71 00 	lds	r24, 0x0071
 962:	88 23       	and	r24, r24
 964:	21 f4       	brne	.+8      	; 0x96e <Ring+0x34>
 966:	1f 30       	cpi	r17, 0x0F	; 15
 968:	09 f0       	breq	.+2      	; 0x96c <Ring+0x32>
 96a:	7e c0       	rjmp	.+252    	; 0xa68 <Ring+0x12e>
 96c:	86 c0       	rjmp	.+268    	; 0xa7a <Ring+0x140>
		{
			ring_mode = 14;									// Прекращаем дозвон
		}
						
		switch (ring_mode)									// Осуществляем дозвон на все номера
 96e:	81 2f       	mov	r24, r17
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	02 97       	sbiw	r24, 0x02	; 2
 974:	8e 30       	cpi	r24, 0x0E	; 14
 976:	91 05       	cpc	r25, r1
 978:	28 f4       	brcc	.+10     	; 0x984 <Ring+0x4a>
 97a:	80 5d       	subi	r24, 0xD0	; 208
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	8f 93       	push	r24
 980:	9f 93       	push	r25
 982:	08 95       	ret
		{
			case 1:
			{
				Ring_on_Number(number1);					// Звоним 1 абоненту				
 984:	84 e7       	ldi	r24, 0x74	; 116
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	a8 df       	rcall	.-176    	; 0x8da <Ring_on_Number>
				ring_mode = 2;								// Переводим автомат в состояние "Ожидание ответа модуля на дозвон 1 абоненту"
 98a:	12 e0       	ldi	r17, 0x02	; 2
				break;
 98c:	dc cf       	rjmp	.-72     	; 0x946 <Ring+0xc>
			}
			case 2:
			{
				if (parsing_result != IN_PROCESS)			// Если модуль начал не дозвон
 98e:	80 91 60 00 	lds	r24, 0x0060
 992:	88 23       	and	r24, r24
 994:	09 f4       	brne	.+2      	; 0x998 <Ring+0x5e>
 996:	3f c0       	rjmp	.+126    	; 0xa16 <Ring+0xdc>
				{
					ring_mode = 3;							// Просто положим трубку	
 998:	13 e0       	ldi	r17, 0x03	; 3
 99a:	3d c0       	rjmp	.+122    	; 0xa16 <Ring+0xdc>
				}
				break;
			}
			case 3:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
 99c:	80 91 60 00 	lds	r24, 0x0060
 9a0:	88 23       	and	r24, r24
 9a2:	89 f2       	breq	.-94     	; 0x946 <Ring+0xc>
				{
					SendStr_P(ATH);							// Ложим трубку					
 9a4:	8b ef       	ldi	r24, 0xFB	; 251
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	ea dd       	rcall	.-1068   	; 0x57e <SendStr_P>
					ActivateParsing(_OK,AT_WAIT_TIME);
 9aa:	82 e3       	ldi	r24, 0x32	; 50
 9ac:	91 e0       	ldi	r25, 0x01	; 1
 9ae:	68 eb       	ldi	r22, 0xB8	; 184
 9b0:	7b e0       	ldi	r23, 0x0B	; 11
 9b2:	7d dd       	rcall	.-1286   	; 0x4ae <ActivateParsing>
					ring_mode = 4;							// Переводим автомат в состояние "Ожидание отбоя вызова"
 9b4:	14 e0       	ldi	r17, 0x04	; 4
 9b6:	c7 cf       	rjmp	.-114    	; 0x946 <Ring+0xc>
				}
				break;
			}
			case 4:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
 9b8:	80 91 60 00 	lds	r24, 0x0060
 9bc:	88 23       	and	r24, r24
 9be:	09 f0       	breq	.+2      	; 0x9c2 <Ring+0x88>
 9c0:	62 c0       	rjmp	.+196    	; 0xa86 <Ring+0x14c>
 9c2:	c1 cf       	rjmp	.-126    	; 0x946 <Ring+0xc>
				break;
			}
//----------------------------------------------------------------------------------------------------------------------------------------------------
			case 5:
			{
				Ring_on_Number(number2);					// Звоним 2 абоненту				
 9c4:	82 e8       	ldi	r24, 0x82	; 130
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	88 df       	rcall	.-240    	; 0x8da <Ring_on_Number>
				ring_mode = 6;								// Переводим автомат в состояние "Ожидание ответа модуля на дозвон 2 абоненту"
 9ca:	16 e0       	ldi	r17, 0x06	; 6
				break;
 9cc:	bc cf       	rjmp	.-136    	; 0x946 <Ring+0xc>
			}
			case 6:
			{
				if (parsing_result != IN_PROCESS)			// Если модуль начал не дозвон
 9ce:	80 91 60 00 	lds	r24, 0x0060
 9d2:	88 23       	and	r24, r24
 9d4:	01 f1       	breq	.+64     	; 0xa16 <Ring+0xdc>
				{
					ring_mode = 7;							// Просто положим трубку	
 9d6:	17 e0       	ldi	r17, 0x07	; 7
 9d8:	1e c0       	rjmp	.+60     	; 0xa16 <Ring+0xdc>
				}
				break;
			}
			case 7:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
 9da:	80 91 60 00 	lds	r24, 0x0060
 9de:	88 23       	and	r24, r24
 9e0:	09 f4       	brne	.+2      	; 0x9e4 <Ring+0xaa>
 9e2:	b1 cf       	rjmp	.-158    	; 0x946 <Ring+0xc>
				{
					SendStr_P(ATH);							// Ложим трубку					
 9e4:	8b ef       	ldi	r24, 0xFB	; 251
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	ca dd       	rcall	.-1132   	; 0x57e <SendStr_P>
					ActivateParsing(_OK,AT_WAIT_TIME);
 9ea:	82 e3       	ldi	r24, 0x32	; 50
 9ec:	91 e0       	ldi	r25, 0x01	; 1
 9ee:	68 eb       	ldi	r22, 0xB8	; 184
 9f0:	7b e0       	ldi	r23, 0x0B	; 11
 9f2:	5d dd       	rcall	.-1350   	; 0x4ae <ActivateParsing>
					ring_mode = 8;							// Переводим автомат в состояние "Ожидание отбоя вызова"
 9f4:	18 e0       	ldi	r17, 0x08	; 8
 9f6:	a7 cf       	rjmp	.-178    	; 0x946 <Ring+0xc>
				}
				break;
			}
			case 8:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
 9f8:	80 91 60 00 	lds	r24, 0x0060
 9fc:	88 23       	and	r24, r24
 9fe:	09 f0       	breq	.+2      	; 0xa02 <Ring+0xc8>
 a00:	44 c0       	rjmp	.+136    	; 0xa8a <Ring+0x150>
 a02:	a1 cf       	rjmp	.-190    	; 0x946 <Ring+0xc>
				break;
			}		
//----------------------------------------------------------------------------------------------------------------------------------------------------
			case 9:
			{
				Ring_on_Number(number3);					// Звоним 3 абоненту				
 a04:	80 e9       	ldi	r24, 0x90	; 144
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	68 df       	rcall	.-304    	; 0x8da <Ring_on_Number>
				ring_mode = 10;								// Переводим автомат в состояние "Ожидание ответа модуля на дозвон 3 абоненту"
 a0a:	1a e0       	ldi	r17, 0x0A	; 10
				break;
 a0c:	9c cf       	rjmp	.-200    	; 0x946 <Ring+0xc>
			}
			case 10:
			{
				if (parsing_result != IN_PROCESS)			// Если модуль начал не дозвон
 a0e:	80 91 60 00 	lds	r24, 0x0060
 a12:	81 11       	cpse	r24, r1
				{
					ring_mode = 11;							// Просто положим трубку	
 a14:	1b e0       	ldi	r17, 0x0B	; 11
				}

				if (parsing_result == OK)					// А если начал дозвон (прислал OK)
 a16:	80 91 60 00 	lds	r24, 0x0060
 a1a:	81 30       	cpi	r24, 0x01	; 1
 a1c:	09 f0       	breq	.+2      	; 0xa20 <Ring+0xe6>
 a1e:	93 cf       	rjmp	.-218    	; 0x946 <Ring+0xc>
				{
					ActivateParsing(BUSY,RING_WAIT_TIME);	// Активируем парсинг ответа абонента
 a20:	8b e8       	ldi	r24, 0x8B	; 139
 a22:	91 e0       	ldi	r25, 0x01	; 1
 a24:	60 e2       	ldi	r22, 0x20	; 32
 a26:	7e e4       	ldi	r23, 0x4E	; 78
 a28:	42 dd       	rcall	.-1404   	; 0x4ae <ActivateParsing>
 a2a:	8d cf       	rjmp	.-230    	; 0x946 <Ring+0xc>
				}
				break;
			}
			case 11:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
 a2c:	80 91 60 00 	lds	r24, 0x0060
 a30:	88 23       	and	r24, r24
 a32:	09 f4       	brne	.+2      	; 0xa36 <Ring+0xfc>
 a34:	88 cf       	rjmp	.-240    	; 0x946 <Ring+0xc>
				{
					SendStr_P(ATH);							// Ложим трубку					
 a36:	8b ef       	ldi	r24, 0xFB	; 251
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	a1 dd       	rcall	.-1214   	; 0x57e <SendStr_P>
					ActivateParsing(_OK,AT_WAIT_TIME);
 a3c:	82 e3       	ldi	r24, 0x32	; 50
 a3e:	91 e0       	ldi	r25, 0x01	; 1
 a40:	68 eb       	ldi	r22, 0xB8	; 184
 a42:	7b e0       	ldi	r23, 0x0B	; 11
 a44:	34 dd       	rcall	.-1432   	; 0x4ae <ActivateParsing>
					ring_mode = 12;							// Переводим автомат в состояние "Ожидание отбоя вызова"
 a46:	1c e0       	ldi	r17, 0x0C	; 12
 a48:	7e cf       	rjmp	.-260    	; 0x946 <Ring+0xc>
				}
				break;
			}
			case 12:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
 a4a:	80 91 60 00 	lds	r24, 0x0060
 a4e:	88 23       	and	r24, r24
 a50:	f1 f4       	brne	.+60     	; 0xa8e <Ring+0x154>
 a52:	79 cf       	rjmp	.-270    	; 0x946 <Ring+0xc>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 a54:	f8 94       	cli
//----------------------------------------------------------------------------------------------------------------------------------------------------
			case 13:
			{
				ATOMIC_BLOCK(ATOMIC_FORCEON)
				{
					ppk_mode = ALARM_RING_COMPL;			// Все звонки осуществлены. Активируем режим ППК "ТРЕВОГА, ЗВОНКИ СОВЕРШЕНЫ"
 a56:	89 e0       	ldi	r24, 0x09	; 9
 a58:	80 93 71 00 	sts	0x0071, r24
					eeprom_update_byte(&ppk_mode_save, ALARM_RING_COMPL);// И обновляем резервную копию состояния ППК в EEPROM
 a5c:	80 e0       	ldi	r24, 0x00	; 0
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	69 e0       	ldi	r22, 0x09	; 9
 a62:	13 d1       	rcall	.+550    	; 0xc8a <__eeupd_byte_m8>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 a64:	78 94       	sei
				}
				ring_mode = 16;								// Переводим автомат в состояние "Попытки дозвона на все номера осуществлены"
				break;
 a66:	17 c0       	rjmp	.+46     	; 0xa96 <Ring+0x15c>
			}
//----------------------------------------------------------------------------------------------------------------------------------------------------
			case 14:
			{
				SendStr_P(ATH);
 a68:	8b ef       	ldi	r24, 0xFB	; 251
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	88 dd       	rcall	.-1264   	; 0x57e <SendStr_P>
				ActivateParsing(_OK,AT_WAIT_TIME);
 a6e:	82 e3       	ldi	r24, 0x32	; 50
 a70:	91 e0       	ldi	r25, 0x01	; 1
 a72:	68 eb       	ldi	r22, 0xB8	; 184
 a74:	7b e0       	ldi	r23, 0x0B	; 11
 a76:	1b dd       	rcall	.-1482   	; 0x4ae <ActivateParsing>
 a78:	0c c0       	rjmp	.+24     	; 0xa92 <Ring+0x158>
				ring_mode = 15;
				break;
			}
			case 15:
			{
				if (parsing_result != IN_PROCESS)
 a7a:	80 91 60 00 	lds	r24, 0x0060
 a7e:	88 23       	and	r24, r24
 a80:	41 f0       	breq	.+16     	; 0xa92 <Ring+0x158>
				{
				#if defined (DEBUG)
					LED_PORT |= 1<<LED_WORK;				// ТОЛЬКО ДЛЯ ОТЛАДКИ
 a82:	c3 9a       	sbi	0x18, 3	; 24
 a84:	08 c0       	rjmp	.+16     	; 0xa96 <Ring+0x15c>
			}
			case 4:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
				{
					ring_mode = 5;							// Переводим автомат в состояние "Звонок 2 абоненту"
 a86:	15 e0       	ldi	r17, 0x05	; 5
 a88:	5e cf       	rjmp	.-324    	; 0x946 <Ring+0xc>
			}
			case 8:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
				{
					ring_mode = 9;							// Переводим автомат в состояние "Звонок 3 абоненту"
 a8a:	19 e0       	ldi	r17, 0x09	; 9
 a8c:	5c cf       	rjmp	.-328    	; 0x946 <Ring+0xc>
			}
			case 12:
			{
				if (parsing_result != IN_PROCESS)			// Независимо от ответа модуля
				{
					ring_mode =13;							// Переводим автомат в состояние "Все звонки осуществлены"
 a8e:	1d e0       	ldi	r17, 0x0D	; 13
 a90:	5a cf       	rjmp	.-332    	; 0x946 <Ring+0xc>
				ring_mode = 15;
				break;
			}
			case 15:
			{
				if (parsing_result != IN_PROCESS)
 a92:	1f e0       	ldi	r17, 0x0F	; 15
 a94:	58 cf       	rjmp	.-336    	; 0x946 <Ring+0xc>
			}
			case 16: break;
			default: ring_mode = 16; break;
		}
	}
}
 a96:	1f 91       	pop	r17
 a98:	08 95       	ret

00000a9a <Init>:
//=====================================================================================================================================================
// Инициализация портов и периферии
void Init(void)
{
// Инициализация портов
	SIMCOM_RESET_DDR |= 1<<SIMCOM_RESET_PIN;				// SIMCOM_RESET на вывод
 a9a:	8c 9a       	sbi	0x11, 4	; 17
	DDRB |= 1<<LED_PROG|1<<LED_WORK|1<<OUT_2|1<<OUT_1|1<<SIREN;// Сирену, выходы, и светодиоды - на вывод
 a9c:	87 b3       	in	r24, 0x17	; 23
 a9e:	8f 61       	ori	r24, 0x1F	; 31
 aa0:	87 bb       	out	0x17, r24	; 23
	
#if defined (DEBUG)
	PORTD |= 1<<JUMPER_PIN|1<<DATCHIK_2|1<<DATCHIK_1;		// ТОЛЬКО ДЛЯ ОТЛАДКИ
 aa2:	82 b3       	in	r24, 0x12	; 18
 aa4:	8c 62       	ori	r24, 0x2C	; 44
 aa6:	82 bb       	out	0x12, r24	; 18
#else
	PORTD |= 1<<JUMPER_PIN|1<<DATCHIK_1;					// Включаем подтяжку для Джампера входа в режим программирования и DATCHIK_1 ( DATCHIK_2 не надо !!! )
#endif
	PORTB |= 1<<BUTTON_PIN|1<<OUT_2;						// Включаем подтяжку для Кнопки постановки/снятия, и активируем OUT_2 (выключиться при тревоге)
 aa8:	88 b3       	in	r24, 0x18	; 24
 aaa:	84 62       	ori	r24, 0x24	; 36
 aac:	88 bb       	out	0x18, r24	; 24

#if defined (DEBUG)
	LED_PORT |= 1<<LED_WORK|1<<LED_PROG;					// ТОЛЬКО ДЛЯ ОТЛАДКИ
 aae:	88 b3       	in	r24, 0x18	; 24
 ab0:	88 61       	ori	r24, 0x18	; 24
 ab2:	88 bb       	out	0x18, r24	; 24
#else
	LED_PORT &= ~(1<<LED_WORK|1<<LED_PROG);					// Выключим светодиоды
#endif

// Инициализация UART
	UBRRL = LO(bauddivider);
 ab4:	83 e3       	ldi	r24, 0x33	; 51
 ab6:	89 b9       	out	0x09, r24	; 9
	UBRRH = HI(bauddivider);
 ab8:	10 bc       	out	0x20, r1	; 32
	UCSRA = 0;
 aba:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0<<RXCIE|0<<TXCIE|0<<UDRIE|1<<RXEN|1<<TXEN;		// Прерывание UDRIE сразу никогда не разрешаем, иначе контроллер сразу входит в это прерывание
 abc:	88 e1       	ldi	r24, 0x18	; 24
 abe:	8a b9       	out	0x0a, r24	; 10

#if defined (__AVR_ATmega8__)
	UCSRC = 1<<URSEL|1<<UCSZ1|1<<UCSZ0;
 ac0:	86 e8       	ldi	r24, 0x86	; 134
 ac2:	80 bd       	out	0x20, r24	; 32

// Инициализация Таймеров
#if defined (__AVR_ATmega8__)
// Предделитель подбираеться экспериментально, для достижения периода прерывания Timer1 каждую мс
															// Везде вкл. режим прерывания Timer1 по совпадению (1<<WGM12)
	TCCR1B = 1<<WGM12|0<<CS12|0<<CS11|1<<CS10;				// Запуск таймера без предделителя
 ac4:	89 e0       	ldi	r24, 0x09	; 9
 ac6:	8e bd       	out	0x2e, r24	; 46
//	TCCR1B = 1<<WGM12|0<<CS12|1<<CS11|0<<CS10;				// Запуск таймера с предделителем 8
//	TCCR1B = 1<<WGM12|0<<CS12|1<<CS11|1<<CS10;				// Запуск таймера с предделителем 64
//	TCCR1B = 1<<WGM12|1<<CS12|0<<CS11|0<<CS10;				// Запуск таймера с предделителем 256
//	TCCR1B = 1<<WGM12|1<<CS12|0<<CS11|1<<CS10;				// Запуск таймера с предделителем 1024				
	OCR1A = 7999;											// Значение подбираеться экспериментально, для достижения периода прерывания Timer1 каждую мс
 ac8:	8f e3       	ldi	r24, 0x3F	; 63
 aca:	9f e1       	ldi	r25, 0x1F	; 31
 acc:	9b bd       	out	0x2b, r25	; 43
 ace:	8a bd       	out	0x2a, r24	; 42
	TIMSK = 1<<OCIE1A;										// Разрешаем прерывание по совпадению значения OCR1A с заданым ранее
 ad0:	80 e1       	ldi	r24, 0x10	; 16
 ad2:	89 bf       	out	0x39, r24	; 57
	TIFR = 1<<OCF1A;										// Сбросим флаг, чтобы прерывание не выскочило сразу
 ad4:	88 bf       	out	0x38, r24	; 56
	TIMSK = 1<<OCIE0A;										// Разрешаем прерывание по совпадению значения OCR0A с заданым ранее
#endif

// Настроим внешние прерывания (DATCHIK_1, DATCHIK_2)
#if defined (DEBUG)
	MCUCR |= 1<<ISC11|1<<ISC01;								// ТОЛЬКО ДЛЯ ОТЛАДКИ
 ad6:	85 b7       	in	r24, 0x35	; 53
 ad8:	8a 60       	ori	r24, 0x0A	; 10
 ada:	85 bf       	out	0x35, r24	; 53
#else														
	MCUCR |= 1<<ISC11|1<<ISC10|1<<ISC01;					// INT1 - прерывание по переднему фронту (DATCHIK_2), INT0 - прерывание по спаду (DATCHIK_1)				
#endif

// Настроим Аналоговый компаратор
	if (!(pin_state & (1<<PD7)))							// Если на момент инициализации на пине низкий уровень, значит нет сети 220В,				
 adc:	80 91 73 00 	lds	r24, 0x0073
 ae0:	87 fd       	sbrc	r24, 7
 ae2:	03 c0       	rjmp	.+6      	; 0xaea <Init+0x50>
	ACSR |= 1<<ACBG|1<<ACIE|1<<ACIS1|1<<ACIS0;				// поэтому подключаем внутренний ИОН, разрешаем прерывание от компаратора, условие возникновения прерывания - переход выхода компаратора с 0 на 1.
 ae4:	88 b1       	in	r24, 0x08	; 8
 ae6:	8b 64       	ori	r24, 0x4B	; 75
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <Init+0x54>
	else ACSR |= 1<<ACBG|1<<ACIE|1<<ACIS1;					// иначе есть сеть 220В, поэтому подключаем внутренний ИОН, разрешаем прерывание от компаратора, условие возникновения прерывания - переход выхода компаратора с 1 на 0.
 aea:	88 b1       	in	r24, 0x08	; 8
 aec:	8a 64       	ori	r24, 0x4A	; 74
 aee:	88 b9       	out	0x08, r24	; 8
 af0:	08 95       	ret

00000af2 <main>:
void 	SaveNumber_2_RAM(char *number, unsigned char next_programming_mode);
void	Siren_Outs_OFF(void);
void	Blink_LED_WORK(void);
//=====================================================================================================================================================
int main(void)
{
 af2:	ef 92       	push	r14
 af4:	ff 92       	push	r15
 af6:	0f 93       	push	r16
 af8:	1f 93       	push	r17
 afa:	cf 93       	push	r28
 afc:	df 93       	push	r29
	Init();													// Инициализация портов и периферии
 afe:	cd df       	rcall	.-102    	; 0xa9a <Init>
	ppk_mode = eeprom_read_byte(&ppk_mode_save);			// Восстанавливаем состояние ППК из EEPROM до разрешения прерваний, для атомарности
 b00:	80 e0       	ldi	r24, 0x00	; 0
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	ab d0       	rcall	.+342    	; 0xc5c <__eerd_byte_m8>
 b06:	80 93 71 00 	sts	0x0071, r24
	sei();
 b0a:	78 94       	sei
	wdt_enable(WDTO_2S);									// Включаем сторожевой таймер со сбросом через 2 секунды
 b0c:	2f e0       	ldi	r18, 0x0F	; 15
 b0e:	88 e1       	ldi	r24, 0x18	; 24
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	0f b6       	in	r0, 0x3f	; 63
 b14:	f8 94       	cli
 b16:	a8 95       	wdr
 b18:	81 bd       	out	0x21, r24	; 33
 b1a:	0f be       	out	0x3f, r0	; 63
 b1c:	21 bd       	out	0x21, r18	; 33

	if (ppk_mode == GUARD_OFF)								// Если ППК снят с охраны								
 b1e:	80 91 71 00 	lds	r24, 0x0071
 b22:	88 23       	and	r24, r24
 b24:	29 f4       	brne	.+10     	; 0xb30 <main+0x3e>
	{
		pin_state = JUMPER_PINS;							// Читаем состояние всего порта c Джампером программирования
 b26:	80 b3       	in	r24, 0x10	; 16
 b28:	80 93 73 00 	sts	0x0073, r24
		if (!(pin_state & (1<<JUMPER_PIN))) Programming();	// Если Джампер программирования в положении ПРОГ (вывод JUMPER_PIN на земле), переходим в режим "ПРОГРАММИРОВАНИЕ"
 b2c:	85 ff       	sbrs	r24, 5
 b2e:	a2 de       	rcall	.-700    	; 0x874 <Programming>
	}
	programming_mode = 0;
 b30:	10 92 9e 00 	sts	0x009E, r1

	wdt_reset();
 b34:	a8 95       	wdr
	ReadNumbers();											// Читаем записанные телефонные номера из EEPROM в ОЗУ
 b36:	f6 dc       	rcall	.-1556   	; 0x524 <ReadNumbers>

	if (ppk_mode != GUARD_OFF)								// Если НЕ в режиме "СНЯТО С ОХРАНЫ"
 b38:	80 91 71 00 	lds	r24, 0x0071
 b3c:	88 23       	and	r24, r24
 b3e:	21 f0       	breq	.+8      	; 0xb48 <main+0x56>
	{
		GIFR = 1<<INTF1|1<<INTF0;							// Сбросим флаги возможно возникавших ранее внешних прерываний
 b40:	80 ec       	ldi	r24, 0xC0	; 192
 b42:	8a bf       	out	0x3a, r24	; 58
		GICR = 1<<INT1|1<<INT0;								// Разрешим прерывания INT1 и INT0
 b44:	8b bf       	out	0x3b, r24	; 59
	#if defined (DEBUG)
		LED_PORT &= ~(1<<LED_WORK);							// ТОЛЬКО ДЛЯ ОТЛАДКИ
 b46:	c3 98       	cbi	0x18, 3	; 24
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if ((ppk_mode == DELAY_IN)&&(exit_delay == 0))	// Если ППК находиться в состоянии "ЗАДЕРЖКА НА ВХОД" и задержка истекла
		{
			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				ppk_mode = ALARM_ACTIVE;					// Активируем режим "ТРЕВОГА АКТИВНА"
 b48:	93 e0       	ldi	r25, 0x03	; 3
 b4a:	e9 2e       	mov	r14, r25
			OUT_PORT &= ~(1<<OUT_2);						// и OUT_2 (инверсная логика работы)
		#endif

			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				siren_delay = SIREN_TIME;					// Задаем время звучания сирены
 b4c:	c0 e1       	ldi	r28, 0x10	; 16
 b4e:	d7 e2       	ldi	r29, 0x27	; 39
				out_delay = OUT_TIME;						// Задаем время активности выходов
				ppk_mode = ALARM_SIREN_COMPL;				// Сирена была включена на нужное время, меняем состояние ППК
 b50:	85 e0       	ldi	r24, 0x05	; 5
 b52:	f8 2e       	mov	r15, r24
				eeprom_update_byte(&ppk_mode_save, ALARM_SIREN_COMPL);// Обновляем состояние ППК в EEPROM
			}
			GIFR = 1<<INTF1|1<<INTF0;						// Сбросим флаги возникавших ранее прерываний
 b54:	10 ec       	ldi	r17, 0xC0	; 192
			Blink_LED_WORK();								// Мигаем LED_WORK
		}
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if ((ppk_mode == DELAY_OUT)&&(exit_delay == 0))	// Если ППК находиться в состоянии "ЗАДЕРЖКА НА ВЫХОД" и задержка истекла
		{
				ppk_mode = GUARD_ON;						// Активируем режим "ПОД ОХРАНОЙ"
 b56:	01 e0       	ldi	r16, 0x01	; 1

//=====================================================================================================================================================
// Главный цикл
	while (1)
	{
		CheckButton(5000);									// Проверяем кнопку постановки/снятия каждый 5000-й проход главного цикла
 b58:	88 e8       	ldi	r24, 0x88	; 136
 b5a:	93 e1       	ldi	r25, 0x13	; 19
 b5c:	56 dc       	rcall	.-1876   	; 0x40a <CheckButton>
		CheckSIMCOM();										// Проверяем состояние модуля, регистрацию в сети, и прочее
 b5e:	1a de       	rcall	.-972    	; 0x794 <CheckSIMCOM>
		Siren_Outs_OFF();									// Проверяем сирену и выходы, если пора - выключаем
 b60:	dc de       	rcall	.-584    	; 0x91a <Siren_Outs_OFF>
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if ((ppk_mode == DELAY_IN)&&(exit_delay == 0))	// Если ППК находиться в состоянии "ЗАДЕРЖКА НА ВХОД" и задержка истекла
 b62:	80 91 71 00 	lds	r24, 0x0071
 b66:	80 32       	cpi	r24, 0x20	; 32
 b68:	71 f4       	brne	.+28     	; 0xb86 <main+0x94>
 b6a:	80 91 69 00 	lds	r24, 0x0069
 b6e:	90 91 6a 00 	lds	r25, 0x006A
 b72:	00 97       	sbiw	r24, 0x00	; 0
 b74:	41 f4       	brne	.+16     	; 0xb86 <main+0x94>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 b76:	f8 94       	cli
		{
			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				ppk_mode = ALARM_ACTIVE;					// Активируем режим "ТРЕВОГА АКТИВНА"
 b78:	e0 92 71 00 	sts	0x0071, r14
				eeprom_update_byte(&ppk_mode_save, ALARM_ACTIVE);// Обновляем состояние ППК в EEPROM
 b7c:	80 e0       	ldi	r24, 0x00	; 0
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	63 e0       	ldi	r22, 0x03	; 3
 b82:	83 d0       	rcall	.+262    	; 0xc8a <__eeupd_byte_m8>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 b84:	78 94       	sei
			}
		}
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if (ppk_mode == ALARM_ACTIVE)						// Если возникла тревога
 b86:	80 91 71 00 	lds	r24, 0x0071
 b8a:	83 30       	cpi	r24, 0x03	; 3
 b8c:	a9 f4       	brne	.+42     	; 0xbb8 <main+0xc6>
		{
		#if defined (DEBUG)
			OUT_PORT &= ~(1<<SIREN|1<<OUT_2|1<<OUT_1);		// ТОЛЬКО ДЛЯ ОТЛАДКИ
 b8e:	88 b3       	in	r24, 0x18	; 24
 b90:	88 7f       	andi	r24, 0xF8	; 248
 b92:	88 bb       	out	0x18, r24	; 24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 b94:	f8 94       	cli
			OUT_PORT &= ~(1<<OUT_2);						// и OUT_2 (инверсная логика работы)
		#endif

			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				siren_delay = SIREN_TIME;					// Задаем время звучания сирены
 b96:	d0 93 6e 00 	sts	0x006E, r29
 b9a:	c0 93 6d 00 	sts	0x006D, r28
				out_delay = OUT_TIME;						// Задаем время активности выходов
 b9e:	d0 93 70 00 	sts	0x0070, r29
 ba2:	c0 93 6f 00 	sts	0x006F, r28
				ppk_mode = ALARM_SIREN_COMPL;				// Сирена была включена на нужное время, меняем состояние ППК
 ba6:	f0 92 71 00 	sts	0x0071, r15
				eeprom_update_byte(&ppk_mode_save, ALARM_SIREN_COMPL);// Обновляем состояние ППК в EEPROM
 baa:	80 e0       	ldi	r24, 0x00	; 0
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	65 e0       	ldi	r22, 0x05	; 5
 bb0:	6c d0       	rcall	.+216    	; 0xc8a <__eeupd_byte_m8>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 bb2:	78 94       	sei
			}
			GIFR = 1<<INTF1|1<<INTF0;						// Сбросим флаги возникавших ранее прерываний
 bb4:	1a bf       	out	0x3a, r17	; 58
			GICR = 1<<INT1|1<<INT0;							// Разрешим прерывания INT1 и INT0				
 bb6:	1b bf       	out	0x3b, r17	; 59
		}
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if ((ppk_mode == ALARM_SIREN_COMPL)&&(simcom_init_mode == 1))// Если была включена сирена, и модуль SIMCOM находиться в рабочем режиме, начинаем звонить
 bb8:	80 91 71 00 	lds	r24, 0x0071
 bbc:	85 30       	cpi	r24, 0x05	; 5
 bbe:	29 f4       	brne	.+10     	; 0xbca <main+0xd8>
 bc0:	80 91 9f 00 	lds	r24, 0x009F
 bc4:	81 30       	cpi	r24, 0x01	; 1
 bc6:	09 f4       	brne	.+2      	; 0xbca <main+0xd8>
		{
			Ring();											// Звоним
 bc8:	b8 de       	rcall	.-656    	; 0x93a <Ring>
		}
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if (((ppk_mode != GUARD_OFF)&&(ppk_mode != GUARD_ON))&&(led_delay == 0))// Если режим "ТРЕВОГА" или "ЗАДЕРЖКА"
 bca:	80 91 71 00 	lds	r24, 0x0071
 bce:	88 23       	and	r24, r24
 bd0:	59 f0       	breq	.+22     	; 0xbe8 <main+0xf6>
 bd2:	80 91 71 00 	lds	r24, 0x0071
 bd6:	81 30       	cpi	r24, 0x01	; 1
 bd8:	39 f0       	breq	.+14     	; 0xbe8 <main+0xf6>
 bda:	80 91 6b 00 	lds	r24, 0x006B
 bde:	90 91 6c 00 	lds	r25, 0x006C
 be2:	00 97       	sbiw	r24, 0x00	; 0
 be4:	09 f4       	brne	.+2      	; 0xbe8 <main+0xf6>
		{
			Blink_LED_WORK();								// Мигаем LED_WORK
 be6:	8c de       	rcall	.-744    	; 0x900 <Blink_LED_WORK>
		}
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if ((ppk_mode == DELAY_OUT)&&(exit_delay == 0))	// Если ППК находиться в состоянии "ЗАДЕРЖКА НА ВЫХОД" и задержка истекла
 be8:	80 91 71 00 	lds	r24, 0x0071
 bec:	80 31       	cpi	r24, 0x10	; 16
 bee:	89 f4       	brne	.+34     	; 0xc12 <main+0x120>
 bf0:	80 91 69 00 	lds	r24, 0x0069
 bf4:	90 91 6a 00 	lds	r25, 0x006A
 bf8:	00 97       	sbiw	r24, 0x00	; 0
 bfa:	59 f4       	brne	.+22     	; 0xc12 <main+0x120>
		{
				ppk_mode = GUARD_ON;						// Активируем режим "ПОД ОХРАНОЙ"
 bfc:	00 93 71 00 	sts	0x0071, r16
				GIFR = 1<<INTF1|1<<INTF0;					// Сбросим флаги возможно возникавших ранее прерываний
 c00:	1a bf       	out	0x3a, r17	; 58
				GICR = 1<<INT1|1<<INT0;						// Разрешим прерывания INT1 и INT0
 c02:	1b bf       	out	0x3b, r17	; 59
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 c04:	f8 94       	cli
				ATOMIC_BLOCK(ATOMIC_FORCEON)
				{
					led_delay = 0;							// Прекращаем мигать LED_WORK
 c06:	10 92 6c 00 	sts	0x006C, r1
 c0a:	10 92 6b 00 	sts	0x006B, r1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 c0e:	78 94       	sei
				}
			#if defined (DEBUG)
				LED_PORT &= ~(1<<LED_WORK);					// ТОЛЬКО ДЛЯ ОТЛАДКИ
 c10:	c3 98       	cbi	0x18, 3	; 24
			#else
				LED_PORT |= 1<<LED_WORK;					// Зажигаем светодиод ОХРАНА
			#endif
		}
//-----------------------------------------------------------------------------------------------------------------------------------------------------			
		if ((ppk_mode == DELAY_IN)&&(exit_delay == IN_DELAY))// Если ППК находиться в состоянии "ЗАДЕРЖКА НА ВХОД" и она только началась
 c12:	80 91 71 00 	lds	r24, 0x0071
 c16:	80 32       	cpi	r24, 0x20	; 32
 c18:	09 f0       	breq	.+2      	; 0xc1c <main+0x12a>
 c1a:	9e cf       	rjmp	.-196    	; 0xb58 <main+0x66>
 c1c:	80 91 69 00 	lds	r24, 0x0069
 c20:	90 91 6a 00 	lds	r25, 0x006A
 c24:	27 e2       	ldi	r18, 0x27	; 39
 c26:	80 31       	cpi	r24, 0x10	; 16
 c28:	92 07       	cpc	r25, r18
 c2a:	09 f0       	breq	.+2      	; 0xc2e <main+0x13c>
 c2c:	95 cf       	rjmp	.-214    	; 0xb58 <main+0x66>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 c2e:	f8 94       	cli
		{
			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				eeprom_update_byte(&ppk_mode_save, DELAY_IN);// Обновляем состояние ППК в EEPROM
 c30:	80 e0       	ldi	r24, 0x00	; 0
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	60 e2       	ldi	r22, 0x20	; 32
 c36:	29 d0       	rcall	.+82     	; 0xc8a <__eeupd_byte_m8>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 c38:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 c3a:	8e cf       	rjmp	.-228    	; 0xb58 <main+0x66>

00000c3c <__eerd_block_m8>:
 c3c:	dc 01       	movw	r26, r24
 c3e:	cb 01       	movw	r24, r22

00000c40 <__eerd_blraw_m8>:
 c40:	fc 01       	movw	r30, r24
 c42:	e1 99       	sbic	0x1c, 1	; 28
 c44:	fe cf       	rjmp	.-4      	; 0xc42 <__eerd_blraw_m8+0x2>
 c46:	06 c0       	rjmp	.+12     	; 0xc54 <__eerd_blraw_m8+0x14>
 c48:	ff bb       	out	0x1f, r31	; 31
 c4a:	ee bb       	out	0x1e, r30	; 30
 c4c:	e0 9a       	sbi	0x1c, 0	; 28
 c4e:	31 96       	adiw	r30, 0x01	; 1
 c50:	0d b2       	in	r0, 0x1d	; 29
 c52:	0d 92       	st	X+, r0
 c54:	41 50       	subi	r20, 0x01	; 1
 c56:	50 40       	sbci	r21, 0x00	; 0
 c58:	b8 f7       	brcc	.-18     	; 0xc48 <__eerd_blraw_m8+0x8>
 c5a:	08 95       	ret

00000c5c <__eerd_byte_m8>:
 c5c:	e1 99       	sbic	0x1c, 1	; 28
 c5e:	fe cf       	rjmp	.-4      	; 0xc5c <__eerd_byte_m8>
 c60:	9f bb       	out	0x1f, r25	; 31
 c62:	8e bb       	out	0x1e, r24	; 30
 c64:	e0 9a       	sbi	0x1c, 0	; 28
 c66:	99 27       	eor	r25, r25
 c68:	8d b3       	in	r24, 0x1d	; 29
 c6a:	08 95       	ret

00000c6c <__eeupd_block_m8>:
 c6c:	dc 01       	movw	r26, r24
 c6e:	a4 0f       	add	r26, r20
 c70:	b5 1f       	adc	r27, r21
 c72:	41 50       	subi	r20, 0x01	; 1
 c74:	50 40       	sbci	r21, 0x00	; 0
 c76:	40 f0       	brcs	.+16     	; 0xc88 <__eeupd_block_m8+0x1c>
 c78:	cb 01       	movw	r24, r22
 c7a:	84 0f       	add	r24, r20
 c7c:	95 1f       	adc	r25, r21
 c7e:	2e 91       	ld	r18, -X
 c80:	05 d0       	rcall	.+10     	; 0xc8c <__eeupd_r18_m8>
 c82:	41 50       	subi	r20, 0x01	; 1
 c84:	50 40       	sbci	r21, 0x00	; 0
 c86:	d8 f7       	brcc	.-10     	; 0xc7e <__eeupd_block_m8+0x12>
 c88:	08 95       	ret

00000c8a <__eeupd_byte_m8>:
 c8a:	26 2f       	mov	r18, r22

00000c8c <__eeupd_r18_m8>:
 c8c:	e1 99       	sbic	0x1c, 1	; 28
 c8e:	fe cf       	rjmp	.-4      	; 0xc8c <__eeupd_r18_m8>
 c90:	9f bb       	out	0x1f, r25	; 31
 c92:	8e bb       	out	0x1e, r24	; 30
 c94:	e0 9a       	sbi	0x1c, 0	; 28
 c96:	01 97       	sbiw	r24, 0x01	; 1
 c98:	0d b2       	in	r0, 0x1d	; 29
 c9a:	02 16       	cp	r0, r18
 c9c:	31 f0       	breq	.+12     	; 0xcaa <__eeupd_r18_m8+0x1e>
 c9e:	2d bb       	out	0x1d, r18	; 29
 ca0:	0f b6       	in	r0, 0x3f	; 63
 ca2:	f8 94       	cli
 ca4:	e2 9a       	sbi	0x1c, 2	; 28
 ca6:	e1 9a       	sbi	0x1c, 1	; 28
 ca8:	0f be       	out	0x3f, r0	; 63
 caa:	08 95       	ret

00000cac <_exit>:
 cac:	f8 94       	cli

00000cae <__stop_program>:
 cae:	ff cf       	rjmp	.-2      	; 0xcae <__stop_program>

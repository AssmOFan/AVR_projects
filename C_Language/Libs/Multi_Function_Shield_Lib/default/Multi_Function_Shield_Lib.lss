
Multi_Function_Shield_Lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000772  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000772  00000826  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800076  00800076  0000083c  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  0000083c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000864  00000000  00000000  00000840  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000014c  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000060  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000281  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000c36  00000000  00000000  000014d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000003ce  00000000  00000000  00002107  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000b7c  00000000  00000000  000024d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001a0  00000000  00000000  00003054  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000392  00000000  00000000  000031f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000059e  00000000  00000000  00003586  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000000a7  00000000  00000000  00003b24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	1a c3       	rjmp	.+1588   	; 0x648 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	fd c0       	rjmp	.+506    	; 0x218 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e7       	ldi	r30, 0x72	; 114
  3a:	f7 e0       	ldi	r31, 0x07	; 7
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a6 e7       	ldi	r26, 0x76	; 118
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 39       	cpi	r26, 0x98	; 152
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	db d2       	rcall	.+1462   	; 0x610 <main>
  5a:	89 c3       	rjmp	.+1810   	; 0x76e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Init_Multi_Function_Shield>:
// Секция инициализации. Содержит инициализацию базовых возможностей платы расширения MultiFunction_Shield. При необходимости можно дополнить базовую инициализацию
//=====================================================================================================================================================
void Init_Multi_Function_Shield(void)
{
// Инициализация портов
	OUTS_DDR_0_7 = 1<<BUZZER|1<<SPI_CLK_PIN|1<<SPI_LATCH_PIN;// BUZZER, SPI_CLK_PIN and SPI_LATCH_PIN as output
  5e:	88 e9       	ldi	r24, 0x98	; 152
  60:	81 bb       	out	0x11, r24	; 17
	OUTS_PORT_0_7 = 1<<BUZZER;								// BUZZER off
  62:	98 e0       	ldi	r25, 0x08	; 8
  64:	92 bb       	out	0x12, r25	; 18
	OUTS_DDR_8_13 = 1<<LED_4|1<<LED_3|1<<LED_2|1<<LED_1|1<<SPI_DATA_PIN;// LEDs and SPI_DATA_PIN as outputs
  66:	9d e3       	ldi	r25, 0x3D	; 61
  68:	97 bb       	out	0x17, r25	; 23
	OUTS_PORT_8_13 = 1<<LED_3|1<<LED_2|1<<LED_1;			// LEDs 1-3 is off
  6a:	98 e3       	ldi	r25, 0x38	; 56
  6c:	98 bb       	out	0x18, r25	; 24
	ANALOG_PORT = _BV(BUTTON_3_PIN)|_BV(BUTTON_2_PIN)|_BV(BUTTON_1_PIN);// Enable pull-ups on Buttons
  6e:	9e e0       	ldi	r25, 0x0E	; 14
  70:	95 bb       	out	0x15, r25	; 21
// Инициализация UART
//-----------------------------------------------------------------------------------------------------------------------------------------------------
	UBRRL = LO(bauddivider);								
  72:	93 e3       	ldi	r25, 0x33	; 51
  74:	99 b9       	out	0x09, r25	; 9
	UBRRH = HI(bauddivider);
  76:	10 bc       	out	0x20, r1	; 32
	UCSRA = 0;
  78:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0<<RXCIE|0<<TXCIE|0<<UDRIE|1<<RXEN|1<<TXEN;		// Прерывание UDRIE сразу никогда не разрешаем, иначе контроллер сразу входит в это прерывание
  7a:	98 e1       	ldi	r25, 0x18	; 24
  7c:	9a b9       	out	0x0a, r25	; 10
	UCSRC = 1<<URSEL|1<<UCSZ1|1<<UCSZ0;
  7e:	96 e8       	ldi	r25, 0x86	; 134
  80:	90 bd       	out	0x20, r25	; 32
// Настройка АЦП
//-----------------------------------------------------------------------------------------------------------------------------------------------------
	ADMUX = 0<<REFS1|1<<REFS1|1<<ADLAR|0<<MUX3|0<<MUX2|0<<MUX1|0<<MUX0;	// AVCC в качестве ИОН, выравнивание по левому краю (8 старших бит результата), 0 канал АЦП
  82:	90 ea       	ldi	r25, 0xA0	; 160
  84:	97 b9       	out	0x07, r25	; 7
	ADCSRA = 1<<ADEN|0<<ADSC|0<<ADFR|1<<ADIF|1<<ADIE|0<<ADPS2|0<<ADPS1|0<<ADPS0;// ADC Enable, no start conversion, no ADC Free Running Select, ADC Interrupt enable, ADC Prescaler = 2
  86:	86 b9       	out	0x06, r24	; 6
// Настройка энергосбережения и спящего режима
//-----------------------------------------------------------------------------------------------------------------------------------------------------
	MCUCR = 1<<SE|0<<SM2|0<<SM1|1<<SM0|1<<ISC01;			// Sleep Enable, Sleep Mode - ADC Noise Reduction, The falling edge of INT0 generates an interrupt request
  88:	82 e9       	ldi	r24, 0x92	; 146
  8a:	85 bf       	out	0x35, r24	; 53
//-----------------------------------------------------------------------------------------------------------------------------------------------------
/*	#ifdef	USE_INTERRUPT_4_TSOP							// Если используем внешнее прерывание INT0 для получения кода RC5 - все равно есть разрешение прерывания по таймеру
	GIFR = 1<<INTF0;										// Clear External Interrupt Flag 0
	GICR = 1<<INT0;											// External Interrupt Request 0 Enable
	#endif */
}
  8c:	08 95       	ret

0000008e <Write_74HC595>:
//=====================================================================================================================================================
// Секция работы с индикатором через 74HC595 (2 шт, соединенные последовательно)
//=====================================================================================================================================================
void Write_74HC595(uint8_t byte)							// запись 1 байта в 74HC595
{    
  8e:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t i = 0; i < 8; i++, byte <<= 1)
	{        
		if(byte & 0x80) SPI_DATA_HIGH();		
  90:	87 ff       	sbrs	r24, 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <Write_74HC595+0xa>
  94:	c0 9a       	sbi	0x18, 0	; 24
  96:	01 c0       	rjmp	.+2      	; 0x9a <Write_74HC595+0xc>
		else			SPI_DATA_LOW();		
  98:	c0 98       	cbi	0x18, 0	; 24
		asm("nop");
  9a:	00 00       	nop
		SPI_CLK_HIGH();
  9c:	97 9a       	sbi	0x12, 7	; 18
		asm("nop");
  9e:	00 00       	nop
		SPI_CLK_LOW();  
  a0:	97 98       	cbi	0x12, 7	; 18
  a2:	91 50       	subi	r25, 0x01	; 1
//=====================================================================================================================================================
// Секция работы с индикатором через 74HC595 (2 шт, соединенные последовательно)
//=====================================================================================================================================================
void Write_74HC595(uint8_t byte)							// запись 1 байта в 74HC595
{    
	for (uint8_t i = 0; i < 8; i++, byte <<= 1)
  a4:	11 f0       	breq	.+4      	; 0xaa <Write_74HC595+0x1c>
  a6:	88 0f       	add	r24, r24
  a8:	f3 cf       	rjmp	.-26     	; 0x90 <Write_74HC595+0x2>
		asm("nop");
		SPI_CLK_HIGH();
		asm("nop");
		SPI_CLK_LOW();  
	}
	asm("nop");
  aa:	00 00       	nop
	SPI_LATCH_HIGH(); 
  ac:	94 9a       	sbi	0x12, 4	; 18
	asm("nop");
  ae:	00 00       	nop
	SPI_LATCH_LOW();
  b0:	94 98       	cbi	0x12, 4	; 18
}
  b2:	08 95       	ret

000000b4 <Shield_set_display_value>:
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Shield_set_display_value(uint16_t value)				// установка значения для вывода на индикатор
{
	for (uint8_t i = 0; i<4; i++)
	{
		value2digits[i] = 0;								// Обнуляем тысячи, сотни, десятки, и единицы
  b4:	10 92 7f 00 	sts	0x007F, r1
  b8:	10 92 80 00 	sts	0x0080, r1
  bc:	10 92 81 00 	sts	0x0081, r1
  c0:	10 92 82 00 	sts	0x0082, r1
  c4:	07 c0       	rjmp	.+14     	; 0xd4 <Shield_set_display_value+0x20>
	}

	while (value >= 1000)									// Вычисляем тысячи
	{
		value -= 1000;
  c6:	88 5e       	subi	r24, 0xE8	; 232
  c8:	93 40       	sbci	r25, 0x03	; 3
		value2digits[0]++;
  ca:	20 91 7f 00 	lds	r18, 0x007F
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	20 93 7f 00 	sts	0x007F, r18
	for (uint8_t i = 0; i<4; i++)
	{
		value2digits[i] = 0;								// Обнуляем тысячи, сотни, десятки, и единицы
	}

	while (value >= 1000)									// Вычисляем тысячи
  d4:	23 e0       	ldi	r18, 0x03	; 3
  d6:	88 3e       	cpi	r24, 0xE8	; 232
  d8:	92 07       	cpc	r25, r18
  da:	a8 f7       	brcc	.-22     	; 0xc6 <Shield_set_display_value+0x12>
  dc:	07 c0       	rjmp	.+14     	; 0xec <Shield_set_display_value+0x38>
		value -= 1000;
		value2digits[0]++;
	} 	
	while (value >= 100)									// сотни
	{
		value -= 100;
  de:	84 56       	subi	r24, 0x64	; 100
  e0:	90 40       	sbci	r25, 0x00	; 0
		value2digits[1]++;
  e2:	20 91 80 00 	lds	r18, 0x0080
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	20 93 80 00 	sts	0x0080, r18
	while (value >= 1000)									// Вычисляем тысячи
	{
		value -= 1000;
		value2digits[0]++;
	} 	
	while (value >= 100)									// сотни
  ec:	84 36       	cpi	r24, 0x64	; 100
  ee:	91 05       	cpc	r25, r1
  f0:	b0 f7       	brcc	.-20     	; 0xde <Shield_set_display_value+0x2a>
  f2:	06 c0       	rjmp	.+12     	; 0x100 <Shield_set_display_value+0x4c>
		value -= 100;
		value2digits[1]++;
	} 
	while (value >= 10)										// десятки
	{
		value -= 10;
  f4:	0a 97       	sbiw	r24, 0x0a	; 10
		value2digits[2]++;
  f6:	20 91 81 00 	lds	r18, 0x0081
  fa:	2f 5f       	subi	r18, 0xFF	; 255
  fc:	20 93 81 00 	sts	0x0081, r18
	while (value >= 100)									// сотни
	{
		value -= 100;
		value2digits[1]++;
	} 
	while (value >= 10)										// десятки
 100:	8a 30       	cpi	r24, 0x0A	; 10
 102:	91 05       	cpc	r25, r1
 104:	b8 f7       	brcc	.-18     	; 0xf4 <Shield_set_display_value+0x40>
 106:	06 c0       	rjmp	.+12     	; 0x114 <Shield_set_display_value+0x60>
		value -= 10;
		value2digits[2]++;
	} 
	while (value > 0)										// и единицы
	{
		value -= 1;
 108:	01 97       	sbiw	r24, 0x01	; 1
		value2digits[3]++;
 10a:	20 91 82 00 	lds	r18, 0x0082
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	20 93 82 00 	sts	0x0082, r18
	while (value >= 10)										// десятки
	{
		value -= 10;
		value2digits[2]++;
	} 
	while (value > 0)										// и единицы
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	c1 f7       	brne	.-16     	; 0x108 <Shield_set_display_value+0x54>
	{
		value -= 1;
		value2digits[3]++;
	}
}
 118:	08 95       	ret

0000011a <Switch_Mode>:
//=====================================================================================================================================================
// Секция обработки нажатий кнопок
//=====================================================================================================================================================
void Switch_Mode(void)										// Выбор действия для нового режима
{
	switch(mode)
 11a:	80 91 60 00 	lds	r24, 0x0060
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	89 f0       	breq	.+34     	; 0x144 <Switch_Mode+0x2a>
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	f9 f0       	breq	.+62     	; 0x164 <Switch_Mode+0x4a>
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	51 f5       	brne	.+84     	; 0x17e <Switch_Mode+0x64>
	{
		case 1:
		{
			OUTS_PORT_8_13 |= _BV(LED_3)|_BV(LED_2);
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	88 61       	ori	r24, 0x18	; 24
 12e:	88 bb       	out	0x18, r24	; 24
			OUTS_PORT_8_13 &= ~_BV(LED_1);
 130:	c5 98       	cbi	0x18, 5	; 24
            adc_delay = t_ms;
 132:	80 91 94 00 	lds	r24, 0x0094
 136:	90 91 95 00 	lds	r25, 0x0095
 13a:	90 93 79 00 	sts	0x0079, r25
 13e:	80 93 78 00 	sts	0x0078, r24
			break;
 142:	08 95       	ret
		}
		case 2:
		{
			OUTS_PORT_8_13 |= _BV(LED_3)|_BV(LED_1);
 144:	88 b3       	in	r24, 0x18	; 24
 146:	88 62       	ori	r24, 0x28	; 40
 148:	88 bb       	out	0x18, r24	; 24
			OUTS_PORT_8_13 &= ~_BV(LED_2);			
 14a:	c4 98       	cbi	0x18, 4	; 24
            rc5_delay = t_ms;
 14c:	80 91 94 00 	lds	r24, 0x0094
 150:	90 91 95 00 	lds	r25, 0x0095
 154:	90 93 7b 00 	sts	0x007B, r25
 158:	80 93 7a 00 	sts	0x007A, r24
            Shield_set_display_value(0);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	a9 df       	rcall	.-174    	; 0xb4 <Shield_set_display_value>
			break;
 162:	08 95       	ret
		}
		case 3:
		{
			OUTS_PORT_8_13 |= _BV(LED_2)|_BV(LED_1);
 164:	88 b3       	in	r24, 0x18	; 24
 166:	80 63       	ori	r24, 0x30	; 48
 168:	88 bb       	out	0x18, r24	; 24
			OUTS_PORT_8_13 &= ~_BV(LED_3);
 16a:	c3 98       	cbi	0x18, 3	; 24
            temperature_delay = t_ms;
 16c:	80 91 94 00 	lds	r24, 0x0094
 170:	90 91 95 00 	lds	r25, 0x0095
 174:	90 93 7d 00 	sts	0x007D, r25
 178:	80 93 7c 00 	sts	0x007C, r24
			break;
 17c:	08 95       	ret
		}
		default: mode = 1;       
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 60 00 	sts	0x0060, r24
 184:	08 95       	ret

00000186 <Shield_display_digit>:
		value2digits[3]++;
	}
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Shield_display_digit(uint8_t addr, uint8_t digit)		// вывод 1 разряда на индикатор
{
 186:	1f 93       	push	r17
 188:	18 2f       	mov	r17, r24
	Write_74HC595(digit < sizeof(digit2segments) ? digit2segments[digit] : 0xFF);// Если входит в диапазон 0-0x0F - отображаем знакоместо, иначе - гасим (лог.1)
 18a:	64 31       	cpi	r22, 0x14	; 20
 18c:	30 f4       	brcc	.+12     	; 0x19a <Shield_display_digit+0x14>
 18e:	e6 2f       	mov	r30, r22
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	ef 59       	subi	r30, 0x9F	; 159
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	80 81       	ld	r24, Z
 198:	01 c0       	rjmp	.+2      	; 0x19c <Shield_display_digit+0x16>
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	78 df       	rcall	.-272    	; 0x8e <Write_74HC595>
	Write_74HC595(1 << addr);								// И зажигаем нужный разряд
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <Shield_display_digit+0x22>
 1a4:	22 0f       	add	r18, r18
 1a6:	33 1f       	adc	r19, r19
 1a8:	1a 95       	dec	r17
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <Shield_display_digit+0x1e>
 1ac:	82 2f       	mov	r24, r18
 1ae:	6f df       	rcall	.-290    	; 0x8e <Write_74HC595>
}
 1b0:	1f 91       	pop	r17
 1b2:	08 95       	ret

000001b4 <Shield_display_value>:
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Shield_display_value(void)								// вывод значения на индикатор
{
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
	static uint8_t i = 0;									// Переменные, объвленные как static не исчезают после выхода из функции, и сохраняют свое значение
    static int16_t display_delay = 0;

    if ((int16_t)(t_ms - display_delay) >= 0)               // Если пришло время отобразить очередной разряд индикатора
 1ba:	c0 91 83 00 	lds	r28, 0x0083
 1be:	d0 91 84 00 	lds	r29, 0x0084
 1c2:	80 91 94 00 	lds	r24, 0x0094
 1c6:	90 91 95 00 	lds	r25, 0x0095
 1ca:	8c 1b       	sub	r24, r28
 1cc:	9d 0b       	sbc	r25, r29
 1ce:	97 fd       	sbrc	r25, 7
 1d0:	12 c0       	rjmp	.+36     	; 0x1f6 <Shield_display_value+0x42>
    {
        Shield_display_digit(i,value2digits[i]);		    // Отображаем нужный 7-сегментный код в нужном разряде
 1d2:	10 91 85 00 	lds	r17, 0x0085
 1d6:	e1 2f       	mov	r30, r17
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	e1 58       	subi	r30, 0x81	; 129
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	60 81       	ld	r22, Z
 1e0:	81 2f       	mov	r24, r17
 1e2:	d1 df       	rcall	.-94     	; 0x186 <Shield_display_digit>
        i++;                                                // Выбираем следующий разряд индикатора
 1e4:	1f 5f       	subi	r17, 0xFF	; 255
        i &= 0x03;											// Не даем "i" стать больше 3, зануляя старшые разряды (цикл выглядит как 0-1-2-3)
 1e6:	13 70       	andi	r17, 0x03	; 3
 1e8:	10 93 85 00 	sts	0x0085, r17
		display_delay += 5;                                 // Установим задержку 5ms до следующей смены разряда (частота обновления 1 разряда составит 50 Гц)       
 1ec:	25 96       	adiw	r28, 0x05	; 5
 1ee:	d0 93 84 00 	sts	0x0084, r29
 1f2:	c0 93 83 00 	sts	0x0083, r28
    }
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	08 95       	ret

000001fe <Shield_display_Err>:
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Shield_display_Err(void)								// вывод символов ошибки на индикатор
{
	for (uint8_t i = 0; i<4; i++)
	{
		value2digits[i] = i+16;                             // добавляем смещение для каждого символа ошибки
 1fe:	80 e1       	ldi	r24, 0x10	; 16
 200:	80 93 7f 00 	sts	0x007F, r24
 204:	81 e1       	ldi	r24, 0x11	; 17
 206:	80 93 80 00 	sts	0x0080, r24
 20a:	82 e1       	ldi	r24, 0x12	; 18
 20c:	80 93 81 00 	sts	0x0081, r24
 210:	83 e1       	ldi	r24, 0x13	; 19
 212:	80 93 82 00 	sts	0x0082, r24
	}
}
 216:	08 95       	ret

00000218 <__vector_14>:
//=====================================================================================================================================================
ISR (ADC_vect)												// прерывания по окончанию преобразования АЦП
{
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	8f 93       	push	r24
	adc_result = ADCH;										// проснулись по окончанию преобразования. Заберем результат преобразования
 224:	85 b1       	in	r24, 0x05	; 5
 226:	80 93 7e 00 	sts	0x007E, r24
}
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <Buzer_Beep>:
}
#endif
//=====================================================================================================================================================
void Buzer_Beep(beep_delay)									// звуковой сигнал длительность X мс
{
	BUZZER_ON();
 236:	93 98       	cbi	0x12, 3	; 18
	buzzer_delay = t_ms + beep_delay;
 238:	20 91 94 00 	lds	r18, 0x0094
 23c:	30 91 95 00 	lds	r19, 0x0095
 240:	28 0f       	add	r18, r24
 242:	39 1f       	adc	r19, r25
 244:	30 93 77 00 	sts	0x0077, r19
 248:	20 93 76 00 	sts	0x0076, r18
}
 24c:	08 95       	ret

0000024e <Key_Press>:
		default: mode = 1;       
	}
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Key_Press(void)										// Опрос кнопок
{		
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
    static int16_t key_delay = 0;

    if (t_ms - key_delay + 0xFF00 >= 0xFF00)
 252:	c0 91 86 00 	lds	r28, 0x0086
 256:	d0 91 87 00 	lds	r29, 0x0087
 25a:	80 91 94 00 	lds	r24, 0x0094
 25e:	90 91 95 00 	lds	r25, 0x0095
 262:	80 50       	subi	r24, 0x00	; 0
 264:	91 40       	sbci	r25, 0x01	; 1
 266:	8c 1b       	sub	r24, r28
 268:	9d 0b       	sbc	r25, r29
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	80 30       	cpi	r24, 0x00	; 0
 26e:	92 07       	cpc	r25, r18
 270:	28 f1       	brcs	.+74     	; 0x2bc <Key_Press+0x6e>
    {
    	if (BUTTON_1 == 0)									
 272:	99 99       	sbic	0x13, 1	; 19
 274:	09 c0       	rjmp	.+18     	; 0x288 <Key_Press+0x3a>
    	{
    		mode--;
 276:	80 91 60 00 	lds	r24, 0x0060
 27a:	81 50       	subi	r24, 0x01	; 1
 27c:	80 93 60 00 	sts	0x0060, r24
    		if (mode == 0) mode = NUM_OF_MODES;
 280:	88 23       	and	r24, r24
 282:	81 f4       	brne	.+32     	; 0x2a4 <Key_Press+0x56>
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	0c c0       	rjmp	.+24     	; 0x2a0 <Key_Press+0x52>
    		Buzer_Beep(SHORT_BEEP);
    		Switch_Mode();
			key_delay += 200;
    	}
    	else if (BUTTON_2 == 0)
 288:	9a 9b       	sbis	0x13, 2	; 19
 28a:	18 c0       	rjmp	.+48     	; 0x2bc <Key_Press+0x6e>
    	{		
            
    	}
    	else if (BUTTON_3 == 0)
 28c:	9b 99       	sbic	0x13, 3	; 19
 28e:	11 c0       	rjmp	.+34     	; 0x2b2 <Key_Press+0x64>
    	{		
    		mode++;
 290:	80 91 60 00 	lds	r24, 0x0060
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	80 93 60 00 	sts	0x0060, r24
    		if (mode > NUM_OF_MODES) mode = 1;
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	18 f0       	brcs	.+6      	; 0x2a4 <Key_Press+0x56>
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 60 00 	sts	0x0060, r24
    		Buzer_Beep(SHORT_BEEP);
 2a4:	82 e3       	ldi	r24, 0x32	; 50
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	c6 df       	rcall	.-116    	; 0x236 <Buzer_Beep>
    		Switch_Mode();
 2aa:	37 df       	rcall	.-402    	; 0x11a <Switch_Mode>
			key_delay += 200;
 2ac:	c8 53       	subi	r28, 0x38	; 56
 2ae:	df 4f       	sbci	r29, 0xFF	; 255
 2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <Key_Press+0x66>
    	}

		else key_delay += 50;                               // если нет нажатых кнопок следующий опрос через 50 мс
 2b2:	e2 96       	adiw	r28, 0x32	; 50
 2b4:	d0 93 87 00 	sts	0x0087, r29
 2b8:	c0 93 86 00 	sts	0x0086, r28
    }
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <Buzer_OFF>:
	buzzer_delay = t_ms + beep_delay;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Buzer_OFF(void)                                        // выключение звукового сигнала
{
    if ((BUZZER_IS_ON) && (t_ms - buzzer_delay + 0xFF00 >= 0xFF00))
 2c2:	93 99       	sbic	0x12, 3	; 18
 2c4:	11 c0       	rjmp	.+34     	; 0x2e8 <Buzer_OFF+0x26>
 2c6:	80 91 94 00 	lds	r24, 0x0094
 2ca:	90 91 95 00 	lds	r25, 0x0095
 2ce:	80 50       	subi	r24, 0x00	; 0
 2d0:	91 40       	sbci	r25, 0x01	; 1
 2d2:	20 91 76 00 	lds	r18, 0x0076
 2d6:	30 91 77 00 	lds	r19, 0x0077
 2da:	82 1b       	sub	r24, r18
 2dc:	93 0b       	sbc	r25, r19
 2de:	2f ef       	ldi	r18, 0xFF	; 255
 2e0:	80 30       	cpi	r24, 0x00	; 0
 2e2:	92 07       	cpc	r25, r18
 2e4:	08 f0       	brcs	.+2      	; 0x2e8 <Buzer_OFF+0x26>
    {
        BUZZER_OFF();
 2e6:	93 9a       	sbi	0x12, 3	; 18
 2e8:	08 95       	ret

000002ea <Get_RC5_code>:
#else														// Если используем функцию для получения кода RC5
uint16_t Get_RC5_code(void)									
{
	uint16_t code = 0;

	if (TSOP_PIN != 0)										// Только при отсутствии уже начавшегося приема
 2ea:	82 99       	sbic	0x10, 2	; 16
 2ec:	0a c0       	rjmp	.+20     	; 0x302 <Get_RC5_code+0x18>
 2ee:	2f c0       	rjmp	.+94     	; 0x34e <Get_RC5_code+0x64>
	{
		while (TSOP_PIN != 0)								// Ждем начала стартового импульса
		{          
            t0_update();
 2f0:	c2 d1       	rcall	.+900    	; 0x676 <t0_update>
            Blink_Led_4();
 2f2:	73 d1       	rcall	.+742    	; 0x5da <Blink_Led_4>
            Shield_display_value();						    // Вывод значения на индикатор
 2f4:	5f df       	rcall	.-322    	; 0x1b4 <Shield_display_value>
            Buzer_OFF();
 2f6:	e5 df       	rcall	.-54     	; 0x2c2 <Buzer_OFF>
            Key_Press();
 2f8:	aa df       	rcall	.-172    	; 0x24e <Key_Press>
			if (mode != TSOP_MODE) return code;				// Если режим был изменен, на выход
 2fa:	80 91 60 00 	lds	r24, 0x0060
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	31 f5       	brne	.+76     	; 0x34e <Get_RC5_code+0x64>
{
	uint16_t code = 0;

	if (TSOP_PIN != 0)										// Только при отсутствии уже начавшегося приема
	{
		while (TSOP_PIN != 0)								// Ждем начала стартового импульса
 302:	82 99       	sbic	0x10, 2	; 16
 304:	f5 cf       	rjmp	.-22     	; 0x2f0 <Get_RC5_code+0x6>
            Shield_display_value();						    // Вывод значения на индикатор
            Buzer_OFF();
            Key_Press();
			if (mode != TSOP_MODE) return code;				// Если режим был изменен, на выход
		}
		while (TSOP_PIN == 0);								// Ждем окончания стартового импульса
 306:	82 9b       	sbis	0x10, 2	; 16
 308:	fe cf       	rjmp	.-4      	; 0x306 <Get_RC5_code+0x1c>
		cli();												// Запрещаем прерывания ради точности задержек
 30a:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30c:	89 e6       	ldi	r24, 0x69	; 105
 30e:	9a e0       	ldi	r25, 0x0A	; 10
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <Get_RC5_code+0x26>
 314:	00 c0       	rjmp	.+0      	; 0x316 <Get_RC5_code+0x2c>
 316:	00 00       	nop
 318:	8d e0       	ldi	r24, 0x0D	; 13
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
#else														// Если используем функцию для получения кода RC5
uint16_t Get_RC5_code(void)									
{
	uint16_t code = 0;
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
		while (TSOP_PIN == 0);								// Ждем окончания стартового импульса
		cli();												// Запрещаем прерывания ради точности задержек
		_delay_us(START_DELAY);								// Выжидаем первый интервал
		for (uint8_t i=0; i<CODE_LEN; i++)					// Организуем цикл приема битов кода
		{
			code <<= 1;										// Сдвигаем код влево 
 31e:	22 0f       	add	r18, r18
 320:	33 1f       	adc	r19, r19
			if (TSOP_PIN == 0)								// Если на выходе приемника 0,
 322:	82 9b       	sbis	0x10, 2	; 16
			code |= 1;										// это означает прием лог.1		
 324:	21 60       	ori	r18, 0x01	; 1
 326:	e3 ee       	ldi	r30, 0xE3	; 227
 328:	fd e0       	ldi	r31, 0x0D	; 13
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <Get_RC5_code+0x40>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <Get_RC5_code+0x46>
 330:	00 00       	nop
 332:	81 50       	subi	r24, 0x01	; 1
			if (mode != TSOP_MODE) return code;				// Если режим был изменен, на выход
		}
		while (TSOP_PIN == 0);								// Ждем окончания стартового импульса
		cli();												// Запрещаем прерывания ради точности задержек
		_delay_us(START_DELAY);								// Выжидаем первый интервал
		for (uint8_t i=0; i<CODE_LEN; i++)					// Организуем цикл приема битов кода
 334:	a1 f7       	brne	.-24     	; 0x31e <Get_RC5_code+0x34>
			code <<= 1;										// Сдвигаем код влево 
			if (TSOP_PIN == 0)								// Если на выходе приемника 0,
			code |= 1;										// это означает прием лог.1		
			_delay_us(BIT_DELAY);							// Ждем следующий момент опроса
		}
		sei();												// Считывание кода RC5 завершено, разрешаем прерывания
 336:	78 94       	sei
		rc5_delay = t_ms + 250;                             // обновим задержку до следующего разрешения внешнего прерывания
 338:	80 91 94 00 	lds	r24, 0x0094
 33c:	90 91 95 00 	lds	r25, 0x0095
 340:	86 50       	subi	r24, 0x06	; 6
 342:	9f 4f       	sbci	r25, 0xFF	; 255
 344:	90 93 7b 00 	sts	0x007B, r25
 348:	80 93 7a 00 	sts	0x007A, r24
 34c:	02 c0       	rjmp	.+4      	; 0x352 <Get_RC5_code+0x68>
            t0_update();
            Blink_Led_4();
            Shield_display_value();						    // Вывод значения на индикатор
            Buzer_OFF();
            Key_Press();
			if (mode != TSOP_MODE) return code;				// Если режим был изменен, на выход
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	30 e0       	ldi	r19, 0x00	; 0
		}
		sei();												// Считывание кода RC5 завершено, разрешаем прерывания
		rc5_delay = t_ms + 250;                             // обновим задержку до следующего разрешения внешнего прерывания
	}
	return code;											// Возвращаем полученный код
}
 352:	c9 01       	movw	r24, r18
 354:	08 95       	ret

00000356 <Send_Byte>:
    }
}
//=====================================================================================================================================================
void Send_Byte(uint8_t byte)								// отправка одного байта по UART
{
	while (!(UCSRA & (1<<UDRE))){};							// ждем флага готовности UART
 356:	5d 9b       	sbis	0x0b, 5	; 11
 358:	fe cf       	rjmp	.-4      	; 0x356 <Send_Byte>
	UDR = byte;												// засылаем байт в регистр передатчика
 35a:	8c b9       	out	0x0c, r24	; 12
}
 35c:	08 95       	ret

0000035e <Reset_1_wire>:
//=====================================================================================================================================================	
// Секция работы с шиной 1-wire
//=====================================================================================================================================================	
uint8_t Reset_1_wire(void)									// инициализации обмена по шине 1-wire (Reset-Presence)
{
	ONE_WIRE_PIN_LOW();										// Опускаем линию в 0
 35e:	a4 9a       	sbi	0x14, 4	; 20
 360:	8f eb       	ldi	r24, 0xBF	; 191
 362:	93 e0       	ldi	r25, 0x03	; 3
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <Reset_1_wire+0x6>
 368:	00 c0       	rjmp	.+0      	; 0x36a <Reset_1_wire+0xc>
 36a:	00 00       	nop
	_delay_us(480);											// Удерживаем линию в низком состоянии на протяжении 480 мкс
	ONE_WIRE_PIN_HIGH();									// Отпускаем линию
 36c:	a4 98       	cbi	0x14, 4	; 20
	uint8_t i=38;											// Засекаем счетчик на 60 мкс
 36e:	86 e2       	ldi	r24, 0x26	; 38
 370:	92 e0       	ldi	r25, 0x02	; 2
 372:	9a 95       	dec	r25
 374:	f1 f7       	brne	.-4      	; 0x372 <Reset_1_wire+0x14>
 376:	00 c0       	rjmp	.+0      	; 0x378 <Reset_1_wire+0x1a>
	for (; i>0; i--)							
	{
		_delay_us(1);											
		if (ONE_WIRE_LINE != 0) break;						// Линия поднялась, продолжаем	
 378:	9c 99       	sbic	0x13, 4	; 19
 37a:	0a c0       	rjmp	.+20     	; 0x390 <Reset_1_wire+0x32>
{
	ONE_WIRE_PIN_LOW();										// Опускаем линию в 0
	_delay_us(480);											// Удерживаем линию в низком состоянии на протяжении 480 мкс
	ONE_WIRE_PIN_HIGH();									// Отпускаем линию
	uint8_t i=38;											// Засекаем счетчик на 60 мкс
	for (; i>0; i--)							
 37c:	81 50       	subi	r24, 0x01	; 1
 37e:	c1 f7       	brne	.-16     	; 0x370 <Reset_1_wire+0x12>
 380:	07 c0       	rjmp	.+14     	; 0x390 <Reset_1_wire+0x32>
 382:	92 e0       	ldi	r25, 0x02	; 2
 384:	9a 95       	dec	r25
 386:	f1 f7       	brne	.-4      	; 0x384 <Reset_1_wire+0x26>
 388:	00 c0       	rjmp	.+0      	; 0x38a <Reset_1_wire+0x2c>
		else if (i==0) return 0;							// Задержка закончена, линия не поднялась - неисправность на линии 
	}
	for (; i>0; i--)										// Продолжаем отсчет счетчика 60 мкс
	{
		_delay_us(1);											
		if (ONE_WIRE_LINE == 0) break;						// Сигнал Presence обнаружен
 38a:	9c 9b       	sbis	0x13, 4	; 19
 38c:	03 c0       	rjmp	.+6      	; 0x394 <Reset_1_wire+0x36>
	{
		_delay_us(1);											
		if (ONE_WIRE_LINE != 0) break;						// Линия поднялась, продолжаем	
		else if (i==0) return 0;							// Задержка закончена, линия не поднялась - неисправность на линии 
	}
	for (; i>0; i--)										// Продолжаем отсчет счетчика 60 мкс
 38e:	81 50       	subi	r24, 0x01	; 1
 390:	88 23       	and	r24, r24
 392:	b9 f7       	brne	.-18     	; 0x382 <Reset_1_wire+0x24>
 394:	82 e9       	ldi	r24, 0x92	; 146
 396:	8a 95       	dec	r24
 398:	f1 f7       	brne	.-4      	; 0x396 <Reset_1_wire+0x38>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <Reset_1_wire+0x3e>
		_delay_us(1);											
		if (ONE_WIRE_LINE == 0) break;						// Сигнал Presence обнаружен
		else if (i==0) return 0;							// Задержка закончена, сигнал Presence не обнаружен
	}	
	_delay_us(55);											// Ждем 55 мкс (Presence>=60)
	if (ONE_WIRE_LINE != 0) return 0;						// Проверяем линию. Если опущена - можем продолжать
 39c:	9c 99       	sbic	0x13, 4	; 19
 39e:	0b c0       	rjmp	.+22     	; 0x3b6 <Reset_1_wire+0x58>
 3a0:	86 e7       	ldi	r24, 0x76	; 118
 3a2:	92 e0       	ldi	r25, 0x02	; 2
 3a4:	9a 95       	dec	r25
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <Reset_1_wire+0x46>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <Reset_1_wire+0x4c>
	for (i=118; i>0; i--)									// Засекаем счетчик на 190 мкс
	{
		_delay_us(1);											
		if (ONE_WIRE_LINE != 0) break;						// Линия поднялась - фиксируем конец Presence 						
 3aa:	9c 99       	sbic	0x13, 4	; 19
 3ac:	06 c0       	rjmp	.+12     	; 0x3ba <Reset_1_wire+0x5c>
 3ae:	81 50       	subi	r24, 0x01	; 1
		if (ONE_WIRE_LINE == 0) break;						// Сигнал Presence обнаружен
		else if (i==0) return 0;							// Задержка закончена, сигнал Presence не обнаружен
	}	
	_delay_us(55);											// Ждем 55 мкс (Presence>=60)
	if (ONE_WIRE_LINE != 0) return 0;						// Проверяем линию. Если опущена - можем продолжать
	for (i=118; i>0; i--)									// Засекаем счетчик на 190 мкс
 3b0:	c1 f7       	brne	.-16     	; 0x3a2 <Reset_1_wire+0x44>
	{
		_delay_us(1);											
		if (ONE_WIRE_LINE != 0) break;						// Линия поднялась - фиксируем конец Presence 						
		else if (i==0) return 0;							// Задержка закончена, линия не поднялась, неисправность на линии
	}
	return 1;												// Полученный ответ соответствует временным рамкам
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	08 95       	ret
		_delay_us(1);											
		if (ONE_WIRE_LINE == 0) break;						// Сигнал Presence обнаружен
		else if (i==0) return 0;							// Задержка закончена, сигнал Presence не обнаружен
	}	
	_delay_us(55);											// Ждем 55 мкс (Presence>=60)
	if (ONE_WIRE_LINE != 0) return 0;						// Проверяем линию. Если опущена - можем продолжать
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	08 95       	ret
	{
		_delay_us(1);											
		if (ONE_WIRE_LINE != 0) break;						// Линия поднялась - фиксируем конец Presence 						
		else if (i==0) return 0;							// Задержка закончена, линия не поднялась, неисправность на линии
	}
	return 1;												// Полученный ответ соответствует временным рамкам
 3ba:	81 e0       	ldi	r24, 0x01	; 1
}
 3bc:	08 95       	ret

000003be <Send_1_wire_byte>:
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Send_1_wire_byte(uint8_t byte)							// отправка 1 байта по шине 1-wire
{
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i=0; i<8; i++)								// Организуем цикл отправки 1 байта
	{
		if((byte & (1<<i)) == 1<<i)							// Send 1
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	50 e0       	ldi	r21, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	ba 01       	movw	r22, r20
 3ca:	02 2e       	mov	r0, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <Send_1_wire_byte+0x14>
 3ce:	66 0f       	add	r22, r22
 3d0:	77 1f       	adc	r23, r23
 3d2:	0a 94       	dec	r0
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <Send_1_wire_byte+0x10>
 3d6:	fb 01       	movw	r30, r22
 3d8:	e8 23       	and	r30, r24
 3da:	f9 23       	and	r31, r25
 3dc:	e6 17       	cp	r30, r22
 3de:	f7 07       	cpc	r31, r23
 3e0:	51 f4       	brne	.+20     	; 0x3f6 <Send_1_wire_byte+0x38>
		{
			ONE_WIRE_PIN_LOW();								// Опускаем линию в 0
 3e2:	a4 9a       	sbi	0x14, 4	; 20
 3e4:	62 e0       	ldi	r22, 0x02	; 2
 3e6:	6a 95       	dec	r22
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <Send_1_wire_byte+0x28>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <Send_1_wire_byte+0x2e>
			_delay_us(1);		
			ONE_WIRE_PIN_HIGH();							// Отпускаем линию
 3ec:	a4 98       	cbi	0x14, 4	; 20
 3ee:	60 ea       	ldi	r22, 0xA0	; 160
 3f0:	6a 95       	dec	r22
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <Send_1_wire_byte+0x32>
 3f4:	09 c0       	rjmp	.+18     	; 0x408 <Send_1_wire_byte+0x4a>
			_delay_us(60);									// Ждем 60us	
		}
		else												// Send 0
		{
			ONE_WIRE_PIN_LOW();								// Опускаем линию в 0		
 3f6:	a4 9a       	sbi	0x14, 4	; 20
 3f8:	60 ea       	ldi	r22, 0xA0	; 160
 3fa:	6a 95       	dec	r22
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <Send_1_wire_byte+0x3c>
			_delay_us(60);									// Ждем 60us
			ONE_WIRE_PIN_HIGH();							// Отпускаем линию
 3fe:	a4 98       	cbi	0x14, 4	; 20
 400:	62 e0       	ldi	r22, 0x02	; 2
 402:	6a 95       	dec	r22
 404:	f1 f7       	brne	.-4      	; 0x402 <Send_1_wire_byte+0x44>
 406:	00 c0       	rjmp	.+0      	; 0x408 <Send_1_wire_byte+0x4a>
 408:	2f 5f       	subi	r18, 0xFF	; 255
 40a:	3f 4f       	sbci	r19, 0xFF	; 255
	return 1;												// Полученный ответ соответствует временным рамкам
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Send_1_wire_byte(uint8_t byte)							// отправка 1 байта по шине 1-wire
{
	for (uint8_t i=0; i<8; i++)								// Организуем цикл отправки 1 байта
 40c:	28 30       	cpi	r18, 0x08	; 8
 40e:	31 05       	cpc	r19, r1
 410:	d9 f6       	brne	.-74     	; 0x3c8 <Send_1_wire_byte+0xa>
			_delay_us(60);									// Ждем 60us
			ONE_WIRE_PIN_HIGH();							// Отпускаем линию
			_delay_us(1);
		}
	}
}
 412:	08 95       	ret

00000414 <One_wire_receive_byte>:
//-----------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t One_wire_receive_byte(void)							// прием 1 байта по шине 1-wire
{	
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t one_wire_byte = 0;
 418:	80 e0       	ldi	r24, 0x00	; 0
		_delay_us(1);
		ONE_WIRE_PIN_HIGH();								// Отпускаем линию
		_delay_us(12);										// Ждем 12us
		if (ONE_WIRE_LINE == 0)
			one_wire_byte &=~(1<<i);
		else one_wire_byte |= 1<<i;
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	50 e0       	ldi	r21, 0x00	; 0
uint8_t One_wire_receive_byte(void)							// прием 1 байта по шине 1-wire
{	
	uint8_t one_wire_byte = 0;
	for (uint8_t i=0; i<8; i++)								// Организуем цикл отправки 1 байта
	{
		ONE_WIRE_PIN_LOW();									// Опускаем линию в 0		
 41e:	a4 9a       	sbi	0x14, 4	; 20
 420:	92 e0       	ldi	r25, 0x02	; 2
 422:	9a 95       	dec	r25
 424:	f1 f7       	brne	.-4      	; 0x422 <One_wire_receive_byte+0xe>
 426:	00 c0       	rjmp	.+0      	; 0x428 <One_wire_receive_byte+0x14>
		_delay_us(1);
		ONE_WIRE_PIN_HIGH();								// Отпускаем линию
 428:	a4 98       	cbi	0x14, 4	; 20
 42a:	90 e2       	ldi	r25, 0x20	; 32
 42c:	9a 95       	dec	r25
 42e:	f1 f7       	brne	.-4      	; 0x42c <One_wire_receive_byte+0x18>
		_delay_us(12);										// Ждем 12us
		if (ONE_WIRE_LINE == 0)
 430:	9c 99       	sbic	0x13, 4	; 19
 432:	0a c0       	rjmp	.+20     	; 0x448 <One_wire_receive_byte+0x34>
			one_wire_byte &=~(1<<i);
 434:	ba 01       	movw	r22, r20
 436:	02 2e       	mov	r0, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <One_wire_receive_byte+0x2a>
 43a:	66 0f       	add	r22, r22
 43c:	77 1f       	adc	r23, r23
 43e:	0a 94       	dec	r0
 440:	e2 f7       	brpl	.-8      	; 0x43a <One_wire_receive_byte+0x26>
 442:	60 95       	com	r22
 444:	86 23       	and	r24, r22
 446:	08 c0       	rjmp	.+16     	; 0x458 <One_wire_receive_byte+0x44>
		else one_wire_byte |= 1<<i;
 448:	ba 01       	movw	r22, r20
 44a:	02 2e       	mov	r0, r18
 44c:	02 c0       	rjmp	.+4      	; 0x452 <One_wire_receive_byte+0x3e>
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	0a 94       	dec	r0
 454:	e2 f7       	brpl	.-8      	; 0x44e <One_wire_receive_byte+0x3a>
 456:	86 2b       	or	r24, r22
 458:	9d e7       	ldi	r25, 0x7D	; 125
 45a:	9a 95       	dec	r25
 45c:	f1 f7       	brne	.-4      	; 0x45a <One_wire_receive_byte+0x46>
 45e:	00 00       	nop
 460:	2f 5f       	subi	r18, 0xFF	; 255
 462:	3f 4f       	sbci	r19, 0xFF	; 255
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t One_wire_receive_byte(void)							// прием 1 байта по шине 1-wire
{	
	uint8_t one_wire_byte = 0;
	for (uint8_t i=0; i<8; i++)								// Организуем цикл отправки 1 байта
 464:	28 30       	cpi	r18, 0x08	; 8
 466:	31 05       	cpc	r19, r1
 468:	d1 f6       	brne	.-76     	; 0x41e <One_wire_receive_byte+0xa>
			one_wire_byte &=~(1<<i);
		else one_wire_byte |= 1<<i;
		_delay_us(47);										// Ждем 47us до конца тайм-слота (60us)
	}
	return one_wire_byte;
}
 46a:	08 95       	ret

0000046c <Read_Temperature>:
//-----------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Read_Temperature(void)								// чтение температуры (только целая часть, без CRC)
{
 46c:	1f 93       	push	r17
	uint8_t temperature = 0;
	temperature = One_wire_receive_byte()>>4;				// Читаем младший байт температуры, перемещая целую часть в младшую тетраду
 46e:	d2 df       	rcall	.-92     	; 0x414 <One_wire_receive_byte>
 470:	18 2f       	mov	r17, r24
	return (temperature | (One_wire_receive_byte() << 4));	// Читаем старший байт температуры, перемещая значащую часть в старшую тетраду, совмещаем тетрады 2 принятых байт, и возвращаем результат
 472:	d0 df       	rcall	.-96     	; 0x414 <One_wire_receive_byte>
 474:	82 95       	swap	r24
 476:	80 7f       	andi	r24, 0xF0	; 240
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Read_Temperature(void)								// чтение температуры (только целая часть, без CRC)
{
	uint8_t temperature = 0;
	temperature = One_wire_receive_byte()>>4;				// Читаем младший байт температуры, перемещая целую часть в младшую тетраду
 478:	12 95       	swap	r17
 47a:	1f 70       	andi	r17, 0x0F	; 15
	return (temperature | (One_wire_receive_byte() << 4));	// Читаем старший байт температуры, перемещая значащую часть в старшую тетраду, совмещаем тетрады 2 принятых байт, и возвращаем результат
}
 47c:	81 2b       	or	r24, r17
 47e:	1f 91       	pop	r17
 480:	08 95       	ret

00000482 <Switch_Shield_Mode>:
        Buzer_OFF();                                            // выключаем динамик, если о включен, а время звучания окончено
    }
}
//======================================================================================================================================================
void Switch_Shield_Mode(void)                                   // конечный автомат установки значения для вывода на индикатор согласно текущего режима работы
{        
 482:	ef 92       	push	r14
 484:	ff 92       	push	r15
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
	switch(mode)
 48c:	80 91 60 00 	lds	r24, 0x0060
 490:	82 30       	cpi	r24, 0x02	; 2
 492:	39 f1       	breq	.+78     	; 0x4e2 <Switch_Shield_Mode+0x60>
 494:	83 30       	cpi	r24, 0x03	; 3
 496:	09 f4       	brne	.+2      	; 0x49a <Switch_Shield_Mode+0x18>
 498:	50 c0       	rjmp	.+160    	; 0x53a <Switch_Shield_Mode+0xb8>
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	09 f0       	breq	.+2      	; 0x4a0 <Switch_Shield_Mode+0x1e>
 49e:	94 c0       	rjmp	.+296    	; 0x5c8 <Switch_Shield_Mode+0x146>
	{
		case 1:                                                 // режим отображения 0 канала АЦП
		{		    																	 
			if (t_ms - adc_delay + 0xFF00 >= 0xFF00)            // если пришло время обновить показания АЦП	
 4a0:	80 91 94 00 	lds	r24, 0x0094
 4a4:	90 91 95 00 	lds	r25, 0x0095
 4a8:	80 50       	subi	r24, 0x00	; 0
 4aa:	91 40       	sbci	r25, 0x01	; 1
 4ac:	20 91 78 00 	lds	r18, 0x0078
 4b0:	30 91 79 00 	lds	r19, 0x0079
 4b4:	82 1b       	sub	r24, r18
 4b6:	93 0b       	sbc	r25, r19
 4b8:	2f ef       	ldi	r18, 0xFF	; 255
 4ba:	80 30       	cpi	r24, 0x00	; 0
 4bc:	92 07       	cpc	r25, r18
 4be:	08 f4       	brcc	.+2      	; 0x4c2 <Switch_Shield_Mode+0x40>
 4c0:	86 c0       	rjmp	.+268    	; 0x5ce <Switch_Shield_Mode+0x14c>
            {	
				asm("sleep");								    // sleep and start new conversion
 4c2:	88 95       	sleep
				Shield_set_display_value(adc_result);		    // set new ADC result for indication
 4c4:	80 91 7e 00 	lds	r24, 0x007E
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	f4 dd       	rcall	.-1048   	; 0xb4 <Shield_set_display_value>
				adc_delay += 500;						        // set new conversion delay
 4cc:	80 91 78 00 	lds	r24, 0x0078
 4d0:	90 91 79 00 	lds	r25, 0x0079
 4d4:	8c 50       	subi	r24, 0x0C	; 12
 4d6:	9e 4f       	sbci	r25, 0xFE	; 254
 4d8:	90 93 79 00 	sts	0x0079, r25
 4dc:	80 93 78 00 	sts	0x0078, r24
 4e0:	76 c0       	rjmp	.+236    	; 0x5ce <Switch_Shield_Mode+0x14c>
	            GICR = 1<<INT0;									// external Interrupt Request 0 Enable
				rc5_delay += 250;                               // установим задержку до следующего разрешения внешнего прерывания
            }					    			
			#else                                               // если не используем внешнее прерывание INT0 для получения кода RC5            			
            uint16_t rc5_code = 0;                              // заводим переменную для приема кода RC5                              
            if (t_ms - rc5_delay + 0xFF00 >= 0xFF00)            // если нет запрета на повторное считывания кода RC5
 4e2:	80 91 94 00 	lds	r24, 0x0094
 4e6:	90 91 95 00 	lds	r25, 0x0095
 4ea:	80 50       	subi	r24, 0x00	; 0
 4ec:	91 40       	sbci	r25, 0x01	; 1
 4ee:	20 91 7a 00 	lds	r18, 0x007A
 4f2:	30 91 7b 00 	lds	r19, 0x007B
 4f6:	82 1b       	sub	r24, r18
 4f8:	93 0b       	sbc	r25, r19
 4fa:	3f ef       	ldi	r19, 0xFF	; 255
 4fc:	80 30       	cpi	r24, 0x00	; 0
 4fe:	93 07       	cpc	r25, r19
 500:	08 f4       	brcc	.+2      	; 0x504 <Switch_Shield_Mode+0x82>
 502:	65 c0       	rjmp	.+202    	; 0x5ce <Switch_Shield_Mode+0x14c>
            {                               
                rc5_code = Get_RC5_code();                      // используем функцию для получения кода RC5	
 504:	f2 de       	rcall	.-540    	; 0x2ea <Get_RC5_code>
 506:	ec 01       	movw	r28, r24
            }
            #endif
								
			if (rc5_code != 0)                                  // если есть новый считаный код
 508:	00 97       	sbiw	r24, 0x00	; 0
 50a:	09 f4       	brne	.+2      	; 0x50e <Switch_Shield_Mode+0x8c>
 50c:	60 c0       	rjmp	.+192    	; 0x5ce <Switch_Shield_Mode+0x14c>
			{
				Shield_set_display_value(rc5_code & 0x07FF);    // выводим на индикатор, маскируя 2-й стартовый бит и toggle-бит
 50e:	97 70       	andi	r25, 0x07	; 7
 510:	d1 dd       	rcall	.-1118   	; 0xb4 <Shield_set_display_value>
				Send_Byte((rc5_code>>8) & 0x07);			    // выводим в UART, маскируя 2-й стартовый бит и toggle-бит
 512:	7e 01       	movw	r14, r28
 514:	8f 2d       	mov	r24, r15
 516:	87 70       	andi	r24, 0x07	; 7
 518:	1e df       	rcall	.-452    	; 0x356 <Send_Byte>
				Send_Byte(rc5_code);
 51a:	8c 2f       	mov	r24, r28
 51c:	1c df       	rcall	.-456    	; 0x356 <Send_Byte>
				rc5_code = 0;
				Buzer_Beep(SHORT_BEEP);
 51e:	82 e3       	ldi	r24, 0x32	; 50
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	89 de       	rcall	.-750    	; 0x236 <Buzer_Beep>
				rc5_delay += 250;                               // установим задержку до следующего разрешения повторного считывания кода RC5
 524:	80 91 7a 00 	lds	r24, 0x007A
 528:	90 91 7b 00 	lds	r25, 0x007B
 52c:	86 50       	subi	r24, 0x06	; 6
 52e:	9f 4f       	sbci	r25, 0xFF	; 255
 530:	90 93 7b 00 	sts	0x007B, r25
 534:	80 93 7a 00 	sts	0x007A, r24
 538:	4a c0       	rjmp	.+148    	; 0x5ce <Switch_Shield_Mode+0x14c>
			break;
		}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
		case 3:                                                 // режим отображения тепературы с датчика DS18B20
		{     
			if (t_ms - temperature_delay + 0xFF00 >= 0xFF00)    // если пришло время обновить показания температуры/считать преобразованое значение
 53a:	80 91 94 00 	lds	r24, 0x0094
 53e:	90 91 95 00 	lds	r25, 0x0095
 542:	80 50       	subi	r24, 0x00	; 0
 544:	91 40       	sbci	r25, 0x01	; 1
 546:	20 91 7c 00 	lds	r18, 0x007C
 54a:	30 91 7d 00 	lds	r19, 0x007D
 54e:	82 1b       	sub	r24, r18
 550:	93 0b       	sbc	r25, r19
 552:	2f ef       	ldi	r18, 0xFF	; 255
 554:	80 30       	cpi	r24, 0x00	; 0
 556:	92 07       	cpc	r25, r18
 558:	d0 f1       	brcs	.+116    	; 0x5ce <Switch_Shield_Mode+0x14c>
            {
			    static uint8_t ds18b20_state = 0;
            	uint8_t one_wire_state = 0;
                				
				if (ds18b20_state == 0)                         // если это фаза отправки команды на начало преобразования
 55a:	80 91 8a 00 	lds	r24, 0x008A
 55e:	88 23       	and	r24, r24
 560:	a9 f4       	brne	.+42     	; 0x58c <Switch_Shield_Mode+0x10a>
				{							
					one_wire_state = Reset_1_wire();		    // инициализация обмена (Reset-Presence)			
 562:	fd de       	rcall	.-518    	; 0x35e <Reset_1_wire>
 564:	18 2f       	mov	r17, r24
					if (one_wire_state == 1)                    // если датчик живой
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	f1 f4       	brne	.+60     	; 0x5a6 <Switch_Shield_Mode+0x124>
					{
						Send_1_wire_byte(SKIP_ROM);				// пропускаем чтение адреса
 56a:	8c ec       	ldi	r24, 0xCC	; 204
 56c:	28 df       	rcall	.-432    	; 0x3be <Send_1_wire_byte>
						Send_1_wire_byte(START_CONVERSION);		// начать преобразование	
 56e:	84 e4       	ldi	r24, 0x44	; 68
 570:	26 df       	rcall	.-436    	; 0x3be <Send_1_wire_byte>
						temperature_delay += 750;               // устанавливаем задержку на время преобразования
 572:	20 91 7c 00 	lds	r18, 0x007C
 576:	30 91 7d 00 	lds	r19, 0x007D
 57a:	22 51       	subi	r18, 0x12	; 18
 57c:	3d 4f       	sbci	r19, 0xFD	; 253
 57e:	30 93 7d 00 	sts	0x007D, r19
 582:	20 93 7c 00 	sts	0x007C, r18
						ds18b20_state = 1;                      // переводим автомат в фазу получения результата преобразования
 586:	10 93 8a 00 	sts	0x008A, r17
 58a:	21 c0       	rjmp	.+66     	; 0x5ce <Switch_Shield_Mode+0x14c>
						Buzer_Beep(SHORT_BEEP);
						temperature_delay += 2000;              // устанавливаем задержку до следующего обновления показаний температуры
						ds18b20_state = 0;
					}
				}					
				else if (ds18b20_state == 1)                    // если это фаза получения получения результат преобразования	
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	f9 f4       	brne	.+62     	; 0x5ce <Switch_Shield_Mode+0x14c>
				{			
					one_wire_state = Reset_1_wire();		    // повторная инициализация обмена (Reset-Presence)
 590:	e6 de       	rcall	.-564    	; 0x35e <Reset_1_wire>
					if (one_wire_state == 1)                    // если датчик живой
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	41 f4       	brne	.+16     	; 0x5a6 <Switch_Shield_Mode+0x124>
					{
						Send_1_wire_byte(SKIP_ROM);				// пропускаем чтение адреса
 596:	8c ec       	ldi	r24, 0xCC	; 204
 598:	12 df       	rcall	.-476    	; 0x3be <Send_1_wire_byte>
						Send_1_wire_byte(READ_TEMPERATURE);		// будем читать значение температуры		
 59a:	8e eb       	ldi	r24, 0xBE	; 190
 59c:	10 df       	rcall	.-480    	; 0x3be <Send_1_wire_byte>
						Shield_set_display_value(Read_Temperature());// читаем, и сразу устанавливаем значение для вывода на индикатор
 59e:	66 df       	rcall	.-308    	; 0x46c <Read_Temperature>
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	88 dd       	rcall	.-1264   	; 0xb4 <Shield_set_display_value>
 5a4:	04 c0       	rjmp	.+8      	; 0x5ae <Switch_Shield_Mode+0x12c>
					}
					else                                        // если датчик не отвечает
					{
						Shield_display_Err();                   // выводим текст ошибки
 5a6:	2b de       	rcall	.-938    	; 0x1fe <Shield_display_Err>
						Buzer_Beep(SHORT_BEEP);
 5a8:	82 e3       	ldi	r24, 0x32	; 50
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	44 de       	rcall	.-888    	; 0x236 <Buzer_Beep>
					}
					temperature_delay += 2000;                  // устанавливаем задержку до следующего обновления показаний температуры
 5ae:	80 91 7c 00 	lds	r24, 0x007C
 5b2:	90 91 7d 00 	lds	r25, 0x007D
 5b6:	80 53       	subi	r24, 0x30	; 48
 5b8:	98 4f       	sbci	r25, 0xF8	; 248
 5ba:	90 93 7d 00 	sts	0x007D, r25
 5be:	80 93 7c 00 	sts	0x007C, r24
					ds18b20_state = 0;                          // сбрасываем автомат в фазу отправки команды на начало преобразования
 5c2:	10 92 8a 00 	sts	0x008A, r1
 5c6:	03 c0       	rjmp	.+6      	; 0x5ce <Switch_Shield_Mode+0x14c>
				}
			}
			break;
		}
		default: mode = 1;
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	80 93 60 00 	sts	0x0060, r24
    }							
}
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	ff 90       	pop	r15
 5d6:	ef 90       	pop	r14
 5d8:	08 95       	ret

000005da <Blink_Led_4>:
//=====================================================================================================================================================
void Blink_Led_4(void)
{
    static uint16_t led_4_delay = 0;                            // если выносить переменную наружу, ее желательно инициализировать так: next_blink = t0_ctr, тогда функция сработает при первом же проходе
        
    if (t_ms - led_4_delay + 0xFF00 >= 0xFF00)
 5da:	20 91 88 00 	lds	r18, 0x0088
 5de:	30 91 89 00 	lds	r19, 0x0089
 5e2:	80 91 94 00 	lds	r24, 0x0094
 5e6:	90 91 95 00 	lds	r25, 0x0095
 5ea:	80 50       	subi	r24, 0x00	; 0
 5ec:	91 40       	sbci	r25, 0x01	; 1
 5ee:	82 1b       	sub	r24, r18
 5f0:	93 0b       	sbc	r25, r19
 5f2:	4f ef       	ldi	r20, 0xFF	; 255
 5f4:	80 30       	cpi	r24, 0x00	; 0
 5f6:	94 07       	cpc	r25, r20
 5f8:	50 f0       	brcs	.+20     	; 0x60e <Blink_Led_4+0x34>
    {
		led_4_delay += 500;
 5fa:	2c 50       	subi	r18, 0x0C	; 12
 5fc:	3e 4f       	sbci	r19, 0xFE	; 254
 5fe:	30 93 89 00 	sts	0x0089, r19
 602:	20 93 88 00 	sts	0x0088, r18
        LED_4_TOGLE();
 606:	88 b3       	in	r24, 0x18	; 24
 608:	94 e0       	ldi	r25, 0x04	; 4
 60a:	89 27       	eor	r24, r25
 60c:	88 bb       	out	0x18, r24	; 24
 60e:	08 95       	ret

00000610 <main>:

void Blink_Led_4(void);
void Switch_Shield_Mode(void);
//=====================================================================================================================================================
int main(void)
{
 610:	0f 93       	push	r16
 612:	1f 93       	push	r17
	Init_Multi_Function_Shield();								// инициализация портов и периферии Multi Function Shield
 614:	24 dd       	rcall	.-1464   	; 0x5e <Init_Multi_Function_Shield>
    t0_init();                                                  // инициализация таймерной службы 
 616:	29 d0       	rcall	.+82     	; 0x66a <t0_init>
        
//    mode = 1;
	mode = eeprom_read_byte(&eeprom_mode);                      // восстанавливаем из памяти предыдущий режим работы
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	8f d0       	rcall	.+286    	; 0x73c <__eerd_byte_m8>
 61e:	08 2f       	mov	r16, r24
 620:	80 93 60 00 	sts	0x0060, r24
    uint8_t old_mode = mode;
	Switch_Mode();                                              // и зажигаем соответствующий индикатор
 624:	7a dd       	rcall	.-1292   	; 0x11a <Switch_Mode>

    sei();
 626:	78 94       	sei
 
//	Главный цикл =======================================================================================================================================
	while (1)
	{
        t0_update();                                            // обновляем значение полного счётчика тиков
 628:	26 d0       	rcall	.+76     	; 0x676 <t0_update>
        Blink_Led_4();                                          // мигаем светодиодом
 62a:	d7 df       	rcall	.-82     	; 0x5da <Blink_Led_4>
        Key_Press();                                            // опрашиваем кнопки
 62c:	10 de       	rcall	.-992    	; 0x24e <Key_Press>
        if (mode != old_mode)                                   // если режим изменился
 62e:	10 91 60 00 	lds	r17, 0x0060
 632:	10 17       	cp	r17, r16
 634:	21 f0       	breq	.+8      	; 0x63e <main+0x2e>
        {
            old_mode = mode;                                    // обновим предыдущий режим
            eeprom_update_byte(&eeprom_mode, mode);             // сохраним новый режим работы
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	61 2f       	mov	r22, r17
 63c:	87 d0       	rcall	.+270    	; 0x74c <__eeupd_byte_m8>
        }
        Switch_Shield_Mode();                                   // устанавливаем значение для вывода на индикатор согласно текущего режима работы
 63e:	21 df       	rcall	.-446    	; 0x482 <Switch_Shield_Mode>
        Shield_display_value();								    // вывод значения на индикатор
 640:	b9 dd       	rcall	.-1166   	; 0x1b4 <Shield_display_value>
        Buzer_OFF();                                            // выключаем динамик, если о включен, а время звучания окончено
 642:	3f de       	rcall	.-898    	; 0x2c2 <Buzer_OFF>
    }
 644:	01 2f       	mov	r16, r17
 646:	f0 cf       	rjmp	.-32     	; 0x628 <main+0x18>

00000648 <__vector_9>:
uint16_t t0_ctr;                    // расширенный счётчик тиков
//-----------------------------------------------------------------------------------------------------------------------------------------------------
static volatile uint8_t ovf_ctr;    // считаем переполнения

ISR(TIMER0_OVF_vect)
{
 648:	1f 92       	push	r1
 64a:	0f 92       	push	r0
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	0f 92       	push	r0
 650:	11 24       	eor	r1, r1
 652:	8f 93       	push	r24
    ovf_ctr++;
 654:	80 91 8b 00 	lds	r24, 0x008B
 658:	8f 5f       	subi	r24, 0xFF	; 255
 65a:	80 93 8b 00 	sts	0x008B, r24
}
 65e:	8f 91       	pop	r24
 660:	0f 90       	pop	r0
 662:	0f be       	out	0x3f, r0	; 63
 664:	0f 90       	pop	r0
 666:	1f 90       	pop	r1
 668:	18 95       	reti

0000066a <t0_init>:
//=====================================================================================================================================================
void t0_init()                      // запуск таймера
{
    TCCR0 = T0_PRESC;               // запустить счёт
 66a:	84 e0       	ldi	r24, 0x04	; 4
 66c:	83 bf       	out	0x33, r24	; 51
    TIMSK |= 1<<TOIE0;              // разрешить прерывание по переполнению
 66e:	89 b7       	in	r24, 0x39	; 57
 670:	81 60       	ori	r24, 0x01	; 1
 672:	89 bf       	out	0x39, r24	; 57
}
 674:	08 95       	ret

00000676 <t0_update>:
// Добавлено для организации вторичных счётчиков времени в миллисекундах и секундах
uint16_t t_ms;
uint32_t t_sec32;

void t0_update()
{
 676:	ef 92       	push	r14
 678:	ff 92       	push	r15
 67a:	0f 93       	push	r16
 67c:	1f 93       	push	r17
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
//  обновляем t0_ctr
//-----------------------------------------------------------------------------------------------------------------------------------------------------
    uint8_t ctr_high, ctr_low;
    do
    {
        ctr_high = ovf_ctr;
 682:	80 91 8b 00 	lds	r24, 0x008B
        ctr_low = TCNT0;
 686:	62 b7       	in	r22, 0x32	; 50
    }
    while ((TIFR & (1<<TOV0)) || (ovf_ctr != ctr_high));// проверка изминения счетчика переполнения однобайтного таймера
 688:	08 b6       	in	r0, 0x38	; 56
 68a:	00 fc       	sbrc	r0, 0
 68c:	fa cf       	rjmp	.-12     	; 0x682 <t0_update+0xc>
 68e:	20 91 8b 00 	lds	r18, 0x008B
 692:	28 17       	cp	r18, r24
 694:	b1 f7       	brne	.-20     	; 0x682 <t0_update+0xc>
    //while((TIFR & (1<<TOV1)) || ((uint8_t)ovf_ctr != (uint8_t)ctr_high));// проверка изминения счетчика переполнения двухбайтного таймера
    t0_ctr = ctr_low | (ctr_high << 8);
 696:	92 2f       	mov	r25, r18
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	68 2b       	or	r22, r24
 69e:	79 2b       	or	r23, r25
 6a0:	70 93 97 00 	sts	0x0097, r23
 6a4:	60 93 96 00 	sts	0x0096, r22
 6a8:	40 91 94 00 	lds	r20, 0x0094
 6ac:	50 91 95 00 	lds	r21, 0x0095
 6b0:	20 91 8e 00 	lds	r18, 0x008E
 6b4:	30 91 8f 00 	lds	r19, 0x008F
 6b8:	80 91 8c 00 	lds	r24, 0x008C
 6bc:	90 91 8d 00 	lds	r25, 0x008D
 6c0:	e0 90 90 00 	lds	r14, 0x0090
 6c4:	f0 90 91 00 	lds	r15, 0x0091
 6c8:	00 91 92 00 	lds	r16, 0x0092
 6cc:	10 91 93 00 	lds	r17, 0x0093
//-----------------------------------------------------------------------------------------------------------------------------------------------------
    while(t0_ctr - last_ms >= T0_MS(1))
 6d0:	11 c0       	rjmp	.+34     	; 0x6f4 <t0_update+0x7e>
 6d2:	4f 5f       	subi	r20, 0xFF	; 255
 6d4:	5f 4f       	sbci	r21, 0xFF	; 255
 6d6:	21 5e       	subi	r18, 0xE1	; 225
 6d8:	3f 4f       	sbci	r19, 0xFF	; 255
 6da:	5f 97       	sbiw	r26, 0x1f	; 31
 6dc:	21 96       	adiw	r28, 0x01	; 1
    {
        t_ms++;
        last_ms += T0_MS(1);

        if(t_ms - last_sec >= 1000)
 6de:	e3 e0       	ldi	r30, 0x03	; 3
 6e0:	c8 3e       	cpi	r28, 0xE8	; 232
 6e2:	de 07       	cpc	r29, r30
 6e4:	68 f0       	brcs	.+26     	; 0x700 <t0_update+0x8a>
 6e6:	08 94       	sec
 6e8:	e1 1c       	adc	r14, r1
 6ea:	f1 1c       	adc	r15, r1
 6ec:	01 1d       	adc	r16, r1
 6ee:	11 1d       	adc	r17, r1
 6f0:	88 51       	subi	r24, 0x18	; 24
 6f2:	9c 4f       	sbci	r25, 0xFC	; 252
 6f4:	db 01       	movw	r26, r22
 6f6:	a2 1b       	sub	r26, r18
 6f8:	b3 0b       	sbc	r27, r19
 6fa:	ea 01       	movw	r28, r20
 6fc:	c8 1b       	sub	r28, r24
 6fe:	d9 0b       	sbc	r29, r25
    }
    while ((TIFR & (1<<TOV0)) || (ovf_ctr != ctr_high));// проверка изминения счетчика переполнения однобайтного таймера
    //while((TIFR & (1<<TOV1)) || ((uint8_t)ovf_ctr != (uint8_t)ctr_high));// проверка изминения счетчика переполнения двухбайтного таймера
    t0_ctr = ctr_low | (ctr_high << 8);
//-----------------------------------------------------------------------------------------------------------------------------------------------------
    while(t0_ctr - last_ms >= T0_MS(1))
 700:	af 31       	cpi	r26, 0x1F	; 31
 702:	b1 05       	cpc	r27, r1
 704:	30 f7       	brcc	.-52     	; 0x6d2 <t0_update+0x5c>
 706:	50 93 95 00 	sts	0x0095, r21
 70a:	40 93 94 00 	sts	0x0094, r20
 70e:	30 93 8f 00 	sts	0x008F, r19
 712:	20 93 8e 00 	sts	0x008E, r18
 716:	90 93 8d 00 	sts	0x008D, r25
 71a:	80 93 8c 00 	sts	0x008C, r24
 71e:	e0 92 90 00 	sts	0x0090, r14
 722:	f0 92 91 00 	sts	0x0091, r15
 726:	00 93 92 00 	sts	0x0092, r16
 72a:	10 93 93 00 	sts	0x0093, r17
        {
            t_sec32++;
            last_sec += 1000;
        }
    }
}
 72e:	df 91       	pop	r29
 730:	cf 91       	pop	r28
 732:	1f 91       	pop	r17
 734:	0f 91       	pop	r16
 736:	ff 90       	pop	r15
 738:	ef 90       	pop	r14
 73a:	08 95       	ret

0000073c <__eerd_byte_m8>:
 73c:	e1 99       	sbic	0x1c, 1	; 28
 73e:	fe cf       	rjmp	.-4      	; 0x73c <__eerd_byte_m8>
 740:	9f bb       	out	0x1f, r25	; 31
 742:	8e bb       	out	0x1e, r24	; 30
 744:	e0 9a       	sbi	0x1c, 0	; 28
 746:	99 27       	eor	r25, r25
 748:	8d b3       	in	r24, 0x1d	; 29
 74a:	08 95       	ret

0000074c <__eeupd_byte_m8>:
 74c:	26 2f       	mov	r18, r22

0000074e <__eeupd_r18_m8>:
 74e:	e1 99       	sbic	0x1c, 1	; 28
 750:	fe cf       	rjmp	.-4      	; 0x74e <__eeupd_r18_m8>
 752:	9f bb       	out	0x1f, r25	; 31
 754:	8e bb       	out	0x1e, r24	; 30
 756:	e0 9a       	sbi	0x1c, 0	; 28
 758:	01 97       	sbiw	r24, 0x01	; 1
 75a:	0d b2       	in	r0, 0x1d	; 29
 75c:	02 16       	cp	r0, r18
 75e:	31 f0       	breq	.+12     	; 0x76c <__eeupd_r18_m8+0x1e>
 760:	2d bb       	out	0x1d, r18	; 29
 762:	0f b6       	in	r0, 0x3f	; 63
 764:	f8 94       	cli
 766:	e2 9a       	sbi	0x1c, 2	; 28
 768:	e1 9a       	sbi	0x1c, 1	; 28
 76a:	0f be       	out	0x3f, r0	; 63
 76c:	08 95       	ret

0000076e <_exit>:
 76e:	f8 94       	cli

00000770 <__stop_program>:
 770:	ff cf       	rjmp	.-2      	; 0x770 <__stop_program>


Multi_Function_Shield_Lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000061e  000006d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080007a  0080007a  000006ec  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  000006ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000864  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000014c  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000040  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000226  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000b48  00000000  00000000  00001306  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000002af  00000000  00000000  00001e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000a51  00000000  00000000  000020fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000140  00000000  00000000  00002b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000030a  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000005d6  00000000  00000000  00002f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000063  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000018  00000000  00000000  000035d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	4e c1       	rjmp	.+668    	; 0x2aa <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	e5 c0       	rjmp	.+458    	; 0x1e8 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e1       	ldi	r30, 0x1E	; 30
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 37       	cpi	r26, 0x7A	; 122
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	aa e7       	ldi	r26, 0x7A	; 122
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 38       	cpi	r26, 0x84	; 132
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	48 d2       	rcall	.+1168   	; 0x4ea <main>
  5a:	df c2       	rjmp	.+1470   	; 0x61a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Init>:
//=====================================================================================================================================================
// Секция инициализации. Содержит инициализацию базовых возможностей платы расширения MultiFunction_Shield. При необходимости можно дополнить базовую инициализацию
//=====================================================================================================================================================
void Init(void)
{
	OUTS_DDR_0_7 = 1<<BUZZER|1<<SPI_CLK_PIN|1<<SPI_LATCH_PIN;// BUZZER, SPI_CLK_PIN and SPI_LATCH_PIN as output
  5e:	28 e9       	ldi	r18, 0x98	; 152
  60:	21 bb       	out	0x11, r18	; 17
	OUTS_PORT_0_7 = 1<<BUZZER;								// BUZZER off
  62:	88 e0       	ldi	r24, 0x08	; 8
  64:	82 bb       	out	0x12, r24	; 18
	OUTS_DDR_8_13 = 1<<LED_4|1<<LED_3|1<<LED_2|1<<LED_1|1<<SPI_DATA_PIN;// LEDs and SPI_DATA_PIN as outputs
  66:	8d e3       	ldi	r24, 0x3D	; 61
  68:	87 bb       	out	0x17, r24	; 23
	OUTS_PORT_8_13 = 1<<LED_3|1<<LED_2|1<<LED_1;			// LEDs 1-3 is off
  6a:	88 e3       	ldi	r24, 0x38	; 56
  6c:	88 bb       	out	0x18, r24	; 24
	ANALOG_PORT = _BV(BUTTON_3_PIN)|_BV(BUTTON_2_PIN)|_BV(BUTTON_1_PIN);// Enable pull-ups on Buttons
  6e:	8e e0       	ldi	r24, 0x0E	; 14
  70:	85 bb       	out	0x15, r24	; 21
	UBRRL = LO(bauddivider);								// Инициализация UART
  72:	83 e3       	ldi	r24, 0x33	; 51
  74:	89 b9       	out	0x09, r24	; 9
	UBRRH = HI(bauddivider);
  76:	10 bc       	out	0x20, r1	; 32
	UCSRA = 0;
  78:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0<<RXCIE|0<<TXCIE|0<<UDRIE|1<<RXEN|1<<TXEN;		// Прерывание UDRIE сразу никогда не разрешаем, иначе контроллер сразу входит в это прерывание
  7a:	88 e1       	ldi	r24, 0x18	; 24
  7c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 1<<URSEL|1<<UCSZ1|1<<UCSZ0;
  7e:	86 e8       	ldi	r24, 0x86	; 134
  80:	80 bd       	out	0x20, r24	; 32
	// Инициализация Таймеров. Предделитель подбираеться экспериментально, для достижения периода прерывания Timer1 каждую мс
															// Везде вкл. режим прерывания Timer1 по совпадению (1<<WGM12)
	TCCR1B = 1<<WGM12|0<<CS12|0<<CS11|1<<CS10;				// Запуск таймера без предделителя
  82:	89 e0       	ldi	r24, 0x09	; 9
  84:	8e bd       	out	0x2e, r24	; 46
//	TCCR1B = 1<<WGM12|0<<CS12|1<<CS11|0<<CS10;				// Запуск таймера с предделителем 8
//	TCCR1B = 1<<WGM12|0<<CS12|1<<CS11|1<<CS10;				// Запуск таймера с предделителем 64
//	TCCR1B = 1<<WGM12|1<<CS12|0<<CS11|0<<CS10;				// Запуск таймера с предделителем 256
//	TCCR1B = 1<<WGM12|1<<CS12|0<<CS11|1<<CS10;				// Запуск таймера с предделителем 1024				
	OCR1A = 7999;											// Значение подбираеться экспериментально, для достижения периода прерывания Timer1 каждую мс
  86:	8f e3       	ldi	r24, 0x3F	; 63
  88:	9f e1       	ldi	r25, 0x1F	; 31
  8a:	9b bd       	out	0x2b, r25	; 43
  8c:	8a bd       	out	0x2a, r24	; 42
	TIMSK = 1<<OCIE1A;										// Разрешаем прерывание по совпадению значения OCR1A с заданым ранее
  8e:	80 e1       	ldi	r24, 0x10	; 16
  90:	89 bf       	out	0x39, r24	; 57
	TIFR = 1<<OCF1A;										// Сбросим флаг, чтобы прерывание не выскочило сразу
  92:	88 bf       	out	0x38, r24	; 56
	// Настройка АЦП
	ADMUX = 0<<REFS1|1<<REFS1|1<<ADLAR|0<<MUX3|0<<MUX2|0<<MUX1|0<<MUX0;	// AVCC в качестве ИОН, выравнивание по левому краю (8 старших бит результата), 0 канал АЦП
  94:	80 ea       	ldi	r24, 0xA0	; 160
  96:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 1<<ADEN|0<<ADSC|0<<ADFR|1<<ADIF|1<<ADIE|0<<ADPS2|0<<ADPS1|0<<ADPS0;// ADC Enable, no start conversion, no ADC Free Running Select, ADC Interrupt enable, ADC Prescaler = 2
  98:	26 b9       	out	0x06, r18	; 6
	// Настройка энергосбережения и спящего режима
	MCUCR = 1<<SE|0<<SM2|0<<SM1|1<<SM0|1<<ISC01;			// Sleep Enable, Sleep Mode - ADC Noise Reduction, The falling edge of INT0 generates an interrupt request
  9a:	82 e9       	ldi	r24, 0x92	; 146
  9c:	85 bf       	out	0x35, r24	; 53
/*	#ifdef	USE_INTERRUPT_4_TSOP							// Если используем внешнее прерывание INT0 для получения кода RC5 - все равно есть разрешение прерывания в обработчике таймера
	GIFR = 1<<INTF0;										// Clear External Interrupt Flag 0
	GICR = 1<<INT0;											// External Interrupt Request 0 Enable
	#endif */
}
  9e:	08 95       	ret

000000a0 <Write_74HC595>:
//=====================================================================================================================================================
// Секция работы с индикатором через 2 шт. 74HC595
//=====================================================================================================================================================
void Write_74HC595(uint8_t byte)							// Функция записи 1 байта в 74HC595
{    
  a0:	98 e0       	ldi	r25, 0x08	; 8
	uint8_t i;	
	for (i = 0; i < 8; i++, byte <<= 1)
	{        
		if(byte & 0x80) SPI_DATA_HIGH();		
  a2:	87 ff       	sbrs	r24, 7
  a4:	02 c0       	rjmp	.+4      	; 0xaa <Write_74HC595+0xa>
  a6:	c0 9a       	sbi	0x18, 0	; 24
  a8:	01 c0       	rjmp	.+2      	; 0xac <Write_74HC595+0xc>
		else			SPI_DATA_LOW();		
  aa:	c0 98       	cbi	0x18, 0	; 24
		asm("nop");
  ac:	00 00       	nop
		SPI_CLK_HIGH();
  ae:	97 9a       	sbi	0x12, 7	; 18
		asm("nop");
  b0:	00 00       	nop
		SPI_CLK_LOW();  
  b2:	97 98       	cbi	0x12, 7	; 18
  b4:	91 50       	subi	r25, 0x01	; 1
// Секция работы с индикатором через 2 шт. 74HC595
//=====================================================================================================================================================
void Write_74HC595(uint8_t byte)							// Функция записи 1 байта в 74HC595
{    
	uint8_t i;	
	for (i = 0; i < 8; i++, byte <<= 1)
  b6:	11 f0       	breq	.+4      	; 0xbc <Write_74HC595+0x1c>
  b8:	88 0f       	add	r24, r24
  ba:	f3 cf       	rjmp	.-26     	; 0xa2 <Write_74HC595+0x2>
		asm("nop");
		SPI_CLK_HIGH();
		asm("nop");
		SPI_CLK_LOW();  
	}
	asm("nop");
  bc:	00 00       	nop
	SPI_LATCH_HIGH(); 
  be:	94 9a       	sbi	0x12, 4	; 18
	asm("nop");
  c0:	00 00       	nop
	SPI_LATCH_LOW();
  c2:	94 98       	cbi	0x12, 4	; 18
}
  c4:	08 95       	ret

000000c6 <Shield_set_display_value>:
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Shield_set_display_value(uint16_t value)				// Функция установки значения для вывода на индикатор
{
	for (uint8_t i = 0; i<4; i++)
	{
		value2digits[i] = 0;								// Обнуляем тысячи, сотни, десятки, и единицы
  c6:	10 92 80 00 	sts	0x0080, r1
  ca:	10 92 81 00 	sts	0x0081, r1
  ce:	10 92 82 00 	sts	0x0082, r1
  d2:	10 92 83 00 	sts	0x0083, r1
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <Shield_set_display_value+0x20>
	}

	while (value >= 1000)									// Вычисляем тысячи
	{
		value -= 1000;
  d8:	88 5e       	subi	r24, 0xE8	; 232
  da:	93 40       	sbci	r25, 0x03	; 3
		value2digits[0]++;
  dc:	20 91 80 00 	lds	r18, 0x0080
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	20 93 80 00 	sts	0x0080, r18
	for (uint8_t i = 0; i<4; i++)
	{
		value2digits[i] = 0;								// Обнуляем тысячи, сотни, десятки, и единицы
	}

	while (value >= 1000)									// Вычисляем тысячи
  e6:	23 e0       	ldi	r18, 0x03	; 3
  e8:	88 3e       	cpi	r24, 0xE8	; 232
  ea:	92 07       	cpc	r25, r18
  ec:	a8 f7       	brcc	.-22     	; 0xd8 <Shield_set_display_value+0x12>
  ee:	07 c0       	rjmp	.+14     	; 0xfe <Shield_set_display_value+0x38>
		value -= 1000;
		value2digits[0]++;
	} 	
	while (value >= 100)									// сотни
	{
		value -= 100;
  f0:	84 56       	subi	r24, 0x64	; 100
  f2:	90 40       	sbci	r25, 0x00	; 0
		value2digits[1]++;
  f4:	20 91 81 00 	lds	r18, 0x0081
  f8:	2f 5f       	subi	r18, 0xFF	; 255
  fa:	20 93 81 00 	sts	0x0081, r18
	while (value >= 1000)									// Вычисляем тысячи
	{
		value -= 1000;
		value2digits[0]++;
	} 	
	while (value >= 100)									// сотни
  fe:	84 36       	cpi	r24, 0x64	; 100
 100:	91 05       	cpc	r25, r1
 102:	b0 f7       	brcc	.-20     	; 0xf0 <Shield_set_display_value+0x2a>
 104:	06 c0       	rjmp	.+12     	; 0x112 <Shield_set_display_value+0x4c>
		value -= 100;
		value2digits[1]++;
	} 
	while (value >= 10)										// десятки
	{
		value -= 10;
 106:	0a 97       	sbiw	r24, 0x0a	; 10
		value2digits[2]++;
 108:	20 91 82 00 	lds	r18, 0x0082
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	20 93 82 00 	sts	0x0082, r18
	while (value >= 100)									// сотни
	{
		value -= 100;
		value2digits[1]++;
	} 
	while (value >= 10)										// десятки
 112:	8a 30       	cpi	r24, 0x0A	; 10
 114:	91 05       	cpc	r25, r1
 116:	b8 f7       	brcc	.-18     	; 0x106 <Shield_set_display_value+0x40>
 118:	06 c0       	rjmp	.+12     	; 0x126 <Shield_set_display_value+0x60>
		value -= 10;
		value2digits[2]++;
	} 
	while (value > 0)										// и единицы
	{
		value -= 1;
 11a:	01 97       	sbiw	r24, 0x01	; 1
		value2digits[3]++;
 11c:	20 91 83 00 	lds	r18, 0x0083
 120:	2f 5f       	subi	r18, 0xFF	; 255
 122:	20 93 83 00 	sts	0x0083, r18
	while (value >= 10)										// десятки
	{
		value -= 10;
		value2digits[2]++;
	} 
	while (value > 0)										// и единицы
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	c1 f7       	brne	.-16     	; 0x11a <Shield_set_display_value+0x54>
	{
		value -= 1;
		value2digits[3]++;
	}
}
 12a:	08 95       	ret

0000012c <Switch_Mode>:
//	if ((mode == 1)||(mode == 2)||(mode == 3)) 
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Switch_Mode(void)										// Выбор действия для нового режима
{
	switch(mode)
 12c:	80 91 60 00 	lds	r24, 0x0060
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	49 f0       	breq	.+18     	; 0x146 <Switch_Mode+0x1a>
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	79 f0       	breq	.+30     	; 0x156 <Switch_Mode+0x2a>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	91 f4       	brne	.+36     	; 0x160 <Switch_Mode+0x34>
	{
		case 1:
		{
			OUTS_PORT_8_13 |= _BV(LED_3)|_BV(LED_2);
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	88 61       	ori	r24, 0x18	; 24
 140:	88 bb       	out	0x18, r24	; 24
			OUTS_PORT_8_13 &= ~_BV(LED_1);
 142:	c5 98       	cbi	0x18, 5	; 24
			break;
 144:	10 c0       	rjmp	.+32     	; 0x166 <Switch_Mode+0x3a>
		}
		case 2:
		{
			OUTS_PORT_8_13 |= _BV(LED_3)|_BV(LED_1);
 146:	88 b3       	in	r24, 0x18	; 24
 148:	88 62       	ori	r24, 0x28	; 40
 14a:	88 bb       	out	0x18, r24	; 24
			OUTS_PORT_8_13 &= ~_BV(LED_2);
 14c:	c4 98       	cbi	0x18, 4	; 24
			Shield_set_display_value(0);
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	b9 df       	rcall	.-142    	; 0xc6 <Shield_set_display_value>
			break;
 154:	08 c0       	rjmp	.+16     	; 0x166 <Switch_Mode+0x3a>
		}
		case 3:
		{
			OUTS_PORT_8_13 |= _BV(LED_2)|_BV(LED_1);
 156:	88 b3       	in	r24, 0x18	; 24
 158:	80 63       	ori	r24, 0x30	; 48
 15a:	88 bb       	out	0x18, r24	; 24
			OUTS_PORT_8_13 &= ~_BV(LED_3);
 15c:	c3 98       	cbi	0x18, 3	; 24
			break;
 15e:	03 c0       	rjmp	.+6      	; 0x166 <Switch_Mode+0x3a>
		}
		default: mode = 1;       
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 60 00 	sts	0x0060, r24
	}
    eeprom_update_byte(&eeprom_mode, mode);                 // Сохраним новый режим работы
 166:	60 91 60 00 	lds	r22, 0x0060
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	44 d2       	rcall	.+1160   	; 0x5f8 <__eeupd_byte_m8>
}
 170:	08 95       	ret

00000172 <Shield_display_digit>:
		value2digits[3]++;
	}
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Shield_display_digit(uint8_t addr, uint8_t digit)		// Функция вывода 1 разряда на индикатор
{
 172:	1f 93       	push	r17
 174:	18 2f       	mov	r17, r24
	Write_74HC595(digit < sizeof(digit2segments) ? digit2segments[digit] : 0xFF);// Если входит в диапазон 0-0x0F - отображаем знакоместо, иначе - гасим (лог.1)
 176:	64 31       	cpi	r22, 0x14	; 20
 178:	30 f4       	brcc	.+12     	; 0x186 <Shield_display_digit+0x14>
 17a:	e6 2f       	mov	r30, r22
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	ea 59       	subi	r30, 0x9A	; 154
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	80 81       	ld	r24, Z
 184:	01 c0       	rjmp	.+2      	; 0x188 <Shield_display_digit+0x16>
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	8b df       	rcall	.-234    	; 0xa0 <Write_74HC595>
	Write_74HC595(1 << addr);								// И зажигаем нужный разряд
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <Shield_display_digit+0x22>
 190:	22 0f       	add	r18, r18
 192:	33 1f       	adc	r19, r19
 194:	1a 95       	dec	r17
 196:	e2 f7       	brpl	.-8      	; 0x190 <Shield_display_digit+0x1e>
 198:	82 2f       	mov	r24, r18
 19a:	82 df       	rcall	.-252    	; 0xa0 <Write_74HC595>
}
 19c:	1f 91       	pop	r17
 19e:	08 95       	ret

000001a0 <Shield_display_value>:
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Shield_display_value(void)								// Функция вывода значения на индикатор в основном цикле программы
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for (i = 0; i < 4; i++)									// Перебираем все разряды индикатора
	{
		Shield_display_digit(i,value2digits[i]);			// Отображая нужный 7-сегментный код в нужном разряде
 1a8:	fe 01       	movw	r30, r28
 1aa:	e0 58       	subi	r30, 0x80	; 128
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	60 81       	ld	r22, Z
 1b0:	8c 2f       	mov	r24, r28
 1b2:	df df       	rcall	.-66     	; 0x172 <Shield_display_digit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	8f e0       	ldi	r24, 0x0F	; 15
 1b6:	97 e2       	ldi	r25, 0x27	; 39
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <Shield_display_value+0x18>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <Shield_display_value+0x1e>
 1be:	00 00       	nop
 1c0:	21 96       	adiw	r28, 0x01	; 1
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Shield_display_value(void)								// Функция вывода значения на индикатор в основном цикле программы
{
	uint8_t i;
	for (i = 0; i < 4; i++)									// Перебираем все разряды индикатора
 1c2:	c4 30       	cpi	r28, 0x04	; 4
 1c4:	d1 05       	cpc	r29, r1
 1c6:	81 f7       	brne	.-32     	; 0x1a8 <Shield_display_value+0x8>
	{
		Shield_display_digit(i,value2digits[i]);			// Отображая нужный 7-сегментный код в нужном разряде
		_delay_ms(5);										// Максимально допустимая пауза
	}
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <Shield_display_Err>:
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Shield_display_Err(void)								// Вывод признака ошибки на индикатор
{
	for (uint8_t i = 0; i<4; i++)
	{
		value2digits[i] = i+16;
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	80 93 80 00 	sts	0x0080, r24
 1d4:	81 e1       	ldi	r24, 0x11	; 17
 1d6:	80 93 81 00 	sts	0x0081, r24
 1da:	82 e1       	ldi	r24, 0x12	; 18
 1dc:	80 93 82 00 	sts	0x0082, r24
 1e0:	83 e1       	ldi	r24, 0x13	; 19
 1e2:	80 93 83 00 	sts	0x0083, r24
	}
}
 1e6:	08 95       	ret

000001e8 <__vector_14>:
//=====================================================================================================================================================
ISR (ADC_vect)												// Прерывания по окончанию преобразования АЦП
{
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	8f 93       	push	r24
	adc_result = ADCH;										// Проснулись по окончанию преобразования. Заберем результат преобразования
 1f4:	85 b1       	in	r24, 0x05	; 5
 1f6:	80 93 7b 00 	sts	0x007B, r24
}
 1fa:	8f 91       	pop	r24
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <Get_RC5_code>:
#else														// Если используем функцию для получения кода RC5
uint16_t Get_RC5_code(void)									
{
	uint16_t code = 0;

	if (TSOP_PIN != 0)										// Только при отсутствии уже начавшегося приема
 206:	82 99       	sbic	0x10, 2	; 16
 208:	05 c0       	rjmp	.+10     	; 0x214 <Get_RC5_code+0xe>
 20a:	23 c0       	rjmp	.+70     	; 0x252 <Get_RC5_code+0x4c>
	{
		while (TSOP_PIN != 0)								// Ждем начала стартового импульса
		{
			if (mode != TSOP_MODE) return code;				// Если режим был изменен, на выход
 20c:	80 91 60 00 	lds	r24, 0x0060
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	f9 f4       	brne	.+62     	; 0x252 <Get_RC5_code+0x4c>
{
	uint16_t code = 0;

	if (TSOP_PIN != 0)										// Только при отсутствии уже начавшегося приема
	{
		while (TSOP_PIN != 0)								// Ждем начала стартового импульса
 214:	82 99       	sbic	0x10, 2	; 16
 216:	fa cf       	rjmp	.-12     	; 0x20c <Get_RC5_code+0x6>
		{
			if (mode != TSOP_MODE) return code;				// Если режим был изменен, на выход
		}
		while (TSOP_PIN == 0);								// Ждем окончания стартового импульса
 218:	82 9b       	sbis	0x10, 2	; 16
 21a:	fe cf       	rjmp	.-4      	; 0x218 <Get_RC5_code+0x12>
		cli();												// Запрещаем прерывания ради точности задержек
 21c:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	89 e6       	ldi	r24, 0x69	; 105
 220:	9a e0       	ldi	r25, 0x0A	; 10
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <Get_RC5_code+0x1c>
 226:	00 c0       	rjmp	.+0      	; 0x228 <Get_RC5_code+0x22>
 228:	00 00       	nop
 22a:	8d e0       	ldi	r24, 0x0D	; 13
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
#else														// Если используем функцию для получения кода RC5
uint16_t Get_RC5_code(void)									
{
	uint16_t code = 0;
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
		while (TSOP_PIN == 0);								// Ждем окончания стартового импульса
		cli();												// Запрещаем прерывания ради точности задержек
		_delay_us(START_DELAY);								// Выжидаем первый интервал
		for (uint8_t i=0; i<CODE_LEN; i++)					// Организуем цикл приема битов кода
		{
			code <<= 1;										// Сдвигаем код влево 
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
			if (TSOP_PIN == 0)								// Если на выходе приемника 0,
 234:	82 9b       	sbis	0x10, 2	; 16
			code |= 1;										// это означает прием лог.1		
 236:	21 60       	ori	r18, 0x01	; 1
 238:	e3 ee       	ldi	r30, 0xE3	; 227
 23a:	fd e0       	ldi	r31, 0x0D	; 13
 23c:	31 97       	sbiw	r30, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <Get_RC5_code+0x36>
 240:	00 c0       	rjmp	.+0      	; 0x242 <Get_RC5_code+0x3c>
 242:	00 00       	nop
 244:	81 50       	subi	r24, 0x01	; 1
			if (mode != TSOP_MODE) return code;				// Если режим был изменен, на выход
		}
		while (TSOP_PIN == 0);								// Ждем окончания стартового импульса
		cli();												// Запрещаем прерывания ради точности задержек
		_delay_us(START_DELAY);								// Выжидаем первый интервал
		for (uint8_t i=0; i<CODE_LEN; i++)					// Организуем цикл приема битов кода
 246:	a1 f7       	brne	.-24     	; 0x230 <Get_RC5_code+0x2a>
			code <<= 1;										// Сдвигаем код влево 
			if (TSOP_PIN == 0)								// Если на выходе приемника 0,
			code |= 1;										// это означает прием лог.1		
			_delay_us(BIT_DELAY);							// Ждем следующий момент опроса
		}
		sei();												// Считывание кода RC5 завершено, разрешаем прерывания
 248:	78 94       	sei
		rc5_delay = 255;
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	80 93 7e 00 	sts	0x007E, r24
 250:	02 c0       	rjmp	.+4      	; 0x256 <Get_RC5_code+0x50>

	if (TSOP_PIN != 0)										// Только при отсутствии уже начавшегося приема
	{
		while (TSOP_PIN != 0)								// Ждем начала стартового импульса
		{
			if (mode != TSOP_MODE) return code;				// Если режим был изменен, на выход
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
		}
		sei();												// Считывание кода RC5 завершено, разрешаем прерывания
		rc5_delay = 255;
	}
	return code;											// Возвращаем полученный код
}
 256:	c9 01       	movw	r24, r18
 258:	08 95       	ret

0000025a <Buzer_Beep>:
#endif
//=====================================================================================================================================================
void Buzer_Beep(uint8_t beep_time)							// Вызов звукового сигнала, длительность в мс
{
	BUZZER_ON();
 25a:	93 98       	cbi	0x12, 3	; 18
	buzzer_delay = beep_time;
 25c:	80 93 7c 00 	sts	0x007C, r24
}
 260:	08 95       	ret

00000262 <Key_Press>:
//=====================================================================================================================================================
// Секция обработки нажатий кнопок
//=====================================================================================================================================================
void Key_Press(void)										// Опрос кнопок. Может производится как в главном цикле, так и в прерывании таймера
{		
	if (BUTTON_1 == 0)									
 262:	99 99       	sbic	0x13, 1	; 19
 264:	10 c0       	rjmp	.+32     	; 0x286 <Key_Press+0x24>
	{
		mode--;
 266:	80 91 60 00 	lds	r24, 0x0060
 26a:	81 50       	subi	r24, 0x01	; 1
 26c:	80 93 60 00 	sts	0x0060, r24
		if (mode == 0) mode = NUM_OF_MODES;
 270:	80 91 60 00 	lds	r24, 0x0060
 274:	88 23       	and	r24, r24
 276:	19 f4       	brne	.+6      	; 0x27e <Key_Press+0x1c>
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	80 93 60 00 	sts	0x0060, r24
		Buzer_Beep(50);
 27e:	82 e3       	ldi	r24, 0x32	; 50
 280:	ec df       	rcall	.-40     	; 0x25a <Buzer_Beep>
		Switch_Mode();
 282:	54 df       	rcall	.-344    	; 0x12c <Switch_Mode>
 284:	08 95       	ret
	}
	else if (BUTTON_3 == 0)
 286:	9b 99       	sbic	0x13, 3	; 19
 288:	0f c0       	rjmp	.+30     	; 0x2a8 <Key_Press+0x46>
	{		
		mode++;
 28a:	80 91 60 00 	lds	r24, 0x0060
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 60 00 	sts	0x0060, r24
		if (mode > NUM_OF_MODES) mode = 1;
 294:	80 91 60 00 	lds	r24, 0x0060
 298:	84 30       	cpi	r24, 0x04	; 4
 29a:	18 f0       	brcs	.+6      	; 0x2a2 <Key_Press+0x40>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 60 00 	sts	0x0060, r24
		Buzer_Beep(50);
 2a2:	82 e3       	ldi	r24, 0x32	; 50
 2a4:	da df       	rcall	.-76     	; 0x25a <Buzer_Beep>
		Switch_Mode();
 2a6:	42 df       	rcall	.-380    	; 0x12c <Switch_Mode>
 2a8:	08 95       	ret

000002aa <__vector_6>:
void Shield_display_value(void);							// Вывод значения на индикатор
//=====================================================================================================================================================
// Секция работы с обработчиком прывания по совпадению. Период вызова - 1 мс. При необходимости добавить сюда код, требующий циклического выполнения
//=====================================================================================================================================================
ISR (TIMER1_COMPA_vect)
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	af 93       	push	r26
 2c6:	bf 93       	push	r27
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
	if (ind_delay != 0) ind_delay--;						// Отсчет времени отображения 1 разряда индикатора
 2cc:	80 91 65 00 	lds	r24, 0x0065
 2d0:	88 23       	and	r24, r24
 2d2:	21 f0       	breq	.+8      	; 0x2dc <__vector_6+0x32>
 2d4:	80 91 65 00 	lds	r24, 0x0065
 2d8:	81 50       	subi	r24, 0x01	; 1
 2da:	16 c0       	rjmp	.+44     	; 0x308 <__vector_6+0x5e>
	else
	{
		if (digit_counter < 4)								// Если счетчик разрядов в пределах 4 знакомест
 2dc:	80 91 7a 00 	lds	r24, 0x007A
 2e0:	84 30       	cpi	r24, 0x04	; 4
 2e2:	78 f4       	brcc	.+30     	; 0x302 <__vector_6+0x58>
		{
			Shield_display_digit(digit_counter,value2digits[digit_counter]);// Отображаем в текущем разряде необходимый 7-сегментный код
 2e4:	80 91 7a 00 	lds	r24, 0x007A
 2e8:	e0 91 7a 00 	lds	r30, 0x007A
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	e0 58       	subi	r30, 0x80	; 128
 2f0:	ff 4f       	sbci	r31, 0xFF	; 255
 2f2:	60 81       	ld	r22, Z
 2f4:	3e df       	rcall	.-388    	; 0x172 <Shield_display_digit>
			digit_counter++;								// Выбираем следующий разряд индикатора
 2f6:	80 91 7a 00 	lds	r24, 0x007A
 2fa:	8f 5f       	subi	r24, 0xFF	; 255
 2fc:	80 93 7a 00 	sts	0x007A, r24
 300:	02 c0       	rjmp	.+4      	; 0x306 <__vector_6+0x5c>
		}
		else digit_counter = 0;								// Иначе установим счетчик разрядов на 1 знакоместо
 302:	10 92 7a 00 	sts	0x007A, r1
		ind_delay = 3;
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	80 93 65 00 	sts	0x0065, r24
	}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
	if (temperature_delay != 0) temperature_delay--;		// Отсчет времени обновления показаний температуры
 30c:	80 91 61 00 	lds	r24, 0x0061
 310:	90 91 62 00 	lds	r25, 0x0062
 314:	00 97       	sbiw	r24, 0x00	; 0
 316:	49 f0       	breq	.+18     	; 0x32a <__vector_6+0x80>
 318:	80 91 61 00 	lds	r24, 0x0061
 31c:	90 91 62 00 	lds	r25, 0x0062
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	90 93 62 00 	sts	0x0062, r25
 326:	80 93 61 00 	sts	0x0061, r24
//-----------------------------------------------------------------------------------------------------------------------------------------------------	
	adc_delay--;											// Отсчет времени обновления показаний АЦП
 32a:	80 91 7d 00 	lds	r24, 0x007D
 32e:	81 50       	subi	r24, 0x01	; 1
 330:	80 93 7d 00 	sts	0x007D, r24
//-----------------------------------------------------------------------------------------------------------------------------------------------------	
	if (led_delay != 0) led_delay--;						// Отсчет времени мигания светодиодов
 334:	80 91 63 00 	lds	r24, 0x0063
 338:	90 91 64 00 	lds	r25, 0x0064
 33c:	00 97       	sbiw	r24, 0x00	; 0
 33e:	31 f0       	breq	.+12     	; 0x34c <__vector_6+0xa2>
 340:	80 91 63 00 	lds	r24, 0x0063
 344:	90 91 64 00 	lds	r25, 0x0064
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	06 c0       	rjmp	.+12     	; 0x358 <__vector_6+0xae>
	else
	{
		OUTS_PORT_8_13 ^= 1<<LED_4;
 34c:	88 b3       	in	r24, 0x18	; 24
 34e:	94 e0       	ldi	r25, 0x04	; 4
 350:	89 27       	eor	r24, r25
 352:	88 bb       	out	0x18, r24	; 24
		led_delay = 500;
 354:	84 ef       	ldi	r24, 0xF4	; 244
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	90 93 64 00 	sts	0x0064, r25
 35c:	80 93 63 00 	sts	0x0063, r24
	}
//-----------------------------------------------------------------------------------------------------------------------------------------------------	
	if (buzzer_delay != 0) buzzer_delay--;					// Отсчет времени звучания бузера
 360:	80 91 7c 00 	lds	r24, 0x007C
 364:	88 23       	and	r24, r24
 366:	31 f0       	breq	.+12     	; 0x374 <__vector_6+0xca>
 368:	80 91 7c 00 	lds	r24, 0x007C
 36c:	81 50       	subi	r24, 0x01	; 1
 36e:	80 93 7c 00 	sts	0x007C, r24
 372:	01 c0       	rjmp	.+2      	; 0x376 <__vector_6+0xcc>
	else
	{
		BUZZER_OFF();
 374:	93 9a       	sbi	0x12, 3	; 18
	}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
	if (rc5_delay != 0) rc5_delay--;						// Отсчет задержки повторного приема кода RC5
 376:	80 91 7e 00 	lds	r24, 0x007E
 37a:	88 23       	and	r24, r24
 37c:	29 f0       	breq	.+10     	; 0x388 <__vector_6+0xde>
 37e:	80 91 7e 00 	lds	r24, 0x007E
 382:	81 50       	subi	r24, 0x01	; 1
 384:	80 93 7e 00 	sts	0x007E, r24
		GICR = 1<<INT0;										// External Interrupt Request 0 Enable
	}
	#endif
//-----------------------------------------------------------------------------------------------------------------------------------------------------
	#ifdef	USE_KEY_POLLING_INTERRUPT						// Если используем опрос кнопок в прерывании таймера
	key_delay--;
 388:	80 91 7f 00 	lds	r24, 0x007F
 38c:	81 50       	subi	r24, 0x01	; 1
 38e:	80 93 7f 00 	sts	0x007F, r24
	if (key_delay == 0) Key_Press();
 392:	80 91 7f 00 	lds	r24, 0x007F
 396:	88 23       	and	r24, r24
 398:	09 f4       	brne	.+2      	; 0x39c <__vector_6+0xf2>
 39a:	63 df       	rcall	.-314    	; 0x262 <Key_Press>
	#endif
}
 39c:	ff 91       	pop	r31
 39e:	ef 91       	pop	r30
 3a0:	bf 91       	pop	r27
 3a2:	af 91       	pop	r26
 3a4:	9f 91       	pop	r25
 3a6:	8f 91       	pop	r24
 3a8:	7f 91       	pop	r23
 3aa:	6f 91       	pop	r22
 3ac:	5f 91       	pop	r21
 3ae:	4f 91       	pop	r20
 3b0:	3f 91       	pop	r19
 3b2:	2f 91       	pop	r18
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <Send_Byte>:
	buzzer_delay = beep_time;
}
//=====================================================================================================================================================
void Send_Byte(uint8_t byte)								// Функция отправки одного байта по UART
{
	while (!(UCSRA & (1<<UDRE))){};							// Ждем флага готовности UART
 3be:	5d 9b       	sbis	0x0b, 5	; 11
 3c0:	fe cf       	rjmp	.-4      	; 0x3be <Send_Byte>
	UDR = byte;												// Засылаем байт в регистр передатчика
 3c2:	8c b9       	out	0x0c, r24	; 12
}
 3c4:	08 95       	ret

000003c6 <Reset_1_wire>:
//=====================================================================================================================================================	
// Секция работы с шиной 1-wire
//=====================================================================================================================================================	
uint8_t Reset_1_wire(void)									// Функция инициализации обмена (Reset-Presence)
{
	ONE_WIRE_PIN_LOW();										// Опускаем линию в 0
 3c6:	a4 9a       	sbi	0x14, 4	; 20
 3c8:	8f eb       	ldi	r24, 0xBF	; 191
 3ca:	93 e0       	ldi	r25, 0x03	; 3
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <Reset_1_wire+0x6>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <Reset_1_wire+0xc>
 3d2:	00 00       	nop
	_delay_us(480);											// Удерживаем линию в низком состоянии на протяжении 480 мкс
	ONE_WIRE_PIN_HIGH();									// Отпускаем линию
 3d4:	a4 98       	cbi	0x14, 4	; 20
	uint8_t i=38;											// Засекаем счетчик на 60 мкс
 3d6:	86 e2       	ldi	r24, 0x26	; 38
 3d8:	92 e0       	ldi	r25, 0x02	; 2
 3da:	9a 95       	dec	r25
 3dc:	f1 f7       	brne	.-4      	; 0x3da <Reset_1_wire+0x14>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <Reset_1_wire+0x1a>
	for (; i>0; i--)							
	{
		_delay_us(1);											
		if (ONE_WIRE_LINE != 0) break;						// Линия поднялась, продолжаем	
 3e0:	9c 99       	sbic	0x13, 4	; 19
 3e2:	0a c0       	rjmp	.+20     	; 0x3f8 <Reset_1_wire+0x32>
{
	ONE_WIRE_PIN_LOW();										// Опускаем линию в 0
	_delay_us(480);											// Удерживаем линию в низком состоянии на протяжении 480 мкс
	ONE_WIRE_PIN_HIGH();									// Отпускаем линию
	uint8_t i=38;											// Засекаем счетчик на 60 мкс
	for (; i>0; i--)							
 3e4:	81 50       	subi	r24, 0x01	; 1
 3e6:	c1 f7       	brne	.-16     	; 0x3d8 <Reset_1_wire+0x12>
 3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <Reset_1_wire+0x32>
 3ea:	92 e0       	ldi	r25, 0x02	; 2
 3ec:	9a 95       	dec	r25
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <Reset_1_wire+0x26>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <Reset_1_wire+0x2c>
		else if (i==0) return 0;							// Задержка закончена, линия не поднялась - неисправность на линии 
	}
	for (; i>0; i--)										// Продолжаем отсчет 60 мкс
	{
		_delay_us(1);											
		if (ONE_WIRE_LINE == 0) break;						// Сигнал Presence обнаружен
 3f2:	9c 9b       	sbis	0x13, 4	; 19
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <Reset_1_wire+0x36>
	{
		_delay_us(1);											
		if (ONE_WIRE_LINE != 0) break;						// Линия поднялась, продолжаем	
		else if (i==0) return 0;							// Задержка закончена, линия не поднялась - неисправность на линии 
	}
	for (; i>0; i--)										// Продолжаем отсчет 60 мкс
 3f6:	81 50       	subi	r24, 0x01	; 1
 3f8:	88 23       	and	r24, r24
 3fa:	b9 f7       	brne	.-18     	; 0x3ea <Reset_1_wire+0x24>
 3fc:	82 e9       	ldi	r24, 0x92	; 146
 3fe:	8a 95       	dec	r24
 400:	f1 f7       	brne	.-4      	; 0x3fe <Reset_1_wire+0x38>
 402:	00 c0       	rjmp	.+0      	; 0x404 <Reset_1_wire+0x3e>
		_delay_us(1);											
		if (ONE_WIRE_LINE == 0) break;						// Сигнал Presence обнаружен
		else if (i==0) return 0;							// Задержка закончена, сигнал Presence не обнаружен
	}	
	_delay_us(55);											// Ждем 55 мкс (Presence>=60)
	if (ONE_WIRE_LINE != 0) return 0;						// Проверяем линию. Если опущена - можем продолжать
 404:	9c 99       	sbic	0x13, 4	; 19
 406:	0b c0       	rjmp	.+22     	; 0x41e <Reset_1_wire+0x58>
 408:	86 e7       	ldi	r24, 0x76	; 118
 40a:	92 e0       	ldi	r25, 0x02	; 2
 40c:	9a 95       	dec	r25
 40e:	f1 f7       	brne	.-4      	; 0x40c <Reset_1_wire+0x46>
 410:	00 c0       	rjmp	.+0      	; 0x412 <Reset_1_wire+0x4c>
	for (i=118; i>0; i--)									// Засекаем счетчик на 190 мкс
	{
		_delay_us(1);											
		if (ONE_WIRE_LINE != 0) break;						// Линия поднялась - фиксируем конец Presence 						
 412:	9c 99       	sbic	0x13, 4	; 19
 414:	06 c0       	rjmp	.+12     	; 0x422 <Reset_1_wire+0x5c>
 416:	81 50       	subi	r24, 0x01	; 1
		if (ONE_WIRE_LINE == 0) break;						// Сигнал Presence обнаружен
		else if (i==0) return 0;							// Задержка закончена, сигнал Presence не обнаружен
	}	
	_delay_us(55);											// Ждем 55 мкс (Presence>=60)
	if (ONE_WIRE_LINE != 0) return 0;						// Проверяем линию. Если опущена - можем продолжать
	for (i=118; i>0; i--)									// Засекаем счетчик на 190 мкс
 418:	c1 f7       	brne	.-16     	; 0x40a <Reset_1_wire+0x44>
	{
		_delay_us(1);											
		if (ONE_WIRE_LINE != 0) break;						// Линия поднялась - фиксируем конец Presence 						
		else if (i==0) return 0;							// Задержка закончена, линия не поднялась, неисправность на линии
	}
	return 1;												// Полученный ответ соответствует временным рамкам
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	08 95       	ret
		_delay_us(1);											
		if (ONE_WIRE_LINE == 0) break;						// Сигнал Presence обнаружен
		else if (i==0) return 0;							// Задержка закончена, сигнал Presence не обнаружен
	}	
	_delay_us(55);											// Ждем 55 мкс (Presence>=60)
	if (ONE_WIRE_LINE != 0) return 0;						// Проверяем линию. Если опущена - можем продолжать
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	08 95       	ret
	{
		_delay_us(1);											
		if (ONE_WIRE_LINE != 0) break;						// Линия поднялась - фиксируем конец Presence 						
		else if (i==0) return 0;							// Задержка закончена, линия не поднялась, неисправность на линии
	}
	return 1;												// Полученный ответ соответствует временным рамкам
 422:	81 e0       	ldi	r24, 0x01	; 1
}
 424:	08 95       	ret

00000426 <Send_1_wire_byte>:
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Send_1_wire_byte(uint8_t byte)							// Отправка 1 байта по шине 1-wire
{
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i=0; i<8; i++)								// Организуем цикл отправки 1 байта
	{
		if((byte & (1<<i)) == 1<<i)							// Send 1
 42a:	41 e0       	ldi	r20, 0x01	; 1
 42c:	50 e0       	ldi	r21, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	ba 01       	movw	r22, r20
 432:	02 2e       	mov	r0, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <Send_1_wire_byte+0x14>
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	0a 94       	dec	r0
 43c:	e2 f7       	brpl	.-8      	; 0x436 <Send_1_wire_byte+0x10>
 43e:	fb 01       	movw	r30, r22
 440:	e8 23       	and	r30, r24
 442:	f9 23       	and	r31, r25
 444:	e6 17       	cp	r30, r22
 446:	f7 07       	cpc	r31, r23
 448:	51 f4       	brne	.+20     	; 0x45e <Send_1_wire_byte+0x38>
		{
			ONE_WIRE_PIN_LOW();								// Опускаем линию в 0
 44a:	a4 9a       	sbi	0x14, 4	; 20
 44c:	62 e0       	ldi	r22, 0x02	; 2
 44e:	6a 95       	dec	r22
 450:	f1 f7       	brne	.-4      	; 0x44e <Send_1_wire_byte+0x28>
 452:	00 c0       	rjmp	.+0      	; 0x454 <Send_1_wire_byte+0x2e>
			_delay_us(1);		
			ONE_WIRE_PIN_HIGH();							// Отпускаем линию
 454:	a4 98       	cbi	0x14, 4	; 20
 456:	60 ea       	ldi	r22, 0xA0	; 160
 458:	6a 95       	dec	r22
 45a:	f1 f7       	brne	.-4      	; 0x458 <Send_1_wire_byte+0x32>
 45c:	09 c0       	rjmp	.+18     	; 0x470 <__stack+0x11>
			_delay_us(60);									// Ждем 60 мкс	
		}
		else												// Send 0
		{
			ONE_WIRE_PIN_LOW();								// Опускаем линию в 0		
 45e:	a4 9a       	sbi	0x14, 4	; 20
 460:	60 ea       	ldi	r22, 0xA0	; 160
 462:	6a 95       	dec	r22
 464:	f1 f7       	brne	.-4      	; 0x462 <__stack+0x3>
			_delay_us(60);									// Ждем 60 мкс
			ONE_WIRE_PIN_HIGH();							// Отпускаем линию
 466:	a4 98       	cbi	0x14, 4	; 20
 468:	62 e0       	ldi	r22, 0x02	; 2
 46a:	6a 95       	dec	r22
 46c:	f1 f7       	brne	.-4      	; 0x46a <__stack+0xb>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__stack+0x11>
 470:	2f 5f       	subi	r18, 0xFF	; 255
 472:	3f 4f       	sbci	r19, 0xFF	; 255
	return 1;												// Полученный ответ соответствует временным рамкам
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
void Send_1_wire_byte(uint8_t byte)							// Отправка 1 байта по шине 1-wire
{
	for (uint8_t i=0; i<8; i++)								// Организуем цикл отправки 1 байта
 474:	28 30       	cpi	r18, 0x08	; 8
 476:	31 05       	cpc	r19, r1
 478:	d9 f6       	brne	.-74     	; 0x430 <Send_1_wire_byte+0xa>
			_delay_us(60);									// Ждем 60 мкс
			ONE_WIRE_PIN_HIGH();							// Отпускаем линию
			_delay_us(1);
		}
	}
}
 47a:	08 95       	ret

0000047c <One_wire_receive_byte>:
//-----------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t One_wire_receive_byte(void)							// Прием 1 байта по шине 1-wire
{	
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t one_wire_byte = 0;
 480:	80 e0       	ldi	r24, 0x00	; 0
		_delay_us(1);
		ONE_WIRE_PIN_HIGH();								// Отпускаем линию
		_delay_us(12);										// Ждем 12 мкс
		if (ONE_WIRE_LINE == 0)
			one_wire_byte &=~(1<<i);
		else one_wire_byte |= 1<<i;
 482:	41 e0       	ldi	r20, 0x01	; 1
 484:	50 e0       	ldi	r21, 0x00	; 0
uint8_t One_wire_receive_byte(void)							// Прием 1 байта по шине 1-wire
{	
	uint8_t one_wire_byte = 0;
	for (uint8_t i=0; i<8; i++)								// Организуем цикл отправки 1 байта
	{
		ONE_WIRE_PIN_LOW();									// Опускаем линию в 0		
 486:	a4 9a       	sbi	0x14, 4	; 20
 488:	92 e0       	ldi	r25, 0x02	; 2
 48a:	9a 95       	dec	r25
 48c:	f1 f7       	brne	.-4      	; 0x48a <One_wire_receive_byte+0xe>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <One_wire_receive_byte+0x14>
		_delay_us(1);
		ONE_WIRE_PIN_HIGH();								// Отпускаем линию
 490:	a4 98       	cbi	0x14, 4	; 20
 492:	90 e2       	ldi	r25, 0x20	; 32
 494:	9a 95       	dec	r25
 496:	f1 f7       	brne	.-4      	; 0x494 <One_wire_receive_byte+0x18>
		_delay_us(12);										// Ждем 12 мкс
		if (ONE_WIRE_LINE == 0)
 498:	9c 99       	sbic	0x13, 4	; 19
 49a:	0a c0       	rjmp	.+20     	; 0x4b0 <One_wire_receive_byte+0x34>
			one_wire_byte &=~(1<<i);
 49c:	ba 01       	movw	r22, r20
 49e:	02 2e       	mov	r0, r18
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <One_wire_receive_byte+0x2a>
 4a2:	66 0f       	add	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	0a 94       	dec	r0
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <One_wire_receive_byte+0x26>
 4aa:	60 95       	com	r22
 4ac:	86 23       	and	r24, r22
 4ae:	08 c0       	rjmp	.+16     	; 0x4c0 <One_wire_receive_byte+0x44>
		else one_wire_byte |= 1<<i;
 4b0:	ba 01       	movw	r22, r20
 4b2:	02 2e       	mov	r0, r18
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <One_wire_receive_byte+0x3e>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	0a 94       	dec	r0
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <One_wire_receive_byte+0x3a>
 4be:	86 2b       	or	r24, r22
 4c0:	9d e7       	ldi	r25, 0x7D	; 125
 4c2:	9a 95       	dec	r25
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <One_wire_receive_byte+0x46>
 4c6:	00 00       	nop
 4c8:	2f 5f       	subi	r18, 0xFF	; 255
 4ca:	3f 4f       	sbci	r19, 0xFF	; 255
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t One_wire_receive_byte(void)							// Прием 1 байта по шине 1-wire
{	
	uint8_t one_wire_byte = 0;
	for (uint8_t i=0; i<8; i++)								// Организуем цикл отправки 1 байта
 4cc:	28 30       	cpi	r18, 0x08	; 8
 4ce:	31 05       	cpc	r19, r1
 4d0:	d1 f6       	brne	.-76     	; 0x486 <One_wire_receive_byte+0xa>
			one_wire_byte &=~(1<<i);
		else one_wire_byte |= 1<<i;
		_delay_us(47);										// Ждем 47 мкс (60-12-1) до конца тайм-слота
	}
	return one_wire_byte;
}
 4d2:	08 95       	ret

000004d4 <Read_Temperature>:
//-----------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Read_Temperature(void)								// Чтение температуры
{
 4d4:	1f 93       	push	r17
	uint8_t temperature = 0;
	temperature = One_wire_receive_byte()>>4;				// Читаем младший байт температуры, перемещая целую часть в младшую тетраду
 4d6:	d2 df       	rcall	.-92     	; 0x47c <One_wire_receive_byte>
 4d8:	18 2f       	mov	r17, r24
	return (temperature | (One_wire_receive_byte() << 4));	// Читаем старший байт температуры, перемещая значащую часть в старшую тетраду, совмещаем тетрады 2 принятых байт, и возвращаем результат
 4da:	d0 df       	rcall	.-96     	; 0x47c <One_wire_receive_byte>
 4dc:	82 95       	swap	r24
 4de:	80 7f       	andi	r24, 0xF0	; 240
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
uint8_t Read_Temperature(void)								// Чтение температуры
{
	uint8_t temperature = 0;
	temperature = One_wire_receive_byte()>>4;				// Читаем младший байт температуры, перемещая целую часть в младшую тетраду
 4e0:	12 95       	swap	r17
 4e2:	1f 70       	andi	r17, 0x0F	; 15
	return (temperature | (One_wire_receive_byte() << 4));	// Читаем старший байт температуры, перемещая значащую часть в старшую тетраду, совмещаем тетрады 2 принятых байт, и возвращаем результат
}
 4e4:	81 2b       	or	r24, r17
 4e6:	1f 91       	pop	r17
 4e8:	08 95       	ret

000004ea <main>:
//=====================================================================================================================================================
// Обьявляем прототипы функций

//=====================================================================================================================================================
int main(void)
{
 4ea:	af 92       	push	r10
 4ec:	bf 92       	push	r11
 4ee:	cf 92       	push	r12
 4f0:	df 92       	push	r13
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
	uint16_t key_delay = 0;										// Опрос кнопок будет производиться прямо в основном цикле программы
	uint8_t  ds18b20_mode = 0;

	Init();														// Инициализация портов и периферии
 4fe:	af dd       	rcall	.-1186   	; 0x5e <Init>

	mode = eeprom_read_byte(&eeprom_mode);                      // Восстанавливаем из памяти предыдущий режим работы
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	71 d0       	rcall	.+226    	; 0x5e8 <__eerd_byte_m8>
 506:	80 93 60 00 	sts	0x0060, r24
	Switch_Mode();                                              // И зажигаем соответствующий светодиод
 50a:	10 de       	rcall	.-992    	; 0x12c <Switch_Mode>

	sei();
 50c:	78 94       	sei

//=====================================================================================================================================================
int main(void)
{
	uint16_t key_delay = 0;										// Опрос кнопок будет производиться прямо в основном цикле программы
	uint8_t  ds18b20_mode = 0;
 50e:	dd 24       	eor	r13, r13
						else
						{
							Shield_display_Err();
							Buzer_Beep(50);
						}
						temperature_delay = 2000;				// Устанавливаем задержку до следующего обновления показаний температуры
 510:	00 ed       	ldi	r16, 0xD0	; 208
 512:	17 e0       	ldi	r17, 0x07	; 7
						if (one_wire_state == 1)
						{
							Send_1_wire_byte(0xCC);				// Команда "skip ROM"
							Send_1_wire_byte(0x44);				// Начать преобразование	
							sei();								// Задержка на преобразование очень длинная и не строгая, разрешим прерывания
							temperature_delay = 750;			// Задержка на время преобразования
 514:	8e ee       	ldi	r24, 0xEE	; 238
 516:	e8 2e       	mov	r14, r24
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	f8 2e       	mov	r15, r24
							ds18b20_mode = 1;
 51c:	cc 24       	eor	r12, r12
 51e:	c3 94       	inc	r12
		#ifndef	USE_KEY_POLLING_INTERRUPT						// Если не используем опрос кнопок в прерывании таймера									
		key_delay--;
		if (key_delay == 0) Key_Press();						// Опрос кнопок будет производиться прямо в основном цикле программы		
		#endif

		switch(mode)
 520:	80 91 60 00 	lds	r24, 0x0060
 524:	82 30       	cpi	r24, 0x02	; 2
 526:	a1 f0       	breq	.+40     	; 0x550 <main+0x66>
 528:	83 30       	cpi	r24, 0x03	; 3
 52a:	29 f1       	breq	.+74     	; 0x576 <main+0x8c>
 52c:	81 30       	cpi	r24, 0x01	; 1
 52e:	09 f0       	breq	.+2      	; 0x532 <main+0x48>
 530:	58 c0       	rjmp	.+176    	; 0x5e2 <main+0xf8>
		{
			case 1:
			{
				if (adc_delay == 0)								// Если пришло время обновить показания АЦП																		 
 532:	80 91 7d 00 	lds	r24, 0x007D
 536:	88 23       	and	r24, r24
 538:	99 f7       	brne	.-26     	; 0x520 <main+0x36>
				{	
					asm("sleep");								// Sleep and start new conversion
 53a:	88 95       	sleep
					Shield_set_display_value(adc_result);		// Set new ADC result for indication
 53c:	80 91 7b 00 	lds	r24, 0x007B
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	c1 dd       	rcall	.-1150   	; 0xc6 <Shield_set_display_value>
					adc_delay--;								// Set new conversion delay
 544:	80 91 7d 00 	lds	r24, 0x007D
 548:	81 50       	subi	r24, 0x01	; 1
 54a:	80 93 7d 00 	sts	0x007D, r24
 54e:	e8 cf       	rjmp	.-48     	; 0x520 <main+0x36>
			}
			case 2:
			{
				#ifndef	USE_INTERRUPT_4_TSOP					// Если не используем внешнее прерывание INT0 для получения кода RC5			
				uint16_t rc5_code = 0;			
				if (rc5_delay == 0) rc5_code = Get_RC5_code();	// И нет запрета на повторное считывания кода, используем функцию для получения кода RC5	
 550:	80 91 7e 00 	lds	r24, 0x007E
 554:	88 23       	and	r24, r24
 556:	21 f7       	brne	.-56     	; 0x520 <main+0x36>
 558:	56 de       	rcall	.-852    	; 0x206 <Get_RC5_code>
 55a:	ec 01       	movw	r28, r24
				#endif
									
				if (rc5_code != 0)
 55c:	00 97       	sbiw	r24, 0x00	; 0
 55e:	01 f3       	breq	.-64     	; 0x520 <main+0x36>
				{
					Shield_set_display_value(rc5_code & 0x07FF);// Выводим на индикатор, маскируя 2-й стартовый бит и toggle-бит
 560:	97 70       	andi	r25, 0x07	; 7
 562:	b1 dd       	rcall	.-1182   	; 0xc6 <Shield_set_display_value>
					Send_Byte((rc5_code>>8) & 0x07);			// Выводим в UART, маскируя 2-й стартовый бит и toggle-бит
 564:	5e 01       	movw	r10, r28
 566:	8b 2d       	mov	r24, r11
 568:	87 70       	andi	r24, 0x07	; 7
 56a:	29 df       	rcall	.-430    	; 0x3be <Send_Byte>
					Send_Byte(rc5_code);
 56c:	8c 2f       	mov	r24, r28
 56e:	27 df       	rcall	.-434    	; 0x3be <Send_Byte>
					rc5_code = 0;
					Buzer_Beep(50);
 570:	82 e3       	ldi	r24, 0x32	; 50
 572:	73 de       	rcall	.-794    	; 0x25a <Buzer_Beep>
 574:	d5 cf       	rjmp	.-86     	; 0x520 <main+0x36>
				}
				break;
			}
			case 3:
			{
				if (temperature_delay == 0)						// Если пришло время обновить показания температуры
 576:	80 91 61 00 	lds	r24, 0x0061
 57a:	90 91 62 00 	lds	r25, 0x0062
 57e:	00 97       	sbiw	r24, 0x00	; 0
 580:	79 f6       	brne	.-98     	; 0x520 <main+0x36>
				{
					uint8_t one_wire_state = 0;
					
					if (ds18b20_mode == 0)
 582:	dd 20       	and	r13, r13
 584:	c1 f4       	brne	.+48     	; 0x5b6 <main+0xcc>
					{							
						cli();									// Запрещаем прерывания ради точности задержек
 586:	f8 94       	cli
						one_wire_state = Reset_1_wire();		// Инициализация обмена (Reset-Presence)			
 588:	1e df       	rcall	.-452    	; 0x3c6 <Reset_1_wire>
						if (one_wire_state == 1)
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	61 f4       	brne	.+24     	; 0x5a6 <main+0xbc>
						{
							Send_1_wire_byte(0xCC);				// Команда "skip ROM"
 58e:	8c ec       	ldi	r24, 0xCC	; 204
 590:	4a df       	rcall	.-364    	; 0x426 <Send_1_wire_byte>
							Send_1_wire_byte(0x44);				// Начать преобразование	
 592:	84 e4       	ldi	r24, 0x44	; 68
 594:	48 df       	rcall	.-368    	; 0x426 <Send_1_wire_byte>
							sei();								// Задержка на преобразование очень длинная и не строгая, разрешим прерывания
 596:	78 94       	sei
							temperature_delay = 750;			// Задержка на время преобразования
 598:	f0 92 62 00 	sts	0x0062, r15
 59c:	e0 92 61 00 	sts	0x0061, r14
							ds18b20_mode = 1;
 5a0:	dd 24       	eor	r13, r13
 5a2:	d3 94       	inc	r13
 5a4:	1c c0       	rjmp	.+56     	; 0x5de <main+0xf4>
						}
						else
						{
							Shield_display_Err();
 5a6:	13 de       	rcall	.-986    	; 0x1ce <Shield_display_Err>
							Buzer_Beep(50);
 5a8:	82 e3       	ldi	r24, 0x32	; 50
 5aa:	57 de       	rcall	.-850    	; 0x25a <Buzer_Beep>
							temperature_delay = 2000;			// Устанавливаем задержку до следующего обновления показаний температуры
 5ac:	10 93 62 00 	sts	0x0062, r17
 5b0:	00 93 61 00 	sts	0x0061, r16
 5b4:	14 c0       	rjmp	.+40     	; 0x5de <main+0xf4>
							ds18b20_mode = 0;
						}
					}					
					else if (ds18b20_mode == 1)	
					{			
						cli();									// Запрещаем прерывания ради точности задержек
 5b6:	f8 94       	cli
						one_wire_state = Reset_1_wire();		// Повторная инициализация обмена (Reset-Presence)
 5b8:	06 df       	rcall	.-500    	; 0x3c6 <Reset_1_wire>
						if (one_wire_state == 1)
 5ba:	81 30       	cpi	r24, 0x01	; 1
 5bc:	41 f4       	brne	.+16     	; 0x5ce <main+0xe4>
						{
							Send_1_wire_byte(0xCC);				// Повторная команда "skip ROM"
 5be:	8c ec       	ldi	r24, 0xCC	; 204
 5c0:	32 df       	rcall	.-412    	; 0x426 <Send_1_wire_byte>
							Send_1_wire_byte(0xBE);				// Будем читать значение температуры		
 5c2:	8e eb       	ldi	r24, 0xBE	; 190
 5c4:	30 df       	rcall	.-416    	; 0x426 <Send_1_wire_byte>
							Shield_set_display_value(Read_Temperature());// Читаем и сразу преобразуем для вывода на индикатор
 5c6:	86 df       	rcall	.-244    	; 0x4d4 <Read_Temperature>
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	7d dd       	rcall	.-1286   	; 0xc6 <Shield_set_display_value>
 5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <main+0xea>
						}
						else
						{
							Shield_display_Err();
 5ce:	ff dd       	rcall	.-1026   	; 0x1ce <Shield_display_Err>
							Buzer_Beep(50);
 5d0:	82 e3       	ldi	r24, 0x32	; 50
 5d2:	43 de       	rcall	.-890    	; 0x25a <Buzer_Beep>
						}
						temperature_delay = 2000;				// Устанавливаем задержку до следующего обновления показаний температуры
 5d4:	10 93 62 00 	sts	0x0062, r17
 5d8:	00 93 61 00 	sts	0x0061, r16
						ds18b20_mode = 0;
 5dc:	dd 24       	eor	r13, r13
					}
					sei();
 5de:	78 94       	sei
 5e0:	9f cf       	rjmp	.-194    	; 0x520 <main+0x36>
				}
				break;
			}
			default: mode = 1;
 5e2:	c0 92 60 00 	sts	0x0060, r12
 5e6:	9c cf       	rjmp	.-200    	; 0x520 <main+0x36>

000005e8 <__eerd_byte_m8>:
 5e8:	e1 99       	sbic	0x1c, 1	; 28
 5ea:	fe cf       	rjmp	.-4      	; 0x5e8 <__eerd_byte_m8>
 5ec:	9f bb       	out	0x1f, r25	; 31
 5ee:	8e bb       	out	0x1e, r24	; 30
 5f0:	e0 9a       	sbi	0x1c, 0	; 28
 5f2:	99 27       	eor	r25, r25
 5f4:	8d b3       	in	r24, 0x1d	; 29
 5f6:	08 95       	ret

000005f8 <__eeupd_byte_m8>:
 5f8:	26 2f       	mov	r18, r22

000005fa <__eeupd_r18_m8>:
 5fa:	e1 99       	sbic	0x1c, 1	; 28
 5fc:	fe cf       	rjmp	.-4      	; 0x5fa <__eeupd_r18_m8>
 5fe:	9f bb       	out	0x1f, r25	; 31
 600:	8e bb       	out	0x1e, r24	; 30
 602:	e0 9a       	sbi	0x1c, 0	; 28
 604:	01 97       	sbiw	r24, 0x01	; 1
 606:	0d b2       	in	r0, 0x1d	; 29
 608:	02 16       	cp	r0, r18
 60a:	31 f0       	breq	.+12     	; 0x618 <__eeupd_r18_m8+0x1e>
 60c:	2d bb       	out	0x1d, r18	; 29
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	f8 94       	cli
 612:	e2 9a       	sbi	0x1c, 2	; 28
 614:	e1 9a       	sbi	0x1c, 1	; 28
 616:	0f be       	out	0x3f, r0	; 63
 618:	08 95       	ret

0000061a <_exit>:
 61a:	f8 94       	cli

0000061c <__stop_program>:
 61c:	ff cf       	rjmp	.-2      	; 0x61c <__stop_program>
